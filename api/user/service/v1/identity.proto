syntax = "proto3";

package api.user.service.v1;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "gnostic/openapi/v3/annotations.proto";

import "pkg/utils/pagination/v1/pagination.proto";
import "api/user/service/v1/common.proto";

option go_package = "om-platform/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 用户身份联合管理服务
// 提供与外部身份提供商集成的功能，支持SSO、OAuth2、LDAP等认证方式
// 错误处理：所有接口在发生错误时将返回ErrorResponse结构，包含统一的错误码、错误消息和详细信息
service IdentityService {
  // 配置身份提供商
  rpc ConfigureIdentityProvider (ConfigureIdentityProviderRequest) returns (ConfigureIdentityProviderResponse) {}
  
  // 获取身份提供商配置
  rpc GetIdentityProviderConfig (GetIdentityProviderConfigRequest) returns (IdentityProviderConfig) {}
  
  // 更新身份提供商配置
  rpc UpdateIdentityProviderConfig (UpdateIdentityProviderConfigRequest) returns (google.protobuf.Empty) {}
  
  // 删除身份提供商配置
  rpc DeleteIdentityProviderConfig (DeleteIdentityProviderConfigRequest) returns (google.protobuf.Empty) {}
  
  // 列出身份提供商配置
  rpc ListIdentityProviderConfigs (ListIdentityProviderConfigsRequest) returns (ListIdentityProviderConfigsResponse) {}
  
  // 测试身份提供商连接
  rpc TestIdentityProviderConnection (TestIdentityProviderConnectionRequest) returns (TestIdentityProviderConnectionResponse) {}
  
  // 获取身份提供商登录URL
  rpc GetIdentityProviderLoginURL (GetIdentityProviderLoginURLRequest) returns (GetIdentityProviderLoginURLResponse) {}
  
  // 处理身份提供商回调
  rpc HandleIdentityProviderCallback (HandleIdentityProviderCallbackRequest) returns (HandleIdentityProviderCallbackResponse) {}
  
  // 关联外部身份
  rpc LinkExternalIdentity (LinkExternalIdentityRequest) returns (LinkExternalIdentityResponse) {}
  
  // 解除外部身份关联
  rpc UnlinkExternalIdentity (UnlinkExternalIdentityRequest) returns (google.protobuf.Empty) {}
  
  // 获取用户关联的外部身份
  rpc GetUserExternalIdentities (GetUserExternalIdentitiesRequest) returns (GetUserExternalIdentitiesResponse) {}
  
  // 同步用户信息
  rpc SyncUserFromExternalIdentity (SyncUserFromExternalIdentityRequest) returns (SyncUserFromExternalIdentityResponse) {}
  
  // 批量同步用户
  rpc BatchSyncUsersFromExternalIdentity (BatchSyncUsersFromExternalIdentityRequest) returns (BatchSyncUsersFromExternalIdentityResponse) {}
  
  // 获取身份提供商元数据
  rpc GetIdentityProviderMetadata (GetIdentityProviderMetadataRequest) returns (GetIdentityProviderMetadataResponse) {}
  
  // 导入SAML元数据
  rpc ImportSAMLMetadata (ImportSAMLMetadataRequest) returns (ImportSAMLMetadataResponse) {}
}

// 身份提供商类型已移至common.proto

// 配置身份提供商请求
message ConfigureIdentityProviderRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  string provider_name = 2 [
    json_name = "providerName",
    (gnostic.openapi.v3.property) = {description: "提供商名称"}
  ]; // 提供商名称
  
  IdentityProviderType provider_type = 3 [
    json_name = "providerType",
    (gnostic.openapi.v3.property) = {description: "提供商类型"}
  ]; // 提供商类型
  
  string display_name = 4 [
    json_name = "displayName",
    (gnostic.openapi.v3.property) = {description: "显示名称"}
  ]; // 显示名称
  
  string description = 5 [
    json_name = "description",
    (gnostic.openapi.v3.property) = {description: "描述"}
  ]; // 描述
  
  bool enabled = 6 [
    json_name = "enabled",
    (gnostic.openapi.v3.property) = {description: "是否启用"}
  ]; // 是否启用
  
  uint32 tenant_id = 7 [
    json_name = "tenantId",
    (gnostic.openapi.v3.property) = {description: "租户ID(可选，为空表示全局)"}
  ]; // 租户ID(可选，为空表示全局)
  
  // 根据提供商类型，以下字段至少需要填写一组
  OAuth2Config oauth2_config = 8 [
    json_name = "oauth2Config",
    (gnostic.openapi.v3.property) = {description: "OAuth2配置"}
  ]; // OAuth2配置
  
  OIDCConfig oidc_config = 9 [
    json_name = "oidcConfig",
    (gnostic.openapi.v3.property) = {description: "OIDC配置"}
  ]; // OIDC配置
  
  SAMLConfig saml_config = 10 [
    json_name = "samlConfig",
    (gnostic.openapi.v3.property) = {description: "SAML配置"}
  ]; // SAML配置
  
  LDAPConfig ldap_config = 11 [
    json_name = "ldapConfig",
    (gnostic.openapi.v3.property) = {description: "LDAP配置"}
  ]; // LDAP配置
  
  ActiveDirectoryConfig active_directory_config = 12 [
    json_name = "activeDirectoryConfig",
    (gnostic.openapi.v3.property) = {description: "AD配置"}
  ]; // AD配置
  
  google.protobuf.Struct custom_config = 13 [
    json_name = "customConfig",
    (gnostic.openapi.v3.property) = {description: "自定义配置"}
  ]; // 自定义配置
  
  AttributeMappingConfig attribute_mapping = 14 [
    json_name = "attributeMapping",
    (gnostic.openapi.v3.property) = {description: "属性映射配置"}
  ]; // 属性映射配置
  
  ProvisioningConfig provisioning_config = 15 [
    json_name = "provisioningConfig",
    (gnostic.openapi.v3.property) = {description: "配置同步配置"}
  ]; // 配置同步配置
}

// 配置身份提供商响应
message ConfigureIdentityProviderResponse {
  string provider_id = 1 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  google.protobuf.Timestamp created_at = 2 [
    json_name = "createdAt",
    (gnostic.openapi.v3.property) = {description: "创建时间"}
  ]; // 创建时间
  
  // 添加审计信息
  api.user.service.v1.AuditInfo audit_info = 3 [
    json_name = "auditInfo",
    (gnostic.openapi.v3.property) = {description: "审计信息"}
  ]; // 审计信息
}

// 以下配置结构已移至common.proto:
// - OAuth2Config
// - OIDCConfig
// - SAMLConfig
// - LDAPConfig
// - ActiveDirectoryConfig
// - AttributeMappingConfig
// - ProvisioningConfig

// 获取身份提供商配置请求
message GetIdentityProviderConfigRequest {
  string provider_id = 1 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
}

// 身份提供商配置
message IdentityProviderConfig {
  string provider_id = 1; // 提供商ID
  string provider_name = 2; // 提供商名称
  IdentityProviderType provider_type = 3; // 提供商类型
  string display_name = 4; // 显示名称
  string description = 5; // 描述
  bool enabled = 6; // 是否启用
  uint32 tenant_id = 7; // 租户ID
  google.protobuf.Timestamp created_at = 8; // 创建时间
  google.protobuf.Timestamp updated_at = 9; // 更新时间
  
  // 根据提供商类型，以下字段只会返回一个
  OAuth2Config oauth2_config = 10; // OAuth2配置
  OIDCConfig oidc_config = 11; // OIDC配置
  SAMLConfig saml_config = 12; // SAML配置
  LDAPConfig ldap_config = 13; // LDAP配置
  ActiveDirectoryConfig active_directory_config = 14; // AD配置
  google.protobuf.Struct custom_config = 15; // 自定义配置
  
  AttributeMappingConfig attribute_mapping = 16; // 属性映射配置
  ProvisioningConfig provisioning_config = 17; // 配置同步配置
}

// 更新身份提供商配置请求
message UpdateIdentityProviderConfigRequest {
  string provider_id = 1; // 提供商ID
  string display_name = 2; // 显示名称
  string description = 3; // 描述
  bool enabled = 4; // 是否启用
  
  // 根据提供商类型，以下字段至多填写一个
  OAuth2Config oauth2_config = 5; // OAuth2配置
  OIDCConfig oidc_config = 6; // OIDC配置
  SAMLConfig saml_config = 7; // SAML配置
  LDAPConfig ldap_config = 8; // LDAP配置
  ActiveDirectoryConfig active_directory_config = 9; // AD配置
  google.protobuf.Struct custom_config = 10; // 自定义配置
  
  AttributeMappingConfig attribute_mapping = 11; // 属性映射配置
  ProvisioningConfig provisioning_config = 12; // 配置同步配置
}

// 删除身份提供商配置请求
message DeleteIdentityProviderConfigRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  string provider_id = 2 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
}

// 列出身份提供商配置请求
message ListIdentityProviderConfigsRequest {
  pkg.utils.pagination.v1.PagingRequest paging = 1 [
    json_name = "paging",
    (gnostic.openapi.v3.property) = {description: "分页请求"}
  ]; // 分页请求
  
  uint32 tenant_id = 2 [
    json_name = "tenantId",
    (gnostic.openapi.v3.property) = {description: "租户ID(可选)"}
  ]; // 租户ID(可选)
  
  IdentityProviderType provider_type = 3 [
    json_name = "providerType",
    (gnostic.openapi.v3.property) = {description: "提供商类型(可选)"}
  ]; // 提供商类型(可选)
  
  bool enabled_only = 4 [
    json_name = "enabledOnly",
    (gnostic.openapi.v3.property) = {description: "仅启用的"}
  ]; // 仅启用的
}

// 列出身份提供商配置响应
message ListIdentityProviderConfigsResponse {
  pkg.utils.pagination.v1.PagingResponse paging = 1 [
    json_name = "paging",
    (gnostic.openapi.v3.property) = {description: "分页响应"}
  ]; // 分页响应
  
  repeated IdentityProviderConfig configs = 2 [
    json_name = "configs",
    (gnostic.openapi.v3.property) = {description: "配置列表"}
  ]; // 配置列表
}

// 测试身份提供商连接请求
message TestIdentityProviderConnectionRequest {
  string provider_id = 1 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
}

// 测试身份提供商连接响应
message TestIdentityProviderConnectionResponse {
  bool success = 1 [
    json_name = "success",
    (gnostic.openapi.v3.property) = {description: "是否成功"}
  ]; // 是否成功
  
  string message = 2 [
    json_name = "message",
    (gnostic.openapi.v3.property) = {description: "消息"}
  ]; // 消息
  
  google.protobuf.Struct connection_details = 3 [
    json_name = "connectionDetails",
    (gnostic.openapi.v3.property) = {description: "连接详情"}
  ]; // 连接详情
}

// 获取身份提供商登录URL请求
message GetIdentityProviderLoginURLRequest {
  string provider_id = 1 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  string redirect_uri = 2 [
    json_name = "redirectUri",
    (gnostic.openapi.v3.property) = {description: "重定向URI"}
  ]; // 重定向URI
  
  string state = 3 [
    json_name = "state",
    (gnostic.openapi.v3.property) = {description: "状态"}
  ]; // 状态
  
  map<string, string> additional_params = 4 [
    json_name = "additionalParams",
    (gnostic.openapi.v3.property) = {description: "附加参数"}
  ]; // 附加参数
}

// 获取身份提供商登录URL响应
message GetIdentityProviderLoginURLResponse {
  string login_url = 1 [
    json_name = "loginUrl",
    (gnostic.openapi.v3.property) = {description: "登录URL"}
  ]; // 登录URL
}

// 处理身份提供商回调请求
message HandleIdentityProviderCallbackRequest {
  string provider_id = 1 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  string code = 2 [
    json_name = "code",
    (gnostic.openapi.v3.property) = {description: "授权码(OAuth2/OIDC)"}
  ]; // 授权码(OAuth2/OIDC)
  
  string state = 3 [
    json_name = "state",
    (gnostic.openapi.v3.property) = {description: "状态(OAuth2/OIDC)"}
  ]; // 状态(OAuth2/OIDC)
  
  string saml_response = 4 [
    json_name = "samlResponse",
    (gnostic.openapi.v3.property) = {description: "SAML响应(SAML)"}
  ]; // SAML响应(SAML)
  
  string relay_state = 5 [
    json_name = "relayState",
    (gnostic.openapi.v3.property) = {description: "中继状态(SAML)"}
  ]; // 中继状态(SAML)
  
  map<string, string> additional_params = 6 [
    json_name = "additionalParams",
    (gnostic.openapi.v3.property) = {description: "附加参数"}
  ]; // 附加参数


// 处理身份提供商回调响应
message HandleIdentityProviderCallbackResponse {
  bool success = 1 [
    json_name = "success",
    (gnostic.openapi.v3.property) = {description: "是否成功"}
  ]; // 是否成功
  
  string message = 2 [
    json_name = "message",
    (gnostic.openapi.v3.property) = {description: "消息"}
  ]; // 消息
  
  ExternalIdentityInfo identity_info = 3 [
    json_name = "identityInfo",
    (gnostic.openapi.v3.property) = {description: "身份信息"}
  ]; // 身份信息
  
  string access_token = 4 [
    json_name = "accessToken",
    (gnostic.openapi.v3.property) = {description: "访问令牌"}
  ]; // 访问令牌
  
  string refresh_token = 5 [
    json_name = "refreshToken",
    (gnostic.openapi.v3.property) = {description: "刷新令牌"}
  ]; // 刷新令牌
  
  uint32 expires_in = 6 [
    json_name = "expiresIn",
    (gnostic.openapi.v3.property) = {description: "过期时间(秒)"}
  ]; // 过期时间(秒)
  
  uint32 user_id = 7 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID(如果已关联)"}
  ]; // 用户ID(如果已关联)
  
  bool is_new_user = 8 [
    json_name = "isNewUser",
    (gnostic.openapi.v3.property) = {description: "是否新用户"}
  ]; // 是否新用户
}

// 外部身份信息
message ExternalIdentityInfo {
  string provider_id = 1 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  string provider_name = 2 [
    json_name = "providerName",
    (gnostic.openapi.v3.property) = {description: "提供商名称"}
  ]; // 提供商名称
  
  IdentityProviderType provider_type = 3 [
    json_name = "providerType",
    (gnostic.openapi.v3.property) = {description: "提供商类型"}
  ]; // 提供商类型
  
  string external_id = 4 [
    json_name = "externalId",
    (gnostic.openapi.v3.property) = {description: "外部ID"}
  ]; // 外部ID
  
  string username = 5 [
    json_name = "username",
    (gnostic.openapi.v3.property) = {description: "用户名"}
  ]; // 用户名
  
  string email = 6 [
    json_name = "email",
    (gnostic.openapi.v3.property) = {description: "电子邮件"}
  ]; // 电子邮件
  
  string first_name = 7 [
    json_name = "firstName",
    (gnostic.openapi.v3.property) = {description: "名字"}
  ]; // 名字
  
  string last_name = 8 [
    json_name = "lastName",
    (gnostic.openapi.v3.property) = {description: "姓氏"}
  ]; // 姓氏
  
  string display_name = 9 [
    json_name = "displayName",
    (gnostic.openapi.v3.property) = {description: "显示名称"}
  ]; // 显示名称
  
  string phone = 10 [
    json_name = "phone",
    (gnostic.openapi.v3.property) = {description: "电话"}
  ]; // 电话
  
  repeated string groups = 11 [
    json_name = "groups",
    (gnostic.openapi.v3.property) = {description: "组"}
  ]; // 组
  
  repeated string roles = 12 [
    json_name = "roles",
    (gnostic.openapi.v3.property) = {description: "角色"}
  ]; // 角色
  
  google.protobuf.Struct raw_attributes = 13 [
    json_name = "rawAttributes",
    (gnostic.openapi.v3.property) = {description: "原始属性"}
  ]; // 原始属性
  
  google.protobuf.Timestamp last_sync_at = 14 [
    json_name = "lastSyncAt",
    (gnostic.openapi.v3.property) = {description: "最后同步时间"}
  ]; // 最后同步时间
}

// 关联外部身份请求
message LinkExternalIdentityRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ]; // 用户ID
  
  string provider_id = 3 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  string external_id = 4 [
    json_name = "externalId",
    (gnostic.openapi.v3.property) = {description: "外部ID"}
  ]; // 外部ID
  
  string username = 5 [
    json_name = "username",
    (gnostic.openapi.v3.property) = {description: "用户名"}
  ]; // 用户名
  
  string email = 6 [
    json_name = "email",
    (gnostic.openapi.v3.property) = {description: "电子邮件"}
  ]; // 电子邮件
  
  google.protobuf.Struct raw_attributes = 7 [
    json_name = "rawAttributes",
    (gnostic.openapi.v3.property) = {description: "原始属性"}
  ]; // 原始属性


// 关联外部身份响应
message LinkExternalIdentityResponse {
  bool success = 1 [
    json_name = "success",
    (gnostic.openapi.v3.property) = {description: "是否成功"}
  ]; // 是否成功
  
  string message = 2 [
    json_name = "message",
    (gnostic.openapi.v3.property) = {description: "消息"}
  ]; // 消息
  
  // 添加审计信息
  api.user.service.v1.AuditInfo audit_info = 3 [
    json_name = "auditInfo",
    (gnostic.openapi.v3.property) = {description: "审计信息"}
  ]; // 审计信息


// 解除外部身份关联请求
message UnlinkExternalIdentityRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ]; // 用户ID
  
  string provider_id = 3 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID


// 获取用户关联的外部身份请求
message GetUserExternalIdentitiesRequest {
  uint32 user_id = 1 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ]; // 用户ID


// 获取用户关联的外部身份响应
message GetUserExternalIdentitiesResponse {
  repeated ExternalIdentityInfo identities = 1 [
    json_name = "identities",
    (gnostic.openapi.v3.property) = {description: "身份列表"}
  ]; // 身份列表


// 同步用户信息请求
message SyncUserFromExternalIdentityRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ]; // 用户ID
  
  string provider_id = 3 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  bool force_update = 4 [
    json_name = "forceUpdate",
    (gnostic.openapi.v3.property) = {description: "是否强制更新"}
  ]; // 是否强制更新


// 同步用户信息响应
message SyncUserFromExternalIdentityResponse {
  bool success = 1 [
    json_name = "success",
    (gnostic.openapi.v3.property) = {description: "是否成功"}
  ]; // 是否成功
  
  string message = 2 [
    json_name = "message",
    (gnostic.openapi.v3.property) = {description: "消息"}
  ]; // 消息
  
  repeated string updated_fields = 3 [
    json_name = "updatedFields",
    (gnostic.openapi.v3.property) = {description: "更新的字段"}
  ]; // 更新的字段
  
  // 添加审计信息
  api.user.service.v1.AuditInfo audit_info = 4 [
    json_name = "auditInfo",
    (gnostic.openapi.v3.property) = {description: "审计信息"}
  ]; // 审计信息


// 批量同步用户请求
message BatchSyncUsersFromExternalIdentityRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  string provider_id = 2 [
    json_name = "providerId",
    (gnostic.openapi.v3.property) = {description: "提供商ID"}
  ]; // 提供商ID
  
  bool force_update = 3 [
    json_name = "forceUpdate",
    (gnostic.openapi.v3.property) = {description: "是否强制更新"}
  ]; // 是否强制更新
  
  bool create_missing_users = 4 [
    json_name = "createMissingUsers",
    (gnostic.openapi.v3.property) = {description: "是否创建缺失的用户"}
  ]; // 是否创建缺失的用户
  
  bool deactivate_missing_users = 5 [
    json_name = "deactivateMissingUsers",
    (gnostic.openapi.v3.property) = {description: "是否停用缺失的用户"}
  ]; // 是否停用缺失的用户


// 批量同步用户响应
message BatchSyncUsersFromExternalIdentityResponse {
  bool success = 1 [
    json_name = "success",
    (gnostic.openapi.v3.property) = {description: "是否成功"}
  ]; // 是否成功
  
  string message = 2 [
    json_name = "message",
    (gnostic.openapi.v3.property) = {description: "消息"}
  ]; // 消息
  
  uint32 total_users = 3 [
    json_name = "totalUsers",
    (gnostic.openapi.v3.property) = {description: "总用户数"}
  ]; // 总用户数
  
  uint32 updated_users = 4 [
    json_name = "updatedUsers",
    (gnostic.openapi.v3.property) = {description: "更新的用户数"}
  ]; // 更新的用户数
  
  uint32 created_users = 5 [
    json_name = "createdUsers",
    (gnostic.openapi.v3.property) = {description: "创建的用户数"}
  ]; // 创建的用户数
  
  uint32 deactivated_users = 6 [
    json_name = "deactivatedUsers",
    (gnostic.openapi.v3.property) = {description: "停用的用户数"}
  ]; // 停用的用户数
  
  uint32 failed_users = 7 [
    json_name = "failedUsers",
    (gnostic.openapi.v3.property) = {description: "失败的用户数"}
  ]; // 失败的用户数
  
  repeated string errors = 8 [
    json_name = "errors",
    (gnostic.openapi.v3.property) = {description: "错误列表"}
  ]; // 错误列表
  
  // 添加审计信息
  api.user.service.v1.AuditInfo audit_info = 9 [
    json_name = "auditInfo",
    (gnostic.openapi.v3.property) = {description: "审计信息"}
  ]; // 审计信息


// 获取身份提供商元数据请求
message GetIdentityProviderMetadataRequest {
  string provider_id = 1; // 提供商ID
}

// 获取身份提供商元数据响应
message GetIdentityProviderMetadataResponse {
  string metadata_xml = 1; // 元数据XML
  string metadata_url = 2; // 元数据URL
}

// 导入SAML元数据请求
message ImportSAMLMetadataRequest {
  string provider_name = 1; // 提供商名称
  string display_name = 2; // 显示名称
  string description = 3; // 描述
  bool enabled = 4; // 是否启用
  uint32 tenant_id = 5; // 租户ID(可选)
  string metadata_xml = 6; // 元数据XML
  AttributeMappingConfig attribute_mapping = 7; // 属性映射配置
  ProvisioningConfig provisioning_config = 8; // 配置同步配置
}

// 导入SAML元数据响应
message ImportSAMLMetadataResponse {
  string provider_id = 1; // 提供商ID
  SAMLConfig saml_config = 2; // SAML配置
}