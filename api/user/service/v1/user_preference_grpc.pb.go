// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/user/service/v1/user_preference.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserPreferenceService_GetUserPreference_FullMethodName              = "/api.user.service.v1.UserPreferenceService/GetUserPreference"
	UserPreferenceService_UpdateUserPreference_FullMethodName           = "/api.user.service.v1.UserPreferenceService/UpdateUserPreference"
	UserPreferenceService_ResetUserPreference_FullMethodName            = "/api.user.service.v1.UserPreferenceService/ResetUserPreference"
	UserPreferenceService_GetUserInterfaceSettings_FullMethodName       = "/api.user.service.v1.UserPreferenceService/GetUserInterfaceSettings"
	UserPreferenceService_UpdateUserInterfaceSettings_FullMethodName    = "/api.user.service.v1.UserPreferenceService/UpdateUserInterfaceSettings"
	UserPreferenceService_GetUserNotificationSettings_FullMethodName    = "/api.user.service.v1.UserPreferenceService/GetUserNotificationSettings"
	UserPreferenceService_UpdateUserNotificationSettings_FullMethodName = "/api.user.service.v1.UserPreferenceService/UpdateUserNotificationSettings"
	UserPreferenceService_GetUserLocaleSettings_FullMethodName          = "/api.user.service.v1.UserPreferenceService/GetUserLocaleSettings"
	UserPreferenceService_UpdateUserLocaleSettings_FullMethodName       = "/api.user.service.v1.UserPreferenceService/UpdateUserLocaleSettings"
	UserPreferenceService_GetUserSecuritySettings_FullMethodName        = "/api.user.service.v1.UserPreferenceService/GetUserSecuritySettings"
	UserPreferenceService_UpdateUserSecuritySettings_FullMethodName     = "/api.user.service.v1.UserPreferenceService/UpdateUserSecuritySettings"
	UserPreferenceService_ExportUserPreference_FullMethodName           = "/api.user.service.v1.UserPreferenceService/ExportUserPreference"
	UserPreferenceService_ImportUserPreference_FullMethodName           = "/api.user.service.v1.UserPreferenceService/ImportUserPreference"
	UserPreferenceService_BatchGetUserPreference_FullMethodName         = "/api.user.service.v1.UserPreferenceService/BatchGetUserPreference"
	UserPreferenceService_BatchUpdateUserPreference_FullMethodName      = "/api.user.service.v1.UserPreferenceService/BatchUpdateUserPreference"
)

// UserPreferenceServiceClient is the client API for UserPreferenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户偏好设置服务
type UserPreferenceServiceClient interface {
	// 获取用户偏好设置
	GetUserPreference(ctx context.Context, in *GetUserPreferenceRequest, opts ...grpc.CallOption) (*UserPreference, error)
	// 更新用户偏好设置
	UpdateUserPreference(ctx context.Context, in *UpdateUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 重置用户偏好设置
	ResetUserPreference(ctx context.Context, in *ResetUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户界面设置
	GetUserInterfaceSettings(ctx context.Context, in *GetUserInterfaceSettingsRequest, opts ...grpc.CallOption) (*UserInterfaceSettings, error)
	// 更新用户界面设置
	UpdateUserInterfaceSettings(ctx context.Context, in *UpdateUserInterfaceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户通知设置
	GetUserNotificationSettings(ctx context.Context, in *GetUserNotificationSettingsRequest, opts ...grpc.CallOption) (*UserNotificationSettings, error)
	// 更新用户通知设置
	UpdateUserNotificationSettings(ctx context.Context, in *UpdateUserNotificationSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户区域设置
	GetUserLocaleSettings(ctx context.Context, in *GetUserLocaleSettingsRequest, opts ...grpc.CallOption) (*UserLocaleSettings, error)
	// 更新用户区域设置
	UpdateUserLocaleSettings(ctx context.Context, in *UpdateUserLocaleSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户安全设置
	GetUserSecuritySettings(ctx context.Context, in *GetUserSecuritySettingsRequest, opts ...grpc.CallOption) (*UserSecuritySettings, error)
	// 更新用户安全设置
	UpdateUserSecuritySettings(ctx context.Context, in *UpdateUserSecuritySettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 导出用户偏好设置
	ExportUserPreference(ctx context.Context, in *ExportUserPreferenceRequest, opts ...grpc.CallOption) (*ExportUserPreferenceResponse, error)
	// 导入用户偏好设置
	ImportUserPreference(ctx context.Context, in *ImportUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量获取用户偏好设置
	BatchGetUserPreference(ctx context.Context, in *BatchGetUserPreferenceRequest, opts ...grpc.CallOption) (*BatchGetUserPreferenceResponse, error)
	// 批量更新用户偏好设置
	BatchUpdateUserPreference(ctx context.Context, in *BatchUpdateUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userPreferenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserPreferenceServiceClient(cc grpc.ClientConnInterface) UserPreferenceServiceClient {
	return &userPreferenceServiceClient{cc}
}

func (c *userPreferenceServiceClient) GetUserPreference(ctx context.Context, in *GetUserPreferenceRequest, opts ...grpc.CallOption) (*UserPreference, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPreference)
	err := c.cc.Invoke(ctx, UserPreferenceService_GetUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) UpdateUserPreference(ctx context.Context, in *UpdateUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_UpdateUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) ResetUserPreference(ctx context.Context, in *ResetUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_ResetUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) GetUserInterfaceSettings(ctx context.Context, in *GetUserInterfaceSettingsRequest, opts ...grpc.CallOption) (*UserInterfaceSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInterfaceSettings)
	err := c.cc.Invoke(ctx, UserPreferenceService_GetUserInterfaceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) UpdateUserInterfaceSettings(ctx context.Context, in *UpdateUserInterfaceSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_UpdateUserInterfaceSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) GetUserNotificationSettings(ctx context.Context, in *GetUserNotificationSettingsRequest, opts ...grpc.CallOption) (*UserNotificationSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserNotificationSettings)
	err := c.cc.Invoke(ctx, UserPreferenceService_GetUserNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) UpdateUserNotificationSettings(ctx context.Context, in *UpdateUserNotificationSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_UpdateUserNotificationSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) GetUserLocaleSettings(ctx context.Context, in *GetUserLocaleSettingsRequest, opts ...grpc.CallOption) (*UserLocaleSettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserLocaleSettings)
	err := c.cc.Invoke(ctx, UserPreferenceService_GetUserLocaleSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) UpdateUserLocaleSettings(ctx context.Context, in *UpdateUserLocaleSettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_UpdateUserLocaleSettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) GetUserSecuritySettings(ctx context.Context, in *GetUserSecuritySettingsRequest, opts ...grpc.CallOption) (*UserSecuritySettings, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSecuritySettings)
	err := c.cc.Invoke(ctx, UserPreferenceService_GetUserSecuritySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) UpdateUserSecuritySettings(ctx context.Context, in *UpdateUserSecuritySettingsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_UpdateUserSecuritySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) ExportUserPreference(ctx context.Context, in *ExportUserPreferenceRequest, opts ...grpc.CallOption) (*ExportUserPreferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportUserPreferenceResponse)
	err := c.cc.Invoke(ctx, UserPreferenceService_ExportUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) ImportUserPreference(ctx context.Context, in *ImportUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_ImportUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) BatchGetUserPreference(ctx context.Context, in *BatchGetUserPreferenceRequest, opts ...grpc.CallOption) (*BatchGetUserPreferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserPreferenceResponse)
	err := c.cc.Invoke(ctx, UserPreferenceService_BatchGetUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPreferenceServiceClient) BatchUpdateUserPreference(ctx context.Context, in *BatchUpdateUserPreferenceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserPreferenceService_BatchUpdateUserPreference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserPreferenceServiceServer is the server API for UserPreferenceService service.
// All implementations must embed UnimplementedUserPreferenceServiceServer
// for forward compatibility.
//
// 用户偏好设置服务
type UserPreferenceServiceServer interface {
	// 获取用户偏好设置
	GetUserPreference(context.Context, *GetUserPreferenceRequest) (*UserPreference, error)
	// 更新用户偏好设置
	UpdateUserPreference(context.Context, *UpdateUserPreferenceRequest) (*emptypb.Empty, error)
	// 重置用户偏好设置
	ResetUserPreference(context.Context, *ResetUserPreferenceRequest) (*emptypb.Empty, error)
	// 获取用户界面设置
	GetUserInterfaceSettings(context.Context, *GetUserInterfaceSettingsRequest) (*UserInterfaceSettings, error)
	// 更新用户界面设置
	UpdateUserInterfaceSettings(context.Context, *UpdateUserInterfaceSettingsRequest) (*emptypb.Empty, error)
	// 获取用户通知设置
	GetUserNotificationSettings(context.Context, *GetUserNotificationSettingsRequest) (*UserNotificationSettings, error)
	// 更新用户通知设置
	UpdateUserNotificationSettings(context.Context, *UpdateUserNotificationSettingsRequest) (*emptypb.Empty, error)
	// 获取用户区域设置
	GetUserLocaleSettings(context.Context, *GetUserLocaleSettingsRequest) (*UserLocaleSettings, error)
	// 更新用户区域设置
	UpdateUserLocaleSettings(context.Context, *UpdateUserLocaleSettingsRequest) (*emptypb.Empty, error)
	// 获取用户安全设置
	GetUserSecuritySettings(context.Context, *GetUserSecuritySettingsRequest) (*UserSecuritySettings, error)
	// 更新用户安全设置
	UpdateUserSecuritySettings(context.Context, *UpdateUserSecuritySettingsRequest) (*emptypb.Empty, error)
	// 导出用户偏好设置
	ExportUserPreference(context.Context, *ExportUserPreferenceRequest) (*ExportUserPreferenceResponse, error)
	// 导入用户偏好设置
	ImportUserPreference(context.Context, *ImportUserPreferenceRequest) (*emptypb.Empty, error)
	// 批量获取用户偏好设置
	BatchGetUserPreference(context.Context, *BatchGetUserPreferenceRequest) (*BatchGetUserPreferenceResponse, error)
	// 批量更新用户偏好设置
	BatchUpdateUserPreference(context.Context, *BatchUpdateUserPreferenceRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserPreferenceServiceServer()
}

// UnimplementedUserPreferenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserPreferenceServiceServer struct{}

func (UnimplementedUserPreferenceServiceServer) GetUserPreference(context.Context, *GetUserPreferenceRequest) (*UserPreference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) UpdateUserPreference(context.Context, *UpdateUserPreferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) ResetUserPreference(context.Context, *ResetUserPreferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) GetUserInterfaceSettings(context.Context, *GetUserInterfaceSettingsRequest) (*UserInterfaceSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInterfaceSettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) UpdateUserInterfaceSettings(context.Context, *UpdateUserInterfaceSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInterfaceSettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) GetUserNotificationSettings(context.Context, *GetUserNotificationSettingsRequest) (*UserNotificationSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserNotificationSettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) UpdateUserNotificationSettings(context.Context, *UpdateUserNotificationSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserNotificationSettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) GetUserLocaleSettings(context.Context, *GetUserLocaleSettingsRequest) (*UserLocaleSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLocaleSettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) UpdateUserLocaleSettings(context.Context, *UpdateUserLocaleSettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocaleSettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) GetUserSecuritySettings(context.Context, *GetUserSecuritySettingsRequest) (*UserSecuritySettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSecuritySettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) UpdateUserSecuritySettings(context.Context, *UpdateUserSecuritySettingsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSecuritySettings not implemented")
}
func (UnimplementedUserPreferenceServiceServer) ExportUserPreference(context.Context, *ExportUserPreferenceRequest) (*ExportUserPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) ImportUserPreference(context.Context, *ImportUserPreferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) BatchGetUserPreference(context.Context, *BatchGetUserPreferenceRequest) (*BatchGetUserPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) BatchUpdateUserPreference(context.Context, *BatchUpdateUserPreferenceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateUserPreference not implemented")
}
func (UnimplementedUserPreferenceServiceServer) mustEmbedUnimplementedUserPreferenceServiceServer() {}
func (UnimplementedUserPreferenceServiceServer) testEmbeddedByValue()                               {}

// UnsafeUserPreferenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserPreferenceServiceServer will
// result in compilation errors.
type UnsafeUserPreferenceServiceServer interface {
	mustEmbedUnimplementedUserPreferenceServiceServer()
}

func RegisterUserPreferenceServiceServer(s grpc.ServiceRegistrar, srv UserPreferenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserPreferenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserPreferenceService_ServiceDesc, srv)
}

func _UserPreferenceService_GetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).GetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_GetUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).GetUserPreference(ctx, req.(*GetUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_UpdateUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).UpdateUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_UpdateUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).UpdateUserPreference(ctx, req.(*UpdateUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_ResetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).ResetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_ResetUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).ResetUserPreference(ctx, req.(*ResetUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_GetUserInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInterfaceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).GetUserInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_GetUserInterfaceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).GetUserInterfaceSettings(ctx, req.(*GetUserInterfaceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_UpdateUserInterfaceSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInterfaceSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).UpdateUserInterfaceSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_UpdateUserInterfaceSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).UpdateUserInterfaceSettings(ctx, req.(*UpdateUserInterfaceSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_GetUserNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).GetUserNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_GetUserNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).GetUserNotificationSettings(ctx, req.(*GetUserNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_UpdateUserNotificationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserNotificationSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).UpdateUserNotificationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_UpdateUserNotificationSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).UpdateUserNotificationSettings(ctx, req.(*UpdateUserNotificationSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_GetUserLocaleSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLocaleSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).GetUserLocaleSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_GetUserLocaleSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).GetUserLocaleSettings(ctx, req.(*GetUserLocaleSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_UpdateUserLocaleSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserLocaleSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).UpdateUserLocaleSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_UpdateUserLocaleSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).UpdateUserLocaleSettings(ctx, req.(*UpdateUserLocaleSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_GetUserSecuritySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSecuritySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).GetUserSecuritySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_GetUserSecuritySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).GetUserSecuritySettings(ctx, req.(*GetUserSecuritySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_UpdateUserSecuritySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserSecuritySettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).UpdateUserSecuritySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_UpdateUserSecuritySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).UpdateUserSecuritySettings(ctx, req.(*UpdateUserSecuritySettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_ExportUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).ExportUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_ExportUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).ExportUserPreference(ctx, req.(*ExportUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_ImportUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).ImportUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_ImportUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).ImportUserPreference(ctx, req.(*ImportUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_BatchGetUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).BatchGetUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_BatchGetUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).BatchGetUserPreference(ctx, req.(*BatchGetUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserPreferenceService_BatchUpdateUserPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateUserPreferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserPreferenceServiceServer).BatchUpdateUserPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserPreferenceService_BatchUpdateUserPreference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserPreferenceServiceServer).BatchUpdateUserPreference(ctx, req.(*BatchUpdateUserPreferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserPreferenceService_ServiceDesc is the grpc.ServiceDesc for UserPreferenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserPreferenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.UserPreferenceService",
	HandlerType: (*UserPreferenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserPreference",
			Handler:    _UserPreferenceService_GetUserPreference_Handler,
		},
		{
			MethodName: "UpdateUserPreference",
			Handler:    _UserPreferenceService_UpdateUserPreference_Handler,
		},
		{
			MethodName: "ResetUserPreference",
			Handler:    _UserPreferenceService_ResetUserPreference_Handler,
		},
		{
			MethodName: "GetUserInterfaceSettings",
			Handler:    _UserPreferenceService_GetUserInterfaceSettings_Handler,
		},
		{
			MethodName: "UpdateUserInterfaceSettings",
			Handler:    _UserPreferenceService_UpdateUserInterfaceSettings_Handler,
		},
		{
			MethodName: "GetUserNotificationSettings",
			Handler:    _UserPreferenceService_GetUserNotificationSettings_Handler,
		},
		{
			MethodName: "UpdateUserNotificationSettings",
			Handler:    _UserPreferenceService_UpdateUserNotificationSettings_Handler,
		},
		{
			MethodName: "GetUserLocaleSettings",
			Handler:    _UserPreferenceService_GetUserLocaleSettings_Handler,
		},
		{
			MethodName: "UpdateUserLocaleSettings",
			Handler:    _UserPreferenceService_UpdateUserLocaleSettings_Handler,
		},
		{
			MethodName: "GetUserSecuritySettings",
			Handler:    _UserPreferenceService_GetUserSecuritySettings_Handler,
		},
		{
			MethodName: "UpdateUserSecuritySettings",
			Handler:    _UserPreferenceService_UpdateUserSecuritySettings_Handler,
		},
		{
			MethodName: "ExportUserPreference",
			Handler:    _UserPreferenceService_ExportUserPreference_Handler,
		},
		{
			MethodName: "ImportUserPreference",
			Handler:    _UserPreferenceService_ImportUserPreference_Handler,
		},
		{
			MethodName: "BatchGetUserPreference",
			Handler:    _UserPreferenceService_BatchGetUserPreference_Handler,
		},
		{
			MethodName: "BatchUpdateUserPreference",
			Handler:    _UserPreferenceService_BatchUpdateUserPreference_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/service/v1/user_preference.proto",
}
