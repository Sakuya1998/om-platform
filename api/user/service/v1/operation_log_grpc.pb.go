// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/user/service/v1/operation_log.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "om-platform/pkg/utils/pagination/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OperationLogService_ListOperationLog_FullMethodName       = "/api.user.service.v1.OperationLogService/ListOperationLog"
	OperationLogService_GetOperationLog_FullMethodName        = "/api.user.service.v1.OperationLogService/GetOperationLog"
	OperationLogService_CreateOperationLog_FullMethodName     = "/api.user.service.v1.OperationLogService/CreateOperationLog"
	OperationLogService_BatchGetOperationLog_FullMethodName   = "/api.user.service.v1.OperationLogService/BatchGetOperationLog"
	OperationLogService_ListUserOperationLog_FullMethodName   = "/api.user.service.v1.OperationLogService/ListUserOperationLog"
	OperationLogService_ListTenantOperationLog_FullMethodName = "/api.user.service.v1.OperationLogService/ListTenantOperationLog"
)

// OperationLogServiceClient is the client API for OperationLogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 操作日志服务
type OperationLogServiceClient interface {
	// 查询操作日志列表
	ListOperationLog(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListOperationLogResponse, error)
	// 查询操作日志详情
	GetOperationLog(ctx context.Context, in *GetOperationLogRequest, opts ...grpc.CallOption) (*OperationLog, error)
	// 创建操作日志
	CreateOperationLog(ctx context.Context, in *CreateOperationLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量查询操作日志
	BatchGetOperationLog(ctx context.Context, in *BatchGetOperationLogRequest, opts ...grpc.CallOption) (*BatchGetOperationLogResponse, error)
	// 查询用户操作日志
	ListUserOperationLog(ctx context.Context, in *ListUserOperationLogRequest, opts ...grpc.CallOption) (*ListOperationLogResponse, error)
	// 查询租户操作日志
	ListTenantOperationLog(ctx context.Context, in *ListTenantOperationLogRequest, opts ...grpc.CallOption) (*ListOperationLogResponse, error)
}

type operationLogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOperationLogServiceClient(cc grpc.ClientConnInterface) OperationLogServiceClient {
	return &operationLogServiceClient{cc}
}

func (c *operationLogServiceClient) ListOperationLog(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListOperationLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperationLogResponse)
	err := c.cc.Invoke(ctx, OperationLogService_ListOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogServiceClient) GetOperationLog(ctx context.Context, in *GetOperationLogRequest, opts ...grpc.CallOption) (*OperationLog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OperationLog)
	err := c.cc.Invoke(ctx, OperationLogService_GetOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogServiceClient) CreateOperationLog(ctx context.Context, in *CreateOperationLogRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, OperationLogService_CreateOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogServiceClient) BatchGetOperationLog(ctx context.Context, in *BatchGetOperationLogRequest, opts ...grpc.CallOption) (*BatchGetOperationLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetOperationLogResponse)
	err := c.cc.Invoke(ctx, OperationLogService_BatchGetOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogServiceClient) ListUserOperationLog(ctx context.Context, in *ListUserOperationLogRequest, opts ...grpc.CallOption) (*ListOperationLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperationLogResponse)
	err := c.cc.Invoke(ctx, OperationLogService_ListUserOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *operationLogServiceClient) ListTenantOperationLog(ctx context.Context, in *ListTenantOperationLogRequest, opts ...grpc.CallOption) (*ListOperationLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOperationLogResponse)
	err := c.cc.Invoke(ctx, OperationLogService_ListTenantOperationLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OperationLogServiceServer is the server API for OperationLogService service.
// All implementations must embed UnimplementedOperationLogServiceServer
// for forward compatibility.
//
// 操作日志服务
type OperationLogServiceServer interface {
	// 查询操作日志列表
	ListOperationLog(context.Context, *v1.PagingRequest) (*ListOperationLogResponse, error)
	// 查询操作日志详情
	GetOperationLog(context.Context, *GetOperationLogRequest) (*OperationLog, error)
	// 创建操作日志
	CreateOperationLog(context.Context, *CreateOperationLogRequest) (*emptypb.Empty, error)
	// 批量查询操作日志
	BatchGetOperationLog(context.Context, *BatchGetOperationLogRequest) (*BatchGetOperationLogResponse, error)
	// 查询用户操作日志
	ListUserOperationLog(context.Context, *ListUserOperationLogRequest) (*ListOperationLogResponse, error)
	// 查询租户操作日志
	ListTenantOperationLog(context.Context, *ListTenantOperationLogRequest) (*ListOperationLogResponse, error)
	mustEmbedUnimplementedOperationLogServiceServer()
}

// UnimplementedOperationLogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOperationLogServiceServer struct{}

func (UnimplementedOperationLogServiceServer) ListOperationLog(context.Context, *v1.PagingRequest) (*ListOperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationLog not implemented")
}
func (UnimplementedOperationLogServiceServer) GetOperationLog(context.Context, *GetOperationLogRequest) (*OperationLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationLog not implemented")
}
func (UnimplementedOperationLogServiceServer) CreateOperationLog(context.Context, *CreateOperationLogRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOperationLog not implemented")
}
func (UnimplementedOperationLogServiceServer) BatchGetOperationLog(context.Context, *BatchGetOperationLogRequest) (*BatchGetOperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetOperationLog not implemented")
}
func (UnimplementedOperationLogServiceServer) ListUserOperationLog(context.Context, *ListUserOperationLogRequest) (*ListOperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserOperationLog not implemented")
}
func (UnimplementedOperationLogServiceServer) ListTenantOperationLog(context.Context, *ListTenantOperationLogRequest) (*ListOperationLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTenantOperationLog not implemented")
}
func (UnimplementedOperationLogServiceServer) mustEmbedUnimplementedOperationLogServiceServer() {}
func (UnimplementedOperationLogServiceServer) testEmbeddedByValue()                             {}

// UnsafeOperationLogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OperationLogServiceServer will
// result in compilation errors.
type UnsafeOperationLogServiceServer interface {
	mustEmbedUnimplementedOperationLogServiceServer()
}

func RegisterOperationLogServiceServer(s grpc.ServiceRegistrar, srv OperationLogServiceServer) {
	// If the following call pancis, it indicates UnimplementedOperationLogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OperationLogService_ServiceDesc, srv)
}

func _OperationLogService_ListOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServiceServer).ListOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLogService_ListOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServiceServer).ListOperationLog(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLogService_GetOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServiceServer).GetOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLogService_GetOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServiceServer).GetOperationLog(ctx, req.(*GetOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLogService_CreateOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServiceServer).CreateOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLogService_CreateOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServiceServer).CreateOperationLog(ctx, req.(*CreateOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLogService_BatchGetOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServiceServer).BatchGetOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLogService_BatchGetOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServiceServer).BatchGetOperationLog(ctx, req.(*BatchGetOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLogService_ListUserOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUserOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServiceServer).ListUserOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLogService_ListUserOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServiceServer).ListUserOperationLog(ctx, req.(*ListUserOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OperationLogService_ListTenantOperationLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantOperationLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OperationLogServiceServer).ListTenantOperationLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OperationLogService_ListTenantOperationLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OperationLogServiceServer).ListTenantOperationLog(ctx, req.(*ListTenantOperationLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OperationLogService_ServiceDesc is the grpc.ServiceDesc for OperationLogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OperationLogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.OperationLogService",
	HandlerType: (*OperationLogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListOperationLog",
			Handler:    _OperationLogService_ListOperationLog_Handler,
		},
		{
			MethodName: "GetOperationLog",
			Handler:    _OperationLogService_GetOperationLog_Handler,
		},
		{
			MethodName: "CreateOperationLog",
			Handler:    _OperationLogService_CreateOperationLog_Handler,
		},
		{
			MethodName: "BatchGetOperationLog",
			Handler:    _OperationLogService_BatchGetOperationLog_Handler,
		},
		{
			MethodName: "ListUserOperationLog",
			Handler:    _OperationLogService_ListUserOperationLog_Handler,
		},
		{
			MethodName: "ListTenantOperationLog",
			Handler:    _OperationLogService_ListTenantOperationLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/service/v1/operation_log.proto",
}
