syntax = "proto3";

// 用户服务租户模块 - 提供租户管理功能
package api.user.service.v1;

// 包配置选项
option go_package = "github.com/Sakuya1998/om-platform/api/user/service/v1;userv1";
option java_multiple_files = true;
option java_package = "com.omplatform.api.user.service.v1";
option java_outer_classname = "TenantProto";
option csharp_namespace = "OmPlatform.Api.User.Service.V1";
option php_namespace = "OmPlatform\\Api\\User\\Service\\V1";
option ruby_package = "OmPlatform::Api::User::Service::V1";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "gnostic/openapi/v3/annotations.proto";
import "common.proto";
import "error_codes.proto";

// 租户服务
service TenantService {
  // 创建租户
  rpc CreateTenant(CreateTenantRequest) returns (CreateTenantResponse) {
    option (google.api.http) = {
      post: "/v1/tenants"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 获取租户详情
  rpc GetTenant(GetTenantRequest) returns (GetTenantResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant_id}"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "tenant:{tenant_id}"
    };
  }

  // 更新租户信息
  rpc UpdateTenant(UpdateTenantRequest) returns (UpdateTenantResponse) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant_id}"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 20
      burst: 40
    };
  }

  // 删除租户
  rpc DeleteTenant(DeleteTenantRequest) returns (DeleteTenantResponse) {
    option (google.api.http) = {
      delete: "/v1/tenants/{tenant_id}"
    };
    option (rate_limit) = {
      requests_per_second: 5
      burst: 10
    };
  }

  // 获取租户列表
  rpc ListTenants(ListTenantsRequest) returns (ListTenantsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants"
    };
    option (cache) = {
      ttl_seconds: 60
      key_pattern: "tenants:list:{page}:{size}"
    };
  }

  // 批量创建租户
  rpc BatchCreateTenants(BatchCreateTenantsRequest) returns (BatchCreateTenantsResponse) {
    option (google.api.http) = {
      post: "/v1/tenants/batch"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 2
      burst: 5
    };
  }

  // 批量删除租户
  rpc BatchDeleteTenants(BatchDeleteTenantsRequest) returns (BatchDeleteTenantsResponse) {
    option (google.api.http) = {
      delete: "/v1/tenants/batch"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 2
      burst: 5
    };
  }

  // 启用租户
  rpc EnableTenant(EnableTenantRequest) returns (EnableTenantResponse) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant_id}/enable"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 禁用租户
  rpc DisableTenant(DisableTenantRequest) returns (DisableTenantResponse) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant_id}/disable"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 获取租户配置
  rpc GetTenantConfig(GetTenantConfigRequest) returns (GetTenantConfigResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant_id}/config"
    };
    option (cache) = {
      ttl_seconds: 600
      key_pattern: "tenant:{tenant_id}:config"
    };
  }

  // 更新租户配置
  rpc UpdateTenantConfig(UpdateTenantConfigRequest) returns (UpdateTenantConfigResponse) {
    option (google.api.http) = {
      put: "/v1/tenants/{tenant_id}/config"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 获取租户统计信息
  rpc GetTenantStats(GetTenantStatsRequest) returns (GetTenantStatsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant_id}/stats"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "tenant:{tenant_id}:stats"
    };
  }

  // 获取租户审计日志
  rpc GetTenantAuditLogs(GetTenantAuditLogsRequest) returns (GetTenantAuditLogsResponse) {
    option (google.api.http) = {
      get: "/v1/tenants/{tenant_id}/audit-logs"
    };
  }

  // 导出租户数据
  rpc ExportTenantData(ExportTenantDataRequest) returns (ExportTenantDataResponse) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant_id}/export"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 1
      burst: 2
    };
  }

  // 导入租户数据
  rpc ImportTenantData(ImportTenantDataRequest) returns (ImportTenantDataResponse) {
    option (google.api.http) = {
      post: "/v1/tenants/{tenant_id}/import"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 1
      burst: 2
    };
  }
}

// 租户状态枚举
enum TenantStatus {
  TENANT_STATUS_UNSPECIFIED = 0;
  TENANT_STATUS_ACTIVE = 1;      // 活跃
  TENANT_STATUS_INACTIVE = 2;    // 非活跃
  TENANT_STATUS_SUSPENDED = 3;   // 暂停
  TENANT_STATUS_DELETED = 4;     // 已删除
}

// 租户类型枚举
enum TenantType {
  TENANT_TYPE_UNSPECIFIED = 0;
  TENANT_TYPE_ENTERPRISE = 1;    // 企业版
  TENANT_TYPE_STANDARD = 2;      // 标准版
  TENANT_TYPE_BASIC = 3;         // 基础版
  TENANT_TYPE_TRIAL = 4;         // 试用版
}

// 租户信息
message Tenant {
  uint32 tenant_id = 1;
  string name = 2 [(validate.rules).string.min_len = 1];
  string display_name = 3;
  string description = 4;
  TenantStatus status = 5;
  TenantType type = 6;
  string domain = 7;
  string contact_email = 8 [(validate.rules).string.email = true];
  string contact_phone = 9;
  string address = 10;
  int32 max_users = 11 [(validate.rules).int32.gte = 0];
  int32 current_users = 12 [(validate.rules).int32.gte = 0];
  google.protobuf.Timestamp created_at = 13;
  google.protobuf.Timestamp updated_at = 14;
  google.protobuf.Timestamp expires_at = 15;
  AuditInfo audit_info = 16;
  map<string, string> metadata = 17;
  repeated string features = 18;
  TenantConfig config = 19;
}

// 租户配置
message TenantConfig {
  bool allow_user_registration = 1;
  bool require_email_verification = 2;
  bool enable_sso = 3;
  bool enable_mfa = 4;
  int32 session_timeout_minutes = 5 [(validate.rules).int32.gte = 0];
  int32 password_expiry_days = 6 [(validate.rules).int32.gte = 0];
  int32 max_login_attempts = 7 [(validate.rules).int32.gte = 0];
  string timezone = 8;
  string locale = 9;
  string theme = 10;
  map<string, string> custom_settings = 11;
}

// 租户统计信息
message TenantStats {
  int32 total_users = 1;
  int32 active_users = 2;
  int32 total_organizations = 3;
  int32 total_departments = 4;
  int32 total_roles = 5;
  int32 total_permissions = 6;
  int64 storage_used_bytes = 7;
  int64 storage_limit_bytes = 8;
  google.protobuf.Timestamp last_activity_at = 9;
  map<string, int32> feature_usage = 10;
}

// 创建租户请求
message CreateTenantRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  string display_name = 2;
  string description = 3;
  TenantType type = 4;
  string domain = 5;
  string contact_email = 6 [(validate.rules).string.email = true];
  string contact_phone = 7;
  string address = 8;
  int32 max_users = 9 [(validate.rules).int32.gte = 0];
  google.protobuf.Timestamp expires_at = 10;
  map<string, string> metadata = 11;
  repeated string features = 12;
  TenantConfig config = 13;
}

// 创建租户响应
message CreateTenantResponse {
  oneof result {
    Tenant tenant = 1;
    ErrorResponse error = 2;
  }
}

// 获取租户请求
message GetTenantRequest {
  uint32 tenant_id = 1;
  repeated string fields = 2; // 字段筛选
}

// 获取租户响应
message GetTenantResponse {
  oneof result {
    Tenant tenant = 1;
    ErrorResponse error = 2;
  }
}

// 更新租户请求
message UpdateTenantRequest {
  uint32 tenant_id = 1;
  string display_name = 2;
  string description = 3;
  string contact_email = 4;
  string contact_phone = 5;
  string address = 6;
  int32 max_users = 7;
  google.protobuf.Timestamp expires_at = 8;
  map<string, string> metadata = 9;
  repeated string features = 10;
  repeated string update_mask = 11; // 更新字段掩码
}

// 更新租户响应
message UpdateTenantResponse {
  oneof result {
    Tenant tenant = 1;
    ErrorResponse error = 2;
  }
}

// 删除租户请求
message DeleteTenantRequest {
  uint32 tenant_id = 1;
  bool force = 2; // 强制删除
}

// 删除租户响应
message DeleteTenantResponse {
  oneof result {
    bool success = 1;
    ErrorResponse error = 2;
  }
}

// 获取租户列表请求
message ListTenantsRequest {
  PagingRequest paging = 1;
  repeated SortOption sort_options = 2;
  TenantStatus status = 3;
  TenantType type = 4;
  string search_keyword = 5;
  repeated string fields = 6; // 字段筛选
  map<string, string> filters = 7;
}

// 获取租户列表响应
message ListTenantsResponse {
  oneof result {
    TenantsData data = 1;
    ErrorResponse error = 2;
  }
}

message TenantsData {
  repeated Tenant tenants = 1;
  PaginatedResponse pagination = 2;
}

// 批量创建租户请求
message BatchCreateTenantsRequest {
  repeated CreateTenantRequest tenants = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 100];
}

// 批量创建租户响应
message BatchCreateTenantsResponse {
  oneof result {
    BatchOperationResult<Tenant> results = 1;
    ErrorResponse error = 2;
  }
}

// 批量删除租户请求
message BatchDeleteTenantsRequest {
  repeated uint32 tenant_ids = 1 [(validate.rules).repeated.min_items = 1, (validate.rules).repeated.max_items = 100];
  bool force = 2; // 强制删除
}

// 批量删除租户响应
message BatchDeleteTenantsResponse {
  oneof result {
    BatchOperationResult<bool> results = 1;
    ErrorResponse error = 2;
  }
}

// 启用租户请求
message EnableTenantRequest {
  uint32 tenant_id = 1;
  string reason = 2;
}

// 启用租户响应
message EnableTenantResponse {
  oneof result {
    bool success = 1;
    ErrorResponse error = 2;
  }
}

// 禁用租户请求
message DisableTenantRequest {
  uint32 tenant_id = 1;
  string reason = 2 [(validate.rules).string.min_len = 1];
}

// 禁用租户响应
message DisableTenantResponse {
  oneof result {
    bool success = 1;
    ErrorResponse error = 2;
  }
}

// 获取租户配置请求
message GetTenantConfigRequest {
  uint32 tenant_id = 1;
}

// 获取租户配置响应
message GetTenantConfigResponse {
  oneof result {
    TenantConfig config = 1;
    ErrorResponse error = 2;
  }
}

// 更新租户配置请求
message UpdateTenantConfigRequest {
  uint32 tenant_id = 1;
  TenantConfig config = 2;
  repeated string update_mask = 3; // 更新字段掩码
}

// 更新租户配置响应
message UpdateTenantConfigResponse {
  oneof result {
    TenantConfig config = 1;
    ErrorResponse error = 2;
  }
}

// 获取租户统计信息请求
message GetTenantUsageRequest {
  uint32 tenant_id = 1;
}

// 获取租户统计信息响应
message GetTenantStatsResponse {
  oneof result {
    TenantStats stats = 1;
    ErrorResponse error = 2;
  }
}

// 获取租户审计日志请求
message GetTenantAuditLogsRequest {
  uint32 tenant_id = 1;
  PagingRequest paging = 2;
  google.protobuf.Timestamp start_time = 3;
  google.protobuf.Timestamp end_time = 4;
  string action = 5;
  uint32 user_id = 6;
}

// 获取租户审计日志响应
message GetTenantAuditLogsResponse {
  oneof result {
    AuditLogsData data = 1;
    ErrorResponse error = 2;
  }
}

message AuditLogsData {
  repeated AuditLog logs = 1;
  PaginatedResponse pagination = 2;
}

message AuditLog {
  string log_id = 1;
  uint32 tenant_id = 2;
  uint32 user_id = 3;
  string action = 4;
  string resource_type = 5;
  string resource_id = 6;
  string details = 7;
  string ip_address = 8;
  string user_agent = 9;
  google.protobuf.Timestamp timestamp = 10;
}

// 导出租户数据请求
message ExportTenantDataRequest {
  uint32 tenant_id = 1;
  repeated string data_types = 2; // 导出的数据类型
  string format = 3; // 导出格式 (json, csv, xlsx)
}

// 导出租户数据响应
message ExportTenantDataResponse {
  oneof result {
    ExportResult export_result = 1;
    ErrorResponse error = 2;
  }
}

message ExportResult {
  string export_id = 1;
  string download_url = 2;
  google.protobuf.Timestamp expires_at = 3;
}

// 导入租户数据请求
message ImportTenantDataRequest {
  uint32 tenant_id = 1;
  string file_url = 2 [(validate.rules).string.min_len = 1];
  string format = 3; // 导入格式
  bool overwrite = 4; // 是否覆盖现有数据
}

// 导入租户数据响应
message ImportTenantDataResponse {
  oneof result {
    ImportResult import_result = 1;
    ErrorResponse error = 2;
  }
}

message ImportResult {
  string import_id = 1;
  int32 total_records = 2;
  int32 success_records = 3;
  int32 failed_records = 4;
  repeated string errors = 5;
}