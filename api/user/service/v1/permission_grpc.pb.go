// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/user/service/v1/permission.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	v1 "om-platform/pkg/utils/pagination/v1"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PermissionService_ListPermission_FullMethodName           = "/api.user.service.v1.PermissionService/ListPermission"
	PermissionService_GetPermission_FullMethodName            = "/api.user.service.v1.PermissionService/GetPermission"
	PermissionService_CreatePermission_FullMethodName         = "/api.user.service.v1.PermissionService/CreatePermission"
	PermissionService_UpdatePermission_FullMethodName         = "/api.user.service.v1.PermissionService/UpdatePermission"
	PermissionService_DeletePermission_FullMethodName         = "/api.user.service.v1.PermissionService/DeletePermission"
	PermissionService_GetPermissionTree_FullMethodName        = "/api.user.service.v1.PermissionService/GetPermissionTree"
	PermissionService_GetPermissionTreeNode_FullMethodName    = "/api.user.service.v1.PermissionService/GetPermissionTreeNode"
	PermissionService_ListPermissionTreeNode_FullMethodName   = "/api.user.service.v1.PermissionService/ListPermissionTreeNode"
	PermissionService_BatchAssignPermission_FullMethodName    = "/api.user.service.v1.PermissionService/BatchAssignPermission"
	PermissionService_BatchRevokePermission_FullMethodName    = "/api.user.service.v1.PermissionService/BatchRevokePermission"
	PermissionService_CheckPermission_FullMethodName          = "/api.user.service.v1.PermissionService/CheckPermission"
	PermissionService_CreatePermissionTemplate_FullMethodName = "/api.user.service.v1.PermissionService/CreatePermissionTemplate"
	PermissionService_ApplyPermissionTemplate_FullMethodName  = "/api.user.service.v1.PermissionService/ApplyPermissionTemplate"
	PermissionService_GetEffectivePermissions_FullMethodName  = "/api.user.service.v1.PermissionService/GetEffectivePermissions"
	PermissionService_ClearPermissionCache_FullMethodName     = "/api.user.service.v1.PermissionService/ClearPermissionCache"
	PermissionService_ExportPermissionConfig_FullMethodName   = "/api.user.service.v1.PermissionService/ExportPermissionConfig"
	PermissionService_ImportPermissionConfig_FullMethodName   = "/api.user.service.v1.PermissionService/ImportPermissionConfig"
)

// PermissionServiceClient is the client API for PermissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 权限服务
type PermissionServiceClient interface {
	// 查询权限列表
	ListPermission(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListPermissionResponse, error)
	// 获取权限详情
	GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*Permission, error)
	// 创建权限
	CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 更新权限
	UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除权限
	DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取权限树
	GetPermissionTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PermissionTree, error)
	// 获取权限树节点
	GetPermissionTreeNode(ctx context.Context, in *GetPermissionTreeNodeRequest, opts ...grpc.CallOption) (*PermissionTreeNode, error)
	// 获取权限树节点列表
	ListPermissionTreeNode(ctx context.Context, in *ListPermissionTreeNodeRequest, opts ...grpc.CallOption) (*ListPermissionTreeNodeResponse, error)
	// 批量分配权限
	BatchAssignPermission(ctx context.Context, in *BatchAssignPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量撤销权限
	BatchRevokePermission(ctx context.Context, in *BatchRevokePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 检查权限
	CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error)
	// 创建权限模板
	CreatePermissionTemplate(ctx context.Context, in *CreatePermissionTemplateRequest, opts ...grpc.CallOption) (*PermissionTemplate, error)
	// 应用权限模板
	ApplyPermissionTemplate(ctx context.Context, in *ApplyPermissionTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取有效权限列表
	GetEffectivePermissions(ctx context.Context, in *GetEffectivePermissionsRequest, opts ...grpc.CallOption) (*GetEffectivePermissionsResponse, error)
	// 清除权限缓存
	ClearPermissionCache(ctx context.Context, in *ClearPermissionCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 导出权限配置
	ExportPermissionConfig(ctx context.Context, in *ExportPermissionConfigRequest, opts ...grpc.CallOption) (*ExportPermissionConfigResponse, error)
	// 导入权限配置
	ImportPermissionConfig(ctx context.Context, in *ImportPermissionConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type permissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPermissionServiceClient(cc grpc.ClientConnInterface) PermissionServiceClient {
	return &permissionServiceClient{cc}
}

func (c *permissionServiceClient) ListPermission(ctx context.Context, in *v1.PagingRequest, opts ...grpc.CallOption) (*ListPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionResponse)
	err := c.cc.Invoke(ctx, PermissionService_ListPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetPermission(ctx context.Context, in *GetPermissionRequest, opts ...grpc.CallOption) (*Permission, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Permission)
	err := c.cc.Invoke(ctx, PermissionService_GetPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) CreatePermission(ctx context.Context, in *CreatePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_CreatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) UpdatePermission(ctx context.Context, in *UpdatePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_UpdatePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) DeletePermission(ctx context.Context, in *DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_DeletePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetPermissionTree(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PermissionTree, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionTree)
	err := c.cc.Invoke(ctx, PermissionService_GetPermissionTree_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetPermissionTreeNode(ctx context.Context, in *GetPermissionTreeNodeRequest, opts ...grpc.CallOption) (*PermissionTreeNode, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionTreeNode)
	err := c.cc.Invoke(ctx, PermissionService_GetPermissionTreeNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ListPermissionTreeNode(ctx context.Context, in *ListPermissionTreeNodeRequest, opts ...grpc.CallOption) (*ListPermissionTreeNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPermissionTreeNodeResponse)
	err := c.cc.Invoke(ctx, PermissionService_ListPermissionTreeNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) BatchAssignPermission(ctx context.Context, in *BatchAssignPermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_BatchAssignPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) BatchRevokePermission(ctx context.Context, in *BatchRevokePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_BatchRevokePermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) CheckPermission(ctx context.Context, in *CheckPermissionRequest, opts ...grpc.CallOption) (*CheckPermissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPermissionResponse)
	err := c.cc.Invoke(ctx, PermissionService_CheckPermission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) CreatePermissionTemplate(ctx context.Context, in *CreatePermissionTemplateRequest, opts ...grpc.CallOption) (*PermissionTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermissionTemplate)
	err := c.cc.Invoke(ctx, PermissionService_CreatePermissionTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ApplyPermissionTemplate(ctx context.Context, in *ApplyPermissionTemplateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_ApplyPermissionTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) GetEffectivePermissions(ctx context.Context, in *GetEffectivePermissionsRequest, opts ...grpc.CallOption) (*GetEffectivePermissionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEffectivePermissionsResponse)
	err := c.cc.Invoke(ctx, PermissionService_GetEffectivePermissions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ClearPermissionCache(ctx context.Context, in *ClearPermissionCacheRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_ClearPermissionCache_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ExportPermissionConfig(ctx context.Context, in *ExportPermissionConfigRequest, opts ...grpc.CallOption) (*ExportPermissionConfigResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportPermissionConfigResponse)
	err := c.cc.Invoke(ctx, PermissionService_ExportPermissionConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionServiceClient) ImportPermissionConfig(ctx context.Context, in *ImportPermissionConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, PermissionService_ImportPermissionConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PermissionServiceServer is the server API for PermissionService service.
// All implementations must embed UnimplementedPermissionServiceServer
// for forward compatibility.
//
// 权限服务
type PermissionServiceServer interface {
	// 查询权限列表
	ListPermission(context.Context, *v1.PagingRequest) (*ListPermissionResponse, error)
	// 获取权限详情
	GetPermission(context.Context, *GetPermissionRequest) (*Permission, error)
	// 创建权限
	CreatePermission(context.Context, *CreatePermissionRequest) (*emptypb.Empty, error)
	// 更新权限
	UpdatePermission(context.Context, *UpdatePermissionRequest) (*emptypb.Empty, error)
	// 删除权限
	DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error)
	// 获取权限树
	GetPermissionTree(context.Context, *emptypb.Empty) (*PermissionTree, error)
	// 获取权限树节点
	GetPermissionTreeNode(context.Context, *GetPermissionTreeNodeRequest) (*PermissionTreeNode, error)
	// 获取权限树节点列表
	ListPermissionTreeNode(context.Context, *ListPermissionTreeNodeRequest) (*ListPermissionTreeNodeResponse, error)
	// 批量分配权限
	BatchAssignPermission(context.Context, *BatchAssignPermissionRequest) (*emptypb.Empty, error)
	// 批量撤销权限
	BatchRevokePermission(context.Context, *BatchRevokePermissionRequest) (*emptypb.Empty, error)
	// 检查权限
	CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error)
	// 创建权限模板
	CreatePermissionTemplate(context.Context, *CreatePermissionTemplateRequest) (*PermissionTemplate, error)
	// 应用权限模板
	ApplyPermissionTemplate(context.Context, *ApplyPermissionTemplateRequest) (*emptypb.Empty, error)
	// 获取有效权限列表
	GetEffectivePermissions(context.Context, *GetEffectivePermissionsRequest) (*GetEffectivePermissionsResponse, error)
	// 清除权限缓存
	ClearPermissionCache(context.Context, *ClearPermissionCacheRequest) (*emptypb.Empty, error)
	// 导出权限配置
	ExportPermissionConfig(context.Context, *ExportPermissionConfigRequest) (*ExportPermissionConfigResponse, error)
	// 导入权限配置
	ImportPermissionConfig(context.Context, *ImportPermissionConfigRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedPermissionServiceServer()
}

// UnimplementedPermissionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPermissionServiceServer struct{}

func (UnimplementedPermissionServiceServer) ListPermission(context.Context, *v1.PagingRequest) (*ListPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermission not implemented")
}
func (UnimplementedPermissionServiceServer) GetPermission(context.Context, *GetPermissionRequest) (*Permission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermission not implemented")
}
func (UnimplementedPermissionServiceServer) CreatePermission(context.Context, *CreatePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermission not implemented")
}
func (UnimplementedPermissionServiceServer) UpdatePermission(context.Context, *UpdatePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePermission not implemented")
}
func (UnimplementedPermissionServiceServer) DeletePermission(context.Context, *DeletePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePermission not implemented")
}
func (UnimplementedPermissionServiceServer) GetPermissionTree(context.Context, *emptypb.Empty) (*PermissionTree, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionTree not implemented")
}
func (UnimplementedPermissionServiceServer) GetPermissionTreeNode(context.Context, *GetPermissionTreeNodeRequest) (*PermissionTreeNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissionTreeNode not implemented")
}
func (UnimplementedPermissionServiceServer) ListPermissionTreeNode(context.Context, *ListPermissionTreeNodeRequest) (*ListPermissionTreeNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPermissionTreeNode not implemented")
}
func (UnimplementedPermissionServiceServer) BatchAssignPermission(context.Context, *BatchAssignPermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchAssignPermission not implemented")
}
func (UnimplementedPermissionServiceServer) BatchRevokePermission(context.Context, *BatchRevokePermissionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchRevokePermission not implemented")
}
func (UnimplementedPermissionServiceServer) CheckPermission(context.Context, *CheckPermissionRequest) (*CheckPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPermission not implemented")
}
func (UnimplementedPermissionServiceServer) CreatePermissionTemplate(context.Context, *CreatePermissionTemplateRequest) (*PermissionTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePermissionTemplate not implemented")
}
func (UnimplementedPermissionServiceServer) ApplyPermissionTemplate(context.Context, *ApplyPermissionTemplateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyPermissionTemplate not implemented")
}
func (UnimplementedPermissionServiceServer) GetEffectivePermissions(context.Context, *GetEffectivePermissionsRequest) (*GetEffectivePermissionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEffectivePermissions not implemented")
}
func (UnimplementedPermissionServiceServer) ClearPermissionCache(context.Context, *ClearPermissionCacheRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearPermissionCache not implemented")
}
func (UnimplementedPermissionServiceServer) ExportPermissionConfig(context.Context, *ExportPermissionConfigRequest) (*ExportPermissionConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportPermissionConfig not implemented")
}
func (UnimplementedPermissionServiceServer) ImportPermissionConfig(context.Context, *ImportPermissionConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportPermissionConfig not implemented")
}
func (UnimplementedPermissionServiceServer) mustEmbedUnimplementedPermissionServiceServer() {}
func (UnimplementedPermissionServiceServer) testEmbeddedByValue()                           {}

// UnsafePermissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PermissionServiceServer will
// result in compilation errors.
type UnsafePermissionServiceServer interface {
	mustEmbedUnimplementedPermissionServiceServer()
}

func RegisterPermissionServiceServer(s grpc.ServiceRegistrar, srv PermissionServiceServer) {
	// If the following call pancis, it indicates UnimplementedPermissionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PermissionService_ServiceDesc, srv)
}

func _PermissionService_ListPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.PagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ListPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ListPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ListPermission(ctx, req.(*v1.PagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GetPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetPermission(ctx, req.(*GetPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_CreatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).CreatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_CreatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).CreatePermission(ctx, req.(*CreatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_UpdatePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).UpdatePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_UpdatePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).UpdatePermission(ctx, req.(*UpdatePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_DeletePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).DeletePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_DeletePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).DeletePermission(ctx, req.(*DeletePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetPermissionTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetPermissionTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GetPermissionTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetPermissionTree(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetPermissionTreeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionTreeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetPermissionTreeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GetPermissionTreeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetPermissionTreeNode(ctx, req.(*GetPermissionTreeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ListPermissionTreeNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPermissionTreeNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ListPermissionTreeNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ListPermissionTreeNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ListPermissionTreeNode(ctx, req.(*ListPermissionTreeNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_BatchAssignPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchAssignPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).BatchAssignPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_BatchAssignPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).BatchAssignPermission(ctx, req.(*BatchAssignPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_BatchRevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchRevokePermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).BatchRevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_BatchRevokePermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).BatchRevokePermission(ctx, req.(*BatchRevokePermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_CheckPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPermissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).CheckPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_CheckPermission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).CheckPermission(ctx, req.(*CheckPermissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_CreatePermissionTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePermissionTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).CreatePermissionTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_CreatePermissionTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).CreatePermissionTemplate(ctx, req.(*CreatePermissionTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ApplyPermissionTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyPermissionTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ApplyPermissionTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ApplyPermissionTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ApplyPermissionTemplate(ctx, req.(*ApplyPermissionTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_GetEffectivePermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEffectivePermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).GetEffectivePermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_GetEffectivePermissions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).GetEffectivePermissions(ctx, req.(*GetEffectivePermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ClearPermissionCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearPermissionCacheRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ClearPermissionCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ClearPermissionCache_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ClearPermissionCache(ctx, req.(*ClearPermissionCacheRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ExportPermissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportPermissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ExportPermissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ExportPermissionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ExportPermissionConfig(ctx, req.(*ExportPermissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PermissionService_ImportPermissionConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportPermissionConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PermissionServiceServer).ImportPermissionConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PermissionService_ImportPermissionConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PermissionServiceServer).ImportPermissionConfig(ctx, req.(*ImportPermissionConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PermissionService_ServiceDesc is the grpc.ServiceDesc for PermissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PermissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.PermissionService",
	HandlerType: (*PermissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPermission",
			Handler:    _PermissionService_ListPermission_Handler,
		},
		{
			MethodName: "GetPermission",
			Handler:    _PermissionService_GetPermission_Handler,
		},
		{
			MethodName: "CreatePermission",
			Handler:    _PermissionService_CreatePermission_Handler,
		},
		{
			MethodName: "UpdatePermission",
			Handler:    _PermissionService_UpdatePermission_Handler,
		},
		{
			MethodName: "DeletePermission",
			Handler:    _PermissionService_DeletePermission_Handler,
		},
		{
			MethodName: "GetPermissionTree",
			Handler:    _PermissionService_GetPermissionTree_Handler,
		},
		{
			MethodName: "GetPermissionTreeNode",
			Handler:    _PermissionService_GetPermissionTreeNode_Handler,
		},
		{
			MethodName: "ListPermissionTreeNode",
			Handler:    _PermissionService_ListPermissionTreeNode_Handler,
		},
		{
			MethodName: "BatchAssignPermission",
			Handler:    _PermissionService_BatchAssignPermission_Handler,
		},
		{
			MethodName: "BatchRevokePermission",
			Handler:    _PermissionService_BatchRevokePermission_Handler,
		},
		{
			MethodName: "CheckPermission",
			Handler:    _PermissionService_CheckPermission_Handler,
		},
		{
			MethodName: "CreatePermissionTemplate",
			Handler:    _PermissionService_CreatePermissionTemplate_Handler,
		},
		{
			MethodName: "ApplyPermissionTemplate",
			Handler:    _PermissionService_ApplyPermissionTemplate_Handler,
		},
		{
			MethodName: "GetEffectivePermissions",
			Handler:    _PermissionService_GetEffectivePermissions_Handler,
		},
		{
			MethodName: "ClearPermissionCache",
			Handler:    _PermissionService_ClearPermissionCache_Handler,
		},
		{
			MethodName: "ExportPermissionConfig",
			Handler:    _PermissionService_ExportPermissionConfig_Handler,
		},
		{
			MethodName: "ImportPermissionConfig",
			Handler:    _PermissionService_ImportPermissionConfig_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/service/v1/permission.proto",
}
