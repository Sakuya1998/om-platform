// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/user/service/v1/identity.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IdentityService_ConfigureIdentityProvider_FullMethodName          = "/api.user.service.v1.IdentityService/ConfigureIdentityProvider"
	IdentityService_GetIdentityProviderConfig_FullMethodName          = "/api.user.service.v1.IdentityService/GetIdentityProviderConfig"
	IdentityService_UpdateIdentityProviderConfig_FullMethodName       = "/api.user.service.v1.IdentityService/UpdateIdentityProviderConfig"
	IdentityService_DeleteIdentityProviderConfig_FullMethodName       = "/api.user.service.v1.IdentityService/DeleteIdentityProviderConfig"
	IdentityService_ListIdentityProviderConfigs_FullMethodName        = "/api.user.service.v1.IdentityService/ListIdentityProviderConfigs"
	IdentityService_TestIdentityProviderConnection_FullMethodName     = "/api.user.service.v1.IdentityService/TestIdentityProviderConnection"
	IdentityService_GetIdentityProviderLoginURL_FullMethodName        = "/api.user.service.v1.IdentityService/GetIdentityProviderLoginURL"
	IdentityService_HandleIdentityProviderCallback_FullMethodName     = "/api.user.service.v1.IdentityService/HandleIdentityProviderCallback"
	IdentityService_LinkExternalIdentity_FullMethodName               = "/api.user.service.v1.IdentityService/LinkExternalIdentity"
	IdentityService_UnlinkExternalIdentity_FullMethodName             = "/api.user.service.v1.IdentityService/UnlinkExternalIdentity"
	IdentityService_GetUserExternalIdentities_FullMethodName          = "/api.user.service.v1.IdentityService/GetUserExternalIdentities"
	IdentityService_SyncUserFromExternalIdentity_FullMethodName       = "/api.user.service.v1.IdentityService/SyncUserFromExternalIdentity"
	IdentityService_BatchSyncUsersFromExternalIdentity_FullMethodName = "/api.user.service.v1.IdentityService/BatchSyncUsersFromExternalIdentity"
	IdentityService_GetIdentityProviderMetadata_FullMethodName        = "/api.user.service.v1.IdentityService/GetIdentityProviderMetadata"
	IdentityService_ImportSAMLMetadata_FullMethodName                 = "/api.user.service.v1.IdentityService/ImportSAMLMetadata"
)

// IdentityServiceClient is the client API for IdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户身份联合管理服务
// 提供与外部身份提供商集成的功能，支持SSO、OAuth2、LDAP等认证方式
type IdentityServiceClient interface {
	// 配置身份提供商
	ConfigureIdentityProvider(ctx context.Context, in *ConfigureIdentityProviderRequest, opts ...grpc.CallOption) (*ConfigureIdentityProviderResponse, error)
	// 获取身份提供商配置
	GetIdentityProviderConfig(ctx context.Context, in *GetIdentityProviderConfigRequest, opts ...grpc.CallOption) (*IdentityProviderConfig, error)
	// 更新身份提供商配置
	UpdateIdentityProviderConfig(ctx context.Context, in *UpdateIdentityProviderConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除身份提供商配置
	DeleteIdentityProviderConfig(ctx context.Context, in *DeleteIdentityProviderConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 列出身份提供商配置
	ListIdentityProviderConfigs(ctx context.Context, in *ListIdentityProviderConfigsRequest, opts ...grpc.CallOption) (*ListIdentityProviderConfigsResponse, error)
	// 测试身份提供商连接
	TestIdentityProviderConnection(ctx context.Context, in *TestIdentityProviderConnectionRequest, opts ...grpc.CallOption) (*TestIdentityProviderConnectionResponse, error)
	// 获取身份提供商登录URL
	GetIdentityProviderLoginURL(ctx context.Context, in *GetIdentityProviderLoginURLRequest, opts ...grpc.CallOption) (*GetIdentityProviderLoginURLResponse, error)
	// 处理身份提供商回调
	HandleIdentityProviderCallback(ctx context.Context, in *HandleIdentityProviderCallbackRequest, opts ...grpc.CallOption) (*HandleIdentityProviderCallbackResponse, error)
	// 关联外部身份
	LinkExternalIdentity(ctx context.Context, in *LinkExternalIdentityRequest, opts ...grpc.CallOption) (*LinkExternalIdentityResponse, error)
	// 解除外部身份关联
	UnlinkExternalIdentity(ctx context.Context, in *UnlinkExternalIdentityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取用户关联的外部身份
	GetUserExternalIdentities(ctx context.Context, in *GetUserExternalIdentitiesRequest, opts ...grpc.CallOption) (*GetUserExternalIdentitiesResponse, error)
	// 同步用户信息
	SyncUserFromExternalIdentity(ctx context.Context, in *SyncUserFromExternalIdentityRequest, opts ...grpc.CallOption) (*SyncUserFromExternalIdentityResponse, error)
	// 批量同步用户
	BatchSyncUsersFromExternalIdentity(ctx context.Context, in *BatchSyncUsersFromExternalIdentityRequest, opts ...grpc.CallOption) (*BatchSyncUsersFromExternalIdentityResponse, error)
	// 获取身份提供商元数据
	GetIdentityProviderMetadata(ctx context.Context, in *GetIdentityProviderMetadataRequest, opts ...grpc.CallOption) (*GetIdentityProviderMetadataResponse, error)
	// 导入SAML元数据
	ImportSAMLMetadata(ctx context.Context, in *ImportSAMLMetadataRequest, opts ...grpc.CallOption) (*ImportSAMLMetadataResponse, error)
}

type identityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIdentityServiceClient(cc grpc.ClientConnInterface) IdentityServiceClient {
	return &identityServiceClient{cc}
}

func (c *identityServiceClient) ConfigureIdentityProvider(ctx context.Context, in *ConfigureIdentityProviderRequest, opts ...grpc.CallOption) (*ConfigureIdentityProviderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfigureIdentityProviderResponse)
	err := c.cc.Invoke(ctx, IdentityService_ConfigureIdentityProvider_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetIdentityProviderConfig(ctx context.Context, in *GetIdentityProviderConfigRequest, opts ...grpc.CallOption) (*IdentityProviderConfig, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IdentityProviderConfig)
	err := c.cc.Invoke(ctx, IdentityService_GetIdentityProviderConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UpdateIdentityProviderConfig(ctx context.Context, in *UpdateIdentityProviderConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IdentityService_UpdateIdentityProviderConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) DeleteIdentityProviderConfig(ctx context.Context, in *DeleteIdentityProviderConfigRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IdentityService_DeleteIdentityProviderConfig_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ListIdentityProviderConfigs(ctx context.Context, in *ListIdentityProviderConfigsRequest, opts ...grpc.CallOption) (*ListIdentityProviderConfigsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListIdentityProviderConfigsResponse)
	err := c.cc.Invoke(ctx, IdentityService_ListIdentityProviderConfigs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) TestIdentityProviderConnection(ctx context.Context, in *TestIdentityProviderConnectionRequest, opts ...grpc.CallOption) (*TestIdentityProviderConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestIdentityProviderConnectionResponse)
	err := c.cc.Invoke(ctx, IdentityService_TestIdentityProviderConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetIdentityProviderLoginURL(ctx context.Context, in *GetIdentityProviderLoginURLRequest, opts ...grpc.CallOption) (*GetIdentityProviderLoginURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentityProviderLoginURLResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetIdentityProviderLoginURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) HandleIdentityProviderCallback(ctx context.Context, in *HandleIdentityProviderCallbackRequest, opts ...grpc.CallOption) (*HandleIdentityProviderCallbackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HandleIdentityProviderCallbackResponse)
	err := c.cc.Invoke(ctx, IdentityService_HandleIdentityProviderCallback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) LinkExternalIdentity(ctx context.Context, in *LinkExternalIdentityRequest, opts ...grpc.CallOption) (*LinkExternalIdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LinkExternalIdentityResponse)
	err := c.cc.Invoke(ctx, IdentityService_LinkExternalIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) UnlinkExternalIdentity(ctx context.Context, in *UnlinkExternalIdentityRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, IdentityService_UnlinkExternalIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetUserExternalIdentities(ctx context.Context, in *GetUserExternalIdentitiesRequest, opts ...grpc.CallOption) (*GetUserExternalIdentitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserExternalIdentitiesResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetUserExternalIdentities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) SyncUserFromExternalIdentity(ctx context.Context, in *SyncUserFromExternalIdentityRequest, opts ...grpc.CallOption) (*SyncUserFromExternalIdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncUserFromExternalIdentityResponse)
	err := c.cc.Invoke(ctx, IdentityService_SyncUserFromExternalIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) BatchSyncUsersFromExternalIdentity(ctx context.Context, in *BatchSyncUsersFromExternalIdentityRequest, opts ...grpc.CallOption) (*BatchSyncUsersFromExternalIdentityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSyncUsersFromExternalIdentityResponse)
	err := c.cc.Invoke(ctx, IdentityService_BatchSyncUsersFromExternalIdentity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) GetIdentityProviderMetadata(ctx context.Context, in *GetIdentityProviderMetadataRequest, opts ...grpc.CallOption) (*GetIdentityProviderMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetIdentityProviderMetadataResponse)
	err := c.cc.Invoke(ctx, IdentityService_GetIdentityProviderMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityServiceClient) ImportSAMLMetadata(ctx context.Context, in *ImportSAMLMetadataRequest, opts ...grpc.CallOption) (*ImportSAMLMetadataResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ImportSAMLMetadataResponse)
	err := c.cc.Invoke(ctx, IdentityService_ImportSAMLMetadata_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServiceServer is the server API for IdentityService service.
// All implementations must embed UnimplementedIdentityServiceServer
// for forward compatibility.
//
// 用户身份联合管理服务
// 提供与外部身份提供商集成的功能，支持SSO、OAuth2、LDAP等认证方式
type IdentityServiceServer interface {
	// 配置身份提供商
	ConfigureIdentityProvider(context.Context, *ConfigureIdentityProviderRequest) (*ConfigureIdentityProviderResponse, error)
	// 获取身份提供商配置
	GetIdentityProviderConfig(context.Context, *GetIdentityProviderConfigRequest) (*IdentityProviderConfig, error)
	// 更新身份提供商配置
	UpdateIdentityProviderConfig(context.Context, *UpdateIdentityProviderConfigRequest) (*emptypb.Empty, error)
	// 删除身份提供商配置
	DeleteIdentityProviderConfig(context.Context, *DeleteIdentityProviderConfigRequest) (*emptypb.Empty, error)
	// 列出身份提供商配置
	ListIdentityProviderConfigs(context.Context, *ListIdentityProviderConfigsRequest) (*ListIdentityProviderConfigsResponse, error)
	// 测试身份提供商连接
	TestIdentityProviderConnection(context.Context, *TestIdentityProviderConnectionRequest) (*TestIdentityProviderConnectionResponse, error)
	// 获取身份提供商登录URL
	GetIdentityProviderLoginURL(context.Context, *GetIdentityProviderLoginURLRequest) (*GetIdentityProviderLoginURLResponse, error)
	// 处理身份提供商回调
	HandleIdentityProviderCallback(context.Context, *HandleIdentityProviderCallbackRequest) (*HandleIdentityProviderCallbackResponse, error)
	// 关联外部身份
	LinkExternalIdentity(context.Context, *LinkExternalIdentityRequest) (*LinkExternalIdentityResponse, error)
	// 解除外部身份关联
	UnlinkExternalIdentity(context.Context, *UnlinkExternalIdentityRequest) (*emptypb.Empty, error)
	// 获取用户关联的外部身份
	GetUserExternalIdentities(context.Context, *GetUserExternalIdentitiesRequest) (*GetUserExternalIdentitiesResponse, error)
	// 同步用户信息
	SyncUserFromExternalIdentity(context.Context, *SyncUserFromExternalIdentityRequest) (*SyncUserFromExternalIdentityResponse, error)
	// 批量同步用户
	BatchSyncUsersFromExternalIdentity(context.Context, *BatchSyncUsersFromExternalIdentityRequest) (*BatchSyncUsersFromExternalIdentityResponse, error)
	// 获取身份提供商元数据
	GetIdentityProviderMetadata(context.Context, *GetIdentityProviderMetadataRequest) (*GetIdentityProviderMetadataResponse, error)
	// 导入SAML元数据
	ImportSAMLMetadata(context.Context, *ImportSAMLMetadataRequest) (*ImportSAMLMetadataResponse, error)
	mustEmbedUnimplementedIdentityServiceServer()
}

// UnimplementedIdentityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIdentityServiceServer struct{}

func (UnimplementedIdentityServiceServer) ConfigureIdentityProvider(context.Context, *ConfigureIdentityProviderRequest) (*ConfigureIdentityProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureIdentityProvider not implemented")
}
func (UnimplementedIdentityServiceServer) GetIdentityProviderConfig(context.Context, *GetIdentityProviderConfigRequest) (*IdentityProviderConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityProviderConfig not implemented")
}
func (UnimplementedIdentityServiceServer) UpdateIdentityProviderConfig(context.Context, *UpdateIdentityProviderConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIdentityProviderConfig not implemented")
}
func (UnimplementedIdentityServiceServer) DeleteIdentityProviderConfig(context.Context, *DeleteIdentityProviderConfigRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIdentityProviderConfig not implemented")
}
func (UnimplementedIdentityServiceServer) ListIdentityProviderConfigs(context.Context, *ListIdentityProviderConfigsRequest) (*ListIdentityProviderConfigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIdentityProviderConfigs not implemented")
}
func (UnimplementedIdentityServiceServer) TestIdentityProviderConnection(context.Context, *TestIdentityProviderConnectionRequest) (*TestIdentityProviderConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestIdentityProviderConnection not implemented")
}
func (UnimplementedIdentityServiceServer) GetIdentityProviderLoginURL(context.Context, *GetIdentityProviderLoginURLRequest) (*GetIdentityProviderLoginURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityProviderLoginURL not implemented")
}
func (UnimplementedIdentityServiceServer) HandleIdentityProviderCallback(context.Context, *HandleIdentityProviderCallbackRequest) (*HandleIdentityProviderCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleIdentityProviderCallback not implemented")
}
func (UnimplementedIdentityServiceServer) LinkExternalIdentity(context.Context, *LinkExternalIdentityRequest) (*LinkExternalIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkExternalIdentity not implemented")
}
func (UnimplementedIdentityServiceServer) UnlinkExternalIdentity(context.Context, *UnlinkExternalIdentityRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkExternalIdentity not implemented")
}
func (UnimplementedIdentityServiceServer) GetUserExternalIdentities(context.Context, *GetUserExternalIdentitiesRequest) (*GetUserExternalIdentitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserExternalIdentities not implemented")
}
func (UnimplementedIdentityServiceServer) SyncUserFromExternalIdentity(context.Context, *SyncUserFromExternalIdentityRequest) (*SyncUserFromExternalIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncUserFromExternalIdentity not implemented")
}
func (UnimplementedIdentityServiceServer) BatchSyncUsersFromExternalIdentity(context.Context, *BatchSyncUsersFromExternalIdentityRequest) (*BatchSyncUsersFromExternalIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSyncUsersFromExternalIdentity not implemented")
}
func (UnimplementedIdentityServiceServer) GetIdentityProviderMetadata(context.Context, *GetIdentityProviderMetadataRequest) (*GetIdentityProviderMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIdentityProviderMetadata not implemented")
}
func (UnimplementedIdentityServiceServer) ImportSAMLMetadata(context.Context, *ImportSAMLMetadataRequest) (*ImportSAMLMetadataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportSAMLMetadata not implemented")
}
func (UnimplementedIdentityServiceServer) mustEmbedUnimplementedIdentityServiceServer() {}
func (UnimplementedIdentityServiceServer) testEmbeddedByValue()                         {}

// UnsafeIdentityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IdentityServiceServer will
// result in compilation errors.
type UnsafeIdentityServiceServer interface {
	mustEmbedUnimplementedIdentityServiceServer()
}

func RegisterIdentityServiceServer(s grpc.ServiceRegistrar, srv IdentityServiceServer) {
	// If the following call pancis, it indicates UnimplementedIdentityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IdentityService_ServiceDesc, srv)
}

func _IdentityService_ConfigureIdentityProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureIdentityProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ConfigureIdentityProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ConfigureIdentityProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ConfigureIdentityProvider(ctx, req.(*ConfigureIdentityProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetIdentityProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetIdentityProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetIdentityProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetIdentityProviderConfig(ctx, req.(*GetIdentityProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UpdateIdentityProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIdentityProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UpdateIdentityProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UpdateIdentityProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UpdateIdentityProviderConfig(ctx, req.(*UpdateIdentityProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_DeleteIdentityProviderConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIdentityProviderConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).DeleteIdentityProviderConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_DeleteIdentityProviderConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).DeleteIdentityProviderConfig(ctx, req.(*DeleteIdentityProviderConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ListIdentityProviderConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIdentityProviderConfigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ListIdentityProviderConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ListIdentityProviderConfigs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ListIdentityProviderConfigs(ctx, req.(*ListIdentityProviderConfigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_TestIdentityProviderConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestIdentityProviderConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).TestIdentityProviderConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_TestIdentityProviderConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).TestIdentityProviderConnection(ctx, req.(*TestIdentityProviderConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetIdentityProviderLoginURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityProviderLoginURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetIdentityProviderLoginURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetIdentityProviderLoginURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetIdentityProviderLoginURL(ctx, req.(*GetIdentityProviderLoginURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_HandleIdentityProviderCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleIdentityProviderCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).HandleIdentityProviderCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_HandleIdentityProviderCallback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).HandleIdentityProviderCallback(ctx, req.(*HandleIdentityProviderCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_LinkExternalIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LinkExternalIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).LinkExternalIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_LinkExternalIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).LinkExternalIdentity(ctx, req.(*LinkExternalIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_UnlinkExternalIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlinkExternalIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).UnlinkExternalIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_UnlinkExternalIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).UnlinkExternalIdentity(ctx, req.(*UnlinkExternalIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetUserExternalIdentities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserExternalIdentitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetUserExternalIdentities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetUserExternalIdentities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetUserExternalIdentities(ctx, req.(*GetUserExternalIdentitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_SyncUserFromExternalIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncUserFromExternalIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).SyncUserFromExternalIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_SyncUserFromExternalIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).SyncUserFromExternalIdentity(ctx, req.(*SyncUserFromExternalIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_BatchSyncUsersFromExternalIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSyncUsersFromExternalIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).BatchSyncUsersFromExternalIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_BatchSyncUsersFromExternalIdentity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).BatchSyncUsersFromExternalIdentity(ctx, req.(*BatchSyncUsersFromExternalIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_GetIdentityProviderMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIdentityProviderMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).GetIdentityProviderMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_GetIdentityProviderMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).GetIdentityProviderMetadata(ctx, req.(*GetIdentityProviderMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IdentityService_ImportSAMLMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportSAMLMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServiceServer).ImportSAMLMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IdentityService_ImportSAMLMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServiceServer).ImportSAMLMetadata(ctx, req.(*ImportSAMLMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IdentityService_ServiceDesc is the grpc.ServiceDesc for IdentityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IdentityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.IdentityService",
	HandlerType: (*IdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfigureIdentityProvider",
			Handler:    _IdentityService_ConfigureIdentityProvider_Handler,
		},
		{
			MethodName: "GetIdentityProviderConfig",
			Handler:    _IdentityService_GetIdentityProviderConfig_Handler,
		},
		{
			MethodName: "UpdateIdentityProviderConfig",
			Handler:    _IdentityService_UpdateIdentityProviderConfig_Handler,
		},
		{
			MethodName: "DeleteIdentityProviderConfig",
			Handler:    _IdentityService_DeleteIdentityProviderConfig_Handler,
		},
		{
			MethodName: "ListIdentityProviderConfigs",
			Handler:    _IdentityService_ListIdentityProviderConfigs_Handler,
		},
		{
			MethodName: "TestIdentityProviderConnection",
			Handler:    _IdentityService_TestIdentityProviderConnection_Handler,
		},
		{
			MethodName: "GetIdentityProviderLoginURL",
			Handler:    _IdentityService_GetIdentityProviderLoginURL_Handler,
		},
		{
			MethodName: "HandleIdentityProviderCallback",
			Handler:    _IdentityService_HandleIdentityProviderCallback_Handler,
		},
		{
			MethodName: "LinkExternalIdentity",
			Handler:    _IdentityService_LinkExternalIdentity_Handler,
		},
		{
			MethodName: "UnlinkExternalIdentity",
			Handler:    _IdentityService_UnlinkExternalIdentity_Handler,
		},
		{
			MethodName: "GetUserExternalIdentities",
			Handler:    _IdentityService_GetUserExternalIdentities_Handler,
		},
		{
			MethodName: "SyncUserFromExternalIdentity",
			Handler:    _IdentityService_SyncUserFromExternalIdentity_Handler,
		},
		{
			MethodName: "BatchSyncUsersFromExternalIdentity",
			Handler:    _IdentityService_BatchSyncUsersFromExternalIdentity_Handler,
		},
		{
			MethodName: "GetIdentityProviderMetadata",
			Handler:    _IdentityService_GetIdentityProviderMetadata_Handler,
		},
		{
			MethodName: "ImportSAMLMetadata",
			Handler:    _IdentityService_ImportSAMLMetadata_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/service/v1/identity.proto",
}
