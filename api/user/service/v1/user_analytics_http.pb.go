// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.27.3
// source: api/user/service/v1/user_analytics.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationUserAnalyticsServiceBatchExportUsers = "/api.user.service.v1.UserAnalyticsService/BatchExportUsers"
const OperationUserAnalyticsServiceBatchImportUsers = "/api.user.service.v1.UserAnalyticsService/BatchImportUsers"
const OperationUserAnalyticsServiceBatchProcessUsers = "/api.user.service.v1.UserAnalyticsService/BatchProcessUsers"

type UserAnalyticsServiceHTTPServer interface {
	// BatchExportUsers 批量导出用户
	BatchExportUsers(context.Context, *BatchExportUsersRequest) (*BatchExportUsersResponse, error)
	// BatchImportUsers 批量导入用户
	BatchImportUsers(context.Context, *BatchImportUsersRequest) (*BatchImportUsersResponse, error)
	// BatchProcessUsers 批量操作用户
	BatchProcessUsers(context.Context, *BatchProcessUsersRequest) (*BatchProcessUsersResponse, error)
}

func RegisterUserAnalyticsServiceHTTPServer(s *http.Server, srv UserAnalyticsServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/v1/user-analytics/users:batchProcess", _UserAnalyticsService_BatchProcessUsers0_HTTP_Handler(srv))
	r.POST("/api/v1/user-analytics/users:batchImport", _UserAnalyticsService_BatchImportUsers0_HTTP_Handler(srv))
	r.POST("/api/v1/user-analytics/users:batchExport", _UserAnalyticsService_BatchExportUsers0_HTTP_Handler(srv))
}

func _UserAnalyticsService_BatchProcessUsers0_HTTP_Handler(srv UserAnalyticsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchProcessUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAnalyticsServiceBatchProcessUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchProcessUsers(ctx, req.(*BatchProcessUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchProcessUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _UserAnalyticsService_BatchImportUsers0_HTTP_Handler(srv UserAnalyticsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchImportUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAnalyticsServiceBatchImportUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchImportUsers(ctx, req.(*BatchImportUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchImportUsersResponse)
		return ctx.Result(200, reply)
	}
}

func _UserAnalyticsService_BatchExportUsers0_HTTP_Handler(srv UserAnalyticsServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in BatchExportUsersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationUserAnalyticsServiceBatchExportUsers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.BatchExportUsers(ctx, req.(*BatchExportUsersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*BatchExportUsersResponse)
		return ctx.Result(200, reply)
	}
}

type UserAnalyticsServiceHTTPClient interface {
	BatchExportUsers(ctx context.Context, req *BatchExportUsersRequest, opts ...http.CallOption) (rsp *BatchExportUsersResponse, err error)
	BatchImportUsers(ctx context.Context, req *BatchImportUsersRequest, opts ...http.CallOption) (rsp *BatchImportUsersResponse, err error)
	BatchProcessUsers(ctx context.Context, req *BatchProcessUsersRequest, opts ...http.CallOption) (rsp *BatchProcessUsersResponse, err error)
}

type UserAnalyticsServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewUserAnalyticsServiceHTTPClient(client *http.Client) UserAnalyticsServiceHTTPClient {
	return &UserAnalyticsServiceHTTPClientImpl{client}
}

func (c *UserAnalyticsServiceHTTPClientImpl) BatchExportUsers(ctx context.Context, in *BatchExportUsersRequest, opts ...http.CallOption) (*BatchExportUsersResponse, error) {
	var out BatchExportUsersResponse
	pattern := "/api/v1/user-analytics/users:batchExport"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAnalyticsServiceBatchExportUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAnalyticsServiceHTTPClientImpl) BatchImportUsers(ctx context.Context, in *BatchImportUsersRequest, opts ...http.CallOption) (*BatchImportUsersResponse, error) {
	var out BatchImportUsersResponse
	pattern := "/api/v1/user-analytics/users:batchImport"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAnalyticsServiceBatchImportUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *UserAnalyticsServiceHTTPClientImpl) BatchProcessUsers(ctx context.Context, in *BatchProcessUsersRequest, opts ...http.CallOption) (*BatchProcessUsersResponse, error) {
	var out BatchProcessUsersResponse
	pattern := "/api/v1/user-analytics/users:batchProcess"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationUserAnalyticsServiceBatchProcessUsers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
