// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.27.3
// source: api/user/service/v1/user_error.proto

package v1

import (
	_ "github.com/go-kratos/kratos/v2/errors"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserErrorReason int32

const (
	// =============================================
	// 通用错误 (0-99)
	// =============================================
	UserErrorReason_METHOD_NOT_ALLOWED    UserErrorReason = 0 // 方法不允许
	UserErrorReason_REQUEST_TIMEOUT       UserErrorReason = 1 // 请求超时
	UserErrorReason_INTERNAL_SERVER_ERROR UserErrorReason = 2 // 内部服务器错误
	UserErrorReason_NOT_IMPLEMENTED       UserErrorReason = 3 // 未实现
	UserErrorReason_NETWORK_ERROR         UserErrorReason = 4 // 网络错误
	UserErrorReason_SERVICE_UNAVAILABLE   UserErrorReason = 5 // 服务不可用
	UserErrorReason_NETWORK_TIMEOUT       UserErrorReason = 6 // 网络超时
	UserErrorReason_REQUEST_NOT_SUPPORT   UserErrorReason = 7 // 请求不支持
	// =============================================
	// 客户端错误 - 400 Bad Request (100-199)
	// =============================================
	UserErrorReason_BAD_REQUEST      UserErrorReason = 100 // 错误的请求
	UserErrorReason_INVALID_USERID   UserErrorReason = 101 // 用户ID无效
	UserErrorReason_INVALID_PASSWORD UserErrorReason = 102 // 密码无效
	// =============================================
	// 客户端错误 - 404 Not Found (200-299)
	// =============================================
	UserErrorReason_RESOURCE_NOT_FOUND     UserErrorReason = 200 // 资源未找到
	UserErrorReason_USER_NOT_FOUND         UserErrorReason = 201 // 用户不存在
	UserErrorReason_ROLE_NOT_FOUND         UserErrorReason = 202 // 角色不存在
	UserErrorReason_DEPARTMENT_NOT_FOUND   UserErrorReason = 203 // 部门不存在
	UserErrorReason_ORGANIZATION_NOT_FOUND UserErrorReason = 204 // 组织不存在
	UserErrorReason_POSITION_NOT_FOUND     UserErrorReason = 205 // 职位不存在
	UserErrorReason_TENANT_NOT_FOUND       UserErrorReason = 206 // 租户不存在
	UserErrorReason_PERMISSION_NOT_FOUND   UserErrorReason = 207 // 权限不存在
	// =============================================
	// 客户端错误 - 401 Unauthorized (300-399)
	// =============================================
	UserErrorReason_NOT_LOGGED_IN      UserErrorReason = 300 // 未登录
	UserErrorReason_USER_FREEZE        UserErrorReason = 301 // 用户被冻结
	UserErrorReason_INCORRECT_PASSWORD UserErrorReason = 302 // 密码错误
	// =============================================
	// 客户端错误 - 403 Forbidden (400-499)
	// =============================================
	UserErrorReason_ACCESS_FORBIDDEN  UserErrorReason = 400 // 禁止访问
	UserErrorReason_PERMISSION_DENIED UserErrorReason = 401 // 权限不足
	// =============================================
	// 权限模板相关错误 (500-599)
	// =============================================
	// 400 Bad Request
	UserErrorReason_PERMISSION_TEMPLATE_INVALID       UserErrorReason = 500 // 权限模板格式无效
	UserErrorReason_PERMISSION_TEMPLATE_DUPLICATE     UserErrorReason = 501 // 权限模板重复
	UserErrorReason_PERMISSION_TEMPLATE_PARAM_INVALID UserErrorReason = 502 // 权限模板参数无效
	// 404 Not Found
	UserErrorReason_PERMISSION_TEMPLATE_NOT_FOUND UserErrorReason = 510 // 权限模板不存在
	// =============================================
	// 条件表达式相关错误 (520-529)
	// =============================================
	// 400 Bad Request
	UserErrorReason_CONDITION_EXPRESSION_INVALID          UserErrorReason = 520 // 条件表达式格式无效
	UserErrorReason_CONDITION_EXPRESSION_SYNTAX_ERROR     UserErrorReason = 521 // 条件表达式语法错误
	UserErrorReason_CONDITION_EXPRESSION_EVALUATION_ERROR UserErrorReason = 522 // 条件表达式求值错误
	// =============================================
	// 权限继承相关错误 (530-539)
	// =============================================
	// 400 Bad Request
	UserErrorReason_PERMISSION_INHERITANCE_CYCLE          UserErrorReason = 530 // 权限继承存在循环依赖
	UserErrorReason_PERMISSION_INHERITANCE_DEPTH_EXCEEDED UserErrorReason = 531 // 权限继承深度超限
	// =============================================
	// 动态权限相关错误 (540-549)
	// =============================================
	// 403 Forbidden
	UserErrorReason_DYNAMIC_PERMISSION_EVALUATION_FAILED UserErrorReason = 540 // 动态权限评估失败
	UserErrorReason_DYNAMIC_PERMISSION_CONTEXT_MISSING   UserErrorReason = 541 // 动态权限上下文缺失
	// =============================================
	// 权限缓存相关错误 (550-559)
	// =============================================
	// 500 Internal Server Error
	UserErrorReason_PERMISSION_CACHE_ERROR         UserErrorReason = 550 // 权限缓存错误
	UserErrorReason_PERMISSION_CACHE_INCONSISTENCY UserErrorReason = 551 // 权限缓存数据不一致
	UserErrorReason_PERMISSION_CACHE_SYNC_FAILED   UserErrorReason = 552 // 权限缓存同步失败
	// =============================================
	// 用户会话相关错误 (560-579)
	// =============================================
	// 400 Bad Request
	UserErrorReason_INVALID_SESSION        UserErrorReason = 560 // 无效的会话
	UserErrorReason_SESSION_EXPIRED        UserErrorReason = 561 // 会话已过期
	UserErrorReason_SESSION_LIMIT_EXCEEDED UserErrorReason = 562 // 会话数量超限
	// 401 Unauthorized
	UserErrorReason_SESSION_AUTHENTICATION_FAILED UserErrorReason = 570 // 会话认证失败
	UserErrorReason_SESSION_TOKEN_EXPIRED         UserErrorReason = 571 // 会话令牌过期
	UserErrorReason_SESSION_TOKEN_INVALID         UserErrorReason = 572 // 会话令牌无效
	// 403 Forbidden
	UserErrorReason_SESSION_ACCESS_DENIED UserErrorReason = 575 // 会话访问被拒绝
	// =============================================
	// 认证相关错误 (580-599)
	// =============================================
	// 400 Bad Request
	UserErrorReason_INVALID_CREDENTIALS UserErrorReason = 580 // 无效的凭证
	UserErrorReason_INVALID_TOKEN       UserErrorReason = 581 // 无效的令牌
	UserErrorReason_INVALID_CAPTCHA     UserErrorReason = 582 // 无效的验证码
	UserErrorReason_CAPTCHA_EXPIRED     UserErrorReason = 583 // 验证码已过期
	// 401 Unauthorized
	UserErrorReason_TWO_FACTOR_REQUIRED UserErrorReason = 585 // 需要双因素认证
	UserErrorReason_TWO_FACTOR_FAILED   UserErrorReason = 586 // 双因素认证失败
	// 403 Forbidden
	UserErrorReason_ACCOUNT_LOCKED          UserErrorReason = 590 // 账户已锁定
	UserErrorReason_LOGIN_ATTEMPTS_EXCEEDED UserErrorReason = 591 // 登录尝试次数超限
	UserErrorReason_IP_RESTRICTED           UserErrorReason = 592 // IP受限
)

// Enum value maps for UserErrorReason.
var (
	UserErrorReason_name = map[int32]string{
		0:   "METHOD_NOT_ALLOWED",
		1:   "REQUEST_TIMEOUT",
		2:   "INTERNAL_SERVER_ERROR",
		3:   "NOT_IMPLEMENTED",
		4:   "NETWORK_ERROR",
		5:   "SERVICE_UNAVAILABLE",
		6:   "NETWORK_TIMEOUT",
		7:   "REQUEST_NOT_SUPPORT",
		100: "BAD_REQUEST",
		101: "INVALID_USERID",
		102: "INVALID_PASSWORD",
		200: "RESOURCE_NOT_FOUND",
		201: "USER_NOT_FOUND",
		202: "ROLE_NOT_FOUND",
		203: "DEPARTMENT_NOT_FOUND",
		204: "ORGANIZATION_NOT_FOUND",
		205: "POSITION_NOT_FOUND",
		206: "TENANT_NOT_FOUND",
		207: "PERMISSION_NOT_FOUND",
		300: "NOT_LOGGED_IN",
		301: "USER_FREEZE",
		302: "INCORRECT_PASSWORD",
		400: "ACCESS_FORBIDDEN",
		401: "PERMISSION_DENIED",
		500: "PERMISSION_TEMPLATE_INVALID",
		501: "PERMISSION_TEMPLATE_DUPLICATE",
		502: "PERMISSION_TEMPLATE_PARAM_INVALID",
		510: "PERMISSION_TEMPLATE_NOT_FOUND",
		520: "CONDITION_EXPRESSION_INVALID",
		521: "CONDITION_EXPRESSION_SYNTAX_ERROR",
		522: "CONDITION_EXPRESSION_EVALUATION_ERROR",
		530: "PERMISSION_INHERITANCE_CYCLE",
		531: "PERMISSION_INHERITANCE_DEPTH_EXCEEDED",
		540: "DYNAMIC_PERMISSION_EVALUATION_FAILED",
		541: "DYNAMIC_PERMISSION_CONTEXT_MISSING",
		550: "PERMISSION_CACHE_ERROR",
		551: "PERMISSION_CACHE_INCONSISTENCY",
		552: "PERMISSION_CACHE_SYNC_FAILED",
		560: "INVALID_SESSION",
		561: "SESSION_EXPIRED",
		562: "SESSION_LIMIT_EXCEEDED",
		570: "SESSION_AUTHENTICATION_FAILED",
		571: "SESSION_TOKEN_EXPIRED",
		572: "SESSION_TOKEN_INVALID",
		575: "SESSION_ACCESS_DENIED",
		580: "INVALID_CREDENTIALS",
		581: "INVALID_TOKEN",
		582: "INVALID_CAPTCHA",
		583: "CAPTCHA_EXPIRED",
		585: "TWO_FACTOR_REQUIRED",
		586: "TWO_FACTOR_FAILED",
		590: "ACCOUNT_LOCKED",
		591: "LOGIN_ATTEMPTS_EXCEEDED",
		592: "IP_RESTRICTED",
	}
	UserErrorReason_value = map[string]int32{
		"METHOD_NOT_ALLOWED":                    0,
		"REQUEST_TIMEOUT":                       1,
		"INTERNAL_SERVER_ERROR":                 2,
		"NOT_IMPLEMENTED":                       3,
		"NETWORK_ERROR":                         4,
		"SERVICE_UNAVAILABLE":                   5,
		"NETWORK_TIMEOUT":                       6,
		"REQUEST_NOT_SUPPORT":                   7,
		"BAD_REQUEST":                           100,
		"INVALID_USERID":                        101,
		"INVALID_PASSWORD":                      102,
		"RESOURCE_NOT_FOUND":                    200,
		"USER_NOT_FOUND":                        201,
		"ROLE_NOT_FOUND":                        202,
		"DEPARTMENT_NOT_FOUND":                  203,
		"ORGANIZATION_NOT_FOUND":                204,
		"POSITION_NOT_FOUND":                    205,
		"TENANT_NOT_FOUND":                      206,
		"PERMISSION_NOT_FOUND":                  207,
		"NOT_LOGGED_IN":                         300,
		"USER_FREEZE":                           301,
		"INCORRECT_PASSWORD":                    302,
		"ACCESS_FORBIDDEN":                      400,
		"PERMISSION_DENIED":                     401,
		"PERMISSION_TEMPLATE_INVALID":           500,
		"PERMISSION_TEMPLATE_DUPLICATE":         501,
		"PERMISSION_TEMPLATE_PARAM_INVALID":     502,
		"PERMISSION_TEMPLATE_NOT_FOUND":         510,
		"CONDITION_EXPRESSION_INVALID":          520,
		"CONDITION_EXPRESSION_SYNTAX_ERROR":     521,
		"CONDITION_EXPRESSION_EVALUATION_ERROR": 522,
		"PERMISSION_INHERITANCE_CYCLE":          530,
		"PERMISSION_INHERITANCE_DEPTH_EXCEEDED": 531,
		"DYNAMIC_PERMISSION_EVALUATION_FAILED":  540,
		"DYNAMIC_PERMISSION_CONTEXT_MISSING":    541,
		"PERMISSION_CACHE_ERROR":                550,
		"PERMISSION_CACHE_INCONSISTENCY":        551,
		"PERMISSION_CACHE_SYNC_FAILED":          552,
		"INVALID_SESSION":                       560,
		"SESSION_EXPIRED":                       561,
		"SESSION_LIMIT_EXCEEDED":                562,
		"SESSION_AUTHENTICATION_FAILED":         570,
		"SESSION_TOKEN_EXPIRED":                 571,
		"SESSION_TOKEN_INVALID":                 572,
		"SESSION_ACCESS_DENIED":                 575,
		"INVALID_CREDENTIALS":                   580,
		"INVALID_TOKEN":                         581,
		"INVALID_CAPTCHA":                       582,
		"CAPTCHA_EXPIRED":                       583,
		"TWO_FACTOR_REQUIRED":                   585,
		"TWO_FACTOR_FAILED":                     586,
		"ACCOUNT_LOCKED":                        590,
		"LOGIN_ATTEMPTS_EXCEEDED":               591,
		"IP_RESTRICTED":                         592,
	}
)

func (x UserErrorReason) Enum() *UserErrorReason {
	p := new(UserErrorReason)
	*p = x
	return p
}

func (x UserErrorReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserErrorReason) Descriptor() protoreflect.EnumDescriptor {
	return file_api_user_service_v1_user_error_proto_enumTypes[0].Descriptor()
}

func (UserErrorReason) Type() protoreflect.EnumType {
	return &file_api_user_service_v1_user_error_proto_enumTypes[0]
}

func (x UserErrorReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserErrorReason.Descriptor instead.
func (UserErrorReason) EnumDescriptor() ([]byte, []int) {
	return file_api_user_service_v1_user_error_proto_rawDescGZIP(), []int{0}
}

var File_api_user_service_v1_user_error_proto protoreflect.FileDescriptor

const file_api_user_service_v1_user_error_proto_rawDesc = "" +
	"\n" +
	"$api/user/service/v1/user_error.proto\x12\x13api.user.service.v1\x1a\x13errors/errors.proto*\xa6\x0e\n" +
	"\x0fUserErrorReason\x12\x1c\n" +
	"\x12METHOD_NOT_ALLOWED\x10\x00\x1a\x04\xa8E\x95\x03\x12\x19\n" +
	"\x0fREQUEST_TIMEOUT\x10\x01\x1a\x04\xa8E\x98\x03\x12\x1f\n" +
	"\x15INTERNAL_SERVER_ERROR\x10\x02\x1a\x04\xa8E\xf4\x03\x12\x19\n" +
	"\x0fNOT_IMPLEMENTED\x10\x03\x1a\x04\xa8E\xf5\x03\x12\x17\n" +
	"\rNETWORK_ERROR\x10\x04\x1a\x04\xa8E\xf6\x03\x12\x1d\n" +
	"\x13SERVICE_UNAVAILABLE\x10\x05\x1a\x04\xa8E\xf7\x03\x12\x19\n" +
	"\x0fNETWORK_TIMEOUT\x10\x06\x1a\x04\xa8E\xf8\x03\x12\x1d\n" +
	"\x13REQUEST_NOT_SUPPORT\x10\a\x1a\x04\xa8E\xf9\x03\x12\x15\n" +
	"\vBAD_REQUEST\x10d\x1a\x04\xa8E\x90\x03\x12\x18\n" +
	"\x0eINVALID_USERID\x10e\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x10INVALID_PASSWORD\x10f\x1a\x04\xa8E\x90\x03\x12\x1d\n" +
	"\x12RESOURCE_NOT_FOUND\x10\xc8\x01\x1a\x04\xa8E\x94\x03\x12\x19\n" +
	"\x0eUSER_NOT_FOUND\x10\xc9\x01\x1a\x04\xa8E\x94\x03\x12\x19\n" +
	"\x0eROLE_NOT_FOUND\x10\xca\x01\x1a\x04\xa8E\x94\x03\x12\x1f\n" +
	"\x14DEPARTMENT_NOT_FOUND\x10\xcb\x01\x1a\x04\xa8E\x94\x03\x12!\n" +
	"\x16ORGANIZATION_NOT_FOUND\x10\xcc\x01\x1a\x04\xa8E\x94\x03\x12\x1d\n" +
	"\x12POSITION_NOT_FOUND\x10\xcd\x01\x1a\x04\xa8E\x94\x03\x12\x1b\n" +
	"\x10TENANT_NOT_FOUND\x10\xce\x01\x1a\x04\xa8E\x94\x03\x12\x1f\n" +
	"\x14PERMISSION_NOT_FOUND\x10\xcf\x01\x1a\x04\xa8E\x94\x03\x12\x18\n" +
	"\rNOT_LOGGED_IN\x10\xac\x02\x1a\x04\xa8E\x91\x03\x12\x16\n" +
	"\vUSER_FREEZE\x10\xad\x02\x1a\x04\xa8E\x91\x03\x12\x1d\n" +
	"\x12INCORRECT_PASSWORD\x10\xae\x02\x1a\x04\xa8E\x91\x03\x12\x1b\n" +
	"\x10ACCESS_FORBIDDEN\x10\x90\x03\x1a\x04\xa8E\x93\x03\x12\x1c\n" +
	"\x11PERMISSION_DENIED\x10\x91\x03\x1a\x04\xa8E\x93\x03\x12&\n" +
	"\x1bPERMISSION_TEMPLATE_INVALID\x10\xf4\x03\x1a\x04\xa8E\x90\x03\x12(\n" +
	"\x1dPERMISSION_TEMPLATE_DUPLICATE\x10\xf5\x03\x1a\x04\xa8E\x90\x03\x12,\n" +
	"!PERMISSION_TEMPLATE_PARAM_INVALID\x10\xf6\x03\x1a\x04\xa8E\x90\x03\x12(\n" +
	"\x1dPERMISSION_TEMPLATE_NOT_FOUND\x10\xfe\x03\x1a\x04\xa8E\x94\x03\x12'\n" +
	"\x1cCONDITION_EXPRESSION_INVALID\x10\x88\x04\x1a\x04\xa8E\x90\x03\x12,\n" +
	"!CONDITION_EXPRESSION_SYNTAX_ERROR\x10\x89\x04\x1a\x04\xa8E\x90\x03\x120\n" +
	"%CONDITION_EXPRESSION_EVALUATION_ERROR\x10\x8a\x04\x1a\x04\xa8E\x90\x03\x12'\n" +
	"\x1cPERMISSION_INHERITANCE_CYCLE\x10\x92\x04\x1a\x04\xa8E\x90\x03\x120\n" +
	"%PERMISSION_INHERITANCE_DEPTH_EXCEEDED\x10\x93\x04\x1a\x04\xa8E\x90\x03\x12/\n" +
	"$DYNAMIC_PERMISSION_EVALUATION_FAILED\x10\x9c\x04\x1a\x04\xa8E\x93\x03\x12-\n" +
	"\"DYNAMIC_PERMISSION_CONTEXT_MISSING\x10\x9d\x04\x1a\x04\xa8E\x93\x03\x12!\n" +
	"\x16PERMISSION_CACHE_ERROR\x10\xa6\x04\x1a\x04\xa8E\xf4\x03\x12)\n" +
	"\x1ePERMISSION_CACHE_INCONSISTENCY\x10\xa7\x04\x1a\x04\xa8E\xf4\x03\x12'\n" +
	"\x1cPERMISSION_CACHE_SYNC_FAILED\x10\xa8\x04\x1a\x04\xa8E\xf4\x03\x12\x1a\n" +
	"\x0fINVALID_SESSION\x10\xb0\x04\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x0fSESSION_EXPIRED\x10\xb1\x04\x1a\x04\xa8E\x90\x03\x12!\n" +
	"\x16SESSION_LIMIT_EXCEEDED\x10\xb2\x04\x1a\x04\xa8E\x90\x03\x12(\n" +
	"\x1dSESSION_AUTHENTICATION_FAILED\x10\xba\x04\x1a\x04\xa8E\x91\x03\x12 \n" +
	"\x15SESSION_TOKEN_EXPIRED\x10\xbb\x04\x1a\x04\xa8E\x91\x03\x12 \n" +
	"\x15SESSION_TOKEN_INVALID\x10\xbc\x04\x1a\x04\xa8E\x91\x03\x12 \n" +
	"\x15SESSION_ACCESS_DENIED\x10\xbf\x04\x1a\x04\xa8E\x93\x03\x12\x1e\n" +
	"\x13INVALID_CREDENTIALS\x10\xc4\x04\x1a\x04\xa8E\x90\x03\x12\x18\n" +
	"\rINVALID_TOKEN\x10\xc5\x04\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x0fINVALID_CAPTCHA\x10\xc6\x04\x1a\x04\xa8E\x90\x03\x12\x1a\n" +
	"\x0fCAPTCHA_EXPIRED\x10\xc7\x04\x1a\x04\xa8E\x90\x03\x12\x1e\n" +
	"\x13TWO_FACTOR_REQUIRED\x10\xc9\x04\x1a\x04\xa8E\x91\x03\x12\x1c\n" +
	"\x11TWO_FACTOR_FAILED\x10\xca\x04\x1a\x04\xa8E\x91\x03\x12\x19\n" +
	"\x0eACCOUNT_LOCKED\x10\xce\x04\x1a\x04\xa8E\x93\x03\x12\"\n" +
	"\x17LOGIN_ATTEMPTS_EXCEEDED\x10\xcf\x04\x1a\x04\xa8E\x93\x03\x12\x18\n" +
	"\rIP_RESTRICTED\x10\xd0\x04\x1a\x04\xa8E\x93\x03\x1a\x04\xa0E\xf4\x03B;\n" +
	"\x13api.user.service.v1P\x01Z\"om-platform/api/user/service/v1;v1b\x06proto3"

var (
	file_api_user_service_v1_user_error_proto_rawDescOnce sync.Once
	file_api_user_service_v1_user_error_proto_rawDescData []byte
)

func file_api_user_service_v1_user_error_proto_rawDescGZIP() []byte {
	file_api_user_service_v1_user_error_proto_rawDescOnce.Do(func() {
		file_api_user_service_v1_user_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_user_service_v1_user_error_proto_rawDesc), len(file_api_user_service_v1_user_error_proto_rawDesc)))
	})
	return file_api_user_service_v1_user_error_proto_rawDescData
}

var file_api_user_service_v1_user_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_user_service_v1_user_error_proto_goTypes = []any{
	(UserErrorReason)(0), // 0: api.user.service.v1.UserErrorReason
}
var file_api_user_service_v1_user_error_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_api_user_service_v1_user_error_proto_init() }
func file_api_user_service_v1_user_error_proto_init() {
	if File_api_user_service_v1_user_error_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_user_service_v1_user_error_proto_rawDesc), len(file_api_user_service_v1_user_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_user_service_v1_user_error_proto_goTypes,
		DependencyIndexes: file_api_user_service_v1_user_error_proto_depIdxs,
		EnumInfos:         file_api_user_service_v1_user_error_proto_enumTypes,
	}.Build()
	File_api_user_service_v1_user_error_proto = out.File
	file_api_user_service_v1_user_error_proto_goTypes = nil
	file_api_user_service_v1_user_error_proto_depIdxs = nil
}
