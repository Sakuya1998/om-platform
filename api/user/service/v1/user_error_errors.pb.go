// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// =============================================
// 通用错误 (0-99)
// =============================================
func IsMethodNotAllowed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_METHOD_NOT_ALLOWED.String() && e.Code == 405
}

// =============================================
// 通用错误 (0-99)
// =============================================
func ErrorMethodNotAllowed(format string, args ...interface{}) *errors.Error {
	return errors.New(405, UserErrorReason_METHOD_NOT_ALLOWED.String(), fmt.Sprintf(format, args...))
}

// 请求超时
func IsRequestTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_REQUEST_TIMEOUT.String() && e.Code == 408
}

// 请求超时
func ErrorRequestTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(408, UserErrorReason_REQUEST_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 内部服务器错误
func IsInternalServerError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INTERNAL_SERVER_ERROR.String() && e.Code == 500
}

// 内部服务器错误
func ErrorInternalServerError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_INTERNAL_SERVER_ERROR.String(), fmt.Sprintf(format, args...))
}

// 未实现
func IsNotImplemented(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_NOT_IMPLEMENTED.String() && e.Code == 501
}

// 未实现
func ErrorNotImplemented(format string, args ...interface{}) *errors.Error {
	return errors.New(501, UserErrorReason_NOT_IMPLEMENTED.String(), fmt.Sprintf(format, args...))
}

// 网络错误
func IsNetworkError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_NETWORK_ERROR.String() && e.Code == 502
}

// 网络错误
func ErrorNetworkError(format string, args ...interface{}) *errors.Error {
	return errors.New(502, UserErrorReason_NETWORK_ERROR.String(), fmt.Sprintf(format, args...))
}

// 服务不可用
func IsServiceUnavailable(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SERVICE_UNAVAILABLE.String() && e.Code == 503
}

// 服务不可用
func ErrorServiceUnavailable(format string, args ...interface{}) *errors.Error {
	return errors.New(503, UserErrorReason_SERVICE_UNAVAILABLE.String(), fmt.Sprintf(format, args...))
}

// 网络超时
func IsNetworkTimeout(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_NETWORK_TIMEOUT.String() && e.Code == 504
}

// 网络超时
func ErrorNetworkTimeout(format string, args ...interface{}) *errors.Error {
	return errors.New(504, UserErrorReason_NETWORK_TIMEOUT.String(), fmt.Sprintf(format, args...))
}

// 请求不支持
func IsRequestNotSupport(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_REQUEST_NOT_SUPPORT.String() && e.Code == 505
}

// 请求不支持
func ErrorRequestNotSupport(format string, args ...interface{}) *errors.Error {
	return errors.New(505, UserErrorReason_REQUEST_NOT_SUPPORT.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 客户端错误 - 400 Bad Request (100-199)
// =============================================
func IsBadRequest(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_BAD_REQUEST.String() && e.Code == 400
}

// =============================================
// 客户端错误 - 400 Bad Request (100-199)
// =============================================
func ErrorBadRequest(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_BAD_REQUEST.String(), fmt.Sprintf(format, args...))
}

// 用户ID无效
func IsInvalidUserid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_USERID.String() && e.Code == 400
}

// 用户ID无效
func ErrorInvalidUserid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_INVALID_USERID.String(), fmt.Sprintf(format, args...))
}

// 密码无效
func IsInvalidPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_PASSWORD.String() && e.Code == 400
}

// 密码无效
func ErrorInvalidPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_INVALID_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 客户端错误 - 404 Not Found (200-299)
// =============================================
func IsResourceNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_RESOURCE_NOT_FOUND.String() && e.Code == 404
}

// =============================================
// 客户端错误 - 404 Not Found (200-299)
// =============================================
func ErrorResourceNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_RESOURCE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 用户不存在
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 用户不存在
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 角色不存在
func IsRoleNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ROLE_NOT_FOUND.String() && e.Code == 404
}

// 角色不存在
func ErrorRoleNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_ROLE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 部门不存在
func IsDepartmentNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_DEPARTMENT_NOT_FOUND.String() && e.Code == 404
}

// 部门不存在
func ErrorDepartmentNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_DEPARTMENT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 组织不存在
func IsOrganizationNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ORGANIZATION_NOT_FOUND.String() && e.Code == 404
}

// 组织不存在
func ErrorOrganizationNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_ORGANIZATION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 职位不存在
func IsPositionNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_POSITION_NOT_FOUND.String() && e.Code == 404
}

// 职位不存在
func ErrorPositionNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_POSITION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 租户不存在
func IsTenantNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_TENANT_NOT_FOUND.String() && e.Code == 404
}

// 租户不存在
func ErrorTenantNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_TENANT_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 权限不存在
func IsPermissionNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_NOT_FOUND.String() && e.Code == 404
}

// 权限不存在
func ErrorPermissionNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_PERMISSION_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 客户端错误 - 401 Unauthorized (300-399)
// =============================================
func IsNotLoggedIn(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_NOT_LOGGED_IN.String() && e.Code == 401
}

// =============================================
// 客户端错误 - 401 Unauthorized (300-399)
// =============================================
func ErrorNotLoggedIn(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_NOT_LOGGED_IN.String(), fmt.Sprintf(format, args...))
}

// 用户被冻结
func IsUserFreeze(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_USER_FREEZE.String() && e.Code == 401
}

// 用户被冻结
func ErrorUserFreeze(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_USER_FREEZE.String(), fmt.Sprintf(format, args...))
}

// 密码错误
func IsIncorrectPassword(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INCORRECT_PASSWORD.String() && e.Code == 401
}

// 密码错误
func ErrorIncorrectPassword(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_INCORRECT_PASSWORD.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 客户端错误 - 403 Forbidden (400-499)
// =============================================
func IsAccessForbidden(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ACCESS_FORBIDDEN.String() && e.Code == 403
}

// =============================================
// 客户端错误 - 403 Forbidden (400-499)
// =============================================
func ErrorAccessForbidden(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_ACCESS_FORBIDDEN.String(), fmt.Sprintf(format, args...))
}

// 权限不足
func IsPermissionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_DENIED.String() && e.Code == 403
}

// 权限不足
func ErrorPermissionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_PERMISSION_DENIED.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 权限模板相关错误 (500-599)
// =============================================
// 400 Bad Request
func IsPermissionTemplateInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_TEMPLATE_INVALID.String() && e.Code == 400
}

// =============================================
// 权限模板相关错误 (500-599)
// =============================================
// 400 Bad Request
func ErrorPermissionTemplateInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_PERMISSION_TEMPLATE_INVALID.String(), fmt.Sprintf(format, args...))
}

// 权限模板重复
func IsPermissionTemplateDuplicate(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_TEMPLATE_DUPLICATE.String() && e.Code == 400
}

// 权限模板重复
func ErrorPermissionTemplateDuplicate(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_PERMISSION_TEMPLATE_DUPLICATE.String(), fmt.Sprintf(format, args...))
}

// 权限模板参数无效
func IsPermissionTemplateParamInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_TEMPLATE_PARAM_INVALID.String() && e.Code == 400
}

// 权限模板参数无效
func ErrorPermissionTemplateParamInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_PERMISSION_TEMPLATE_PARAM_INVALID.String(), fmt.Sprintf(format, args...))
}

// 404 Not Found
func IsPermissionTemplateNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_TEMPLATE_NOT_FOUND.String() && e.Code == 404
}

// 404 Not Found
func ErrorPermissionTemplateNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, UserErrorReason_PERMISSION_TEMPLATE_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 条件表达式相关错误 (520-529)
// =============================================
// 400 Bad Request
func IsConditionExpressionInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_CONDITION_EXPRESSION_INVALID.String() && e.Code == 400
}

// =============================================
// 条件表达式相关错误 (520-529)
// =============================================
// 400 Bad Request
func ErrorConditionExpressionInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_CONDITION_EXPRESSION_INVALID.String(), fmt.Sprintf(format, args...))
}

// 条件表达式语法错误
func IsConditionExpressionSyntaxError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_CONDITION_EXPRESSION_SYNTAX_ERROR.String() && e.Code == 400
}

// 条件表达式语法错误
func ErrorConditionExpressionSyntaxError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_CONDITION_EXPRESSION_SYNTAX_ERROR.String(), fmt.Sprintf(format, args...))
}

// 条件表达式求值错误
func IsConditionExpressionEvaluationError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_CONDITION_EXPRESSION_EVALUATION_ERROR.String() && e.Code == 400
}

// 条件表达式求值错误
func ErrorConditionExpressionEvaluationError(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_CONDITION_EXPRESSION_EVALUATION_ERROR.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 权限继承相关错误 (530-539)
// =============================================
// 400 Bad Request
func IsPermissionInheritanceCycle(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_INHERITANCE_CYCLE.String() && e.Code == 400
}

// =============================================
// 权限继承相关错误 (530-539)
// =============================================
// 400 Bad Request
func ErrorPermissionInheritanceCycle(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_PERMISSION_INHERITANCE_CYCLE.String(), fmt.Sprintf(format, args...))
}

// 权限继承深度超限
func IsPermissionInheritanceDepthExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_INHERITANCE_DEPTH_EXCEEDED.String() && e.Code == 400
}

// 权限继承深度超限
func ErrorPermissionInheritanceDepthExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_PERMISSION_INHERITANCE_DEPTH_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 动态权限相关错误 (540-549)
// =============================================
// 403 Forbidden
func IsDynamicPermissionEvaluationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_DYNAMIC_PERMISSION_EVALUATION_FAILED.String() && e.Code == 403
}

// =============================================
// 动态权限相关错误 (540-549)
// =============================================
// 403 Forbidden
func ErrorDynamicPermissionEvaluationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_DYNAMIC_PERMISSION_EVALUATION_FAILED.String(), fmt.Sprintf(format, args...))
}

// 动态权限上下文缺失
func IsDynamicPermissionContextMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_DYNAMIC_PERMISSION_CONTEXT_MISSING.String() && e.Code == 403
}

// 动态权限上下文缺失
func ErrorDynamicPermissionContextMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_DYNAMIC_PERMISSION_CONTEXT_MISSING.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 权限缓存相关错误 (550-559)
// =============================================
// 500 Internal Server Error
func IsPermissionCacheError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_CACHE_ERROR.String() && e.Code == 500
}

// =============================================
// 权限缓存相关错误 (550-559)
// =============================================
// 500 Internal Server Error
func ErrorPermissionCacheError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_PERMISSION_CACHE_ERROR.String(), fmt.Sprintf(format, args...))
}

// 权限缓存数据不一致
func IsPermissionCacheInconsistency(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_CACHE_INCONSISTENCY.String() && e.Code == 500
}

// 权限缓存数据不一致
func ErrorPermissionCacheInconsistency(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_PERMISSION_CACHE_INCONSISTENCY.String(), fmt.Sprintf(format, args...))
}

// 权限缓存同步失败
func IsPermissionCacheSyncFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_PERMISSION_CACHE_SYNC_FAILED.String() && e.Code == 500
}

// 权限缓存同步失败
func ErrorPermissionCacheSyncFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserErrorReason_PERMISSION_CACHE_SYNC_FAILED.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 用户会话相关错误 (560-579)
// =============================================
// 400 Bad Request
func IsInvalidSession(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_SESSION.String() && e.Code == 400
}

// =============================================
// 用户会话相关错误 (560-579)
// =============================================
// 400 Bad Request
func ErrorInvalidSession(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_INVALID_SESSION.String(), fmt.Sprintf(format, args...))
}

// 会话已过期
func IsSessionExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SESSION_EXPIRED.String() && e.Code == 400
}

// 会话已过期
func ErrorSessionExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_SESSION_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 会话数量超限
func IsSessionLimitExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SESSION_LIMIT_EXCEEDED.String() && e.Code == 400
}

// 会话数量超限
func ErrorSessionLimitExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_SESSION_LIMIT_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

// 401 Unauthorized
func IsSessionAuthenticationFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SESSION_AUTHENTICATION_FAILED.String() && e.Code == 401
}

// 401 Unauthorized
func ErrorSessionAuthenticationFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_SESSION_AUTHENTICATION_FAILED.String(), fmt.Sprintf(format, args...))
}

// 会话令牌过期
func IsSessionTokenExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SESSION_TOKEN_EXPIRED.String() && e.Code == 401
}

// 会话令牌过期
func ErrorSessionTokenExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_SESSION_TOKEN_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 会话令牌无效
func IsSessionTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SESSION_TOKEN_INVALID.String() && e.Code == 401
}

// 会话令牌无效
func ErrorSessionTokenInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_SESSION_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
}

// 403 Forbidden
func IsSessionAccessDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_SESSION_ACCESS_DENIED.String() && e.Code == 403
}

// 403 Forbidden
func ErrorSessionAccessDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_SESSION_ACCESS_DENIED.String(), fmt.Sprintf(format, args...))
}

// =============================================
// 认证相关错误 (580-599)
// =============================================
// 400 Bad Request
func IsInvalidCredentials(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_CREDENTIALS.String() && e.Code == 400
}

// =============================================
// 认证相关错误 (580-599)
// =============================================
// 400 Bad Request
func ErrorInvalidCredentials(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_INVALID_CREDENTIALS.String(), fmt.Sprintf(format, args...))
}

// 无效的令牌
func IsInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_TOKEN.String() && e.Code == 400
}

// 无效的令牌
func ErrorInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}

// 无效的验证码
func IsInvalidCaptcha(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_INVALID_CAPTCHA.String() && e.Code == 400
}

// 无效的验证码
func ErrorInvalidCaptcha(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_INVALID_CAPTCHA.String(), fmt.Sprintf(format, args...))
}

// 验证码已过期
func IsCaptchaExpired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_CAPTCHA_EXPIRED.String() && e.Code == 400
}

// 验证码已过期
func ErrorCaptchaExpired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, UserErrorReason_CAPTCHA_EXPIRED.String(), fmt.Sprintf(format, args...))
}

// 401 Unauthorized
func IsTwoFactorRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_TWO_FACTOR_REQUIRED.String() && e.Code == 401
}

// 401 Unauthorized
func ErrorTwoFactorRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_TWO_FACTOR_REQUIRED.String(), fmt.Sprintf(format, args...))
}

// 双因素认证失败
func IsTwoFactorFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_TWO_FACTOR_FAILED.String() && e.Code == 401
}

// 双因素认证失败
func ErrorTwoFactorFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(401, UserErrorReason_TWO_FACTOR_FAILED.String(), fmt.Sprintf(format, args...))
}

// 403 Forbidden
func IsAccountLocked(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_ACCOUNT_LOCKED.String() && e.Code == 403
}

// 403 Forbidden
func ErrorAccountLocked(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_ACCOUNT_LOCKED.String(), fmt.Sprintf(format, args...))
}

// 登录尝试次数超限
func IsLoginAttemptsExceeded(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_LOGIN_ATTEMPTS_EXCEEDED.String() && e.Code == 403
}

// 登录尝试次数超限
func ErrorLoginAttemptsExceeded(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_LOGIN_ATTEMPTS_EXCEEDED.String(), fmt.Sprintf(format, args...))
}

// IP受限
func IsIpRestricted(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserErrorReason_IP_RESTRICTED.String() && e.Code == 403
}

// IP受限
func ErrorIpRestricted(format string, args ...interface{}) *errors.Error {
	return errors.New(403, UserErrorReason_IP_RESTRICTED.String(), fmt.Sprintf(format, args...))
}
