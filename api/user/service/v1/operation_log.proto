syntax = "proto3";

package api.user.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/field_mask.proto";

import "pkg/utils/pagination/v1/pagination.proto";

option go_package = "om-platform/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 操作日志服务
// 错误处理：所有接口在发生错误时将返回ErrorResponse结构，包含统一的错误码、错误消息和详细信息
service OperationLogService {
  // 查询操作日志列表
  rpc ListOperationLog (pkg.utils.pagination.v1.PagingRequest) returns (ListOperationLogResponse) {}

  // 查询操作日志详情
  rpc GetOperationLog (GetOperationLogRequest) returns (OperationLog) {}

  // 创建操作日志
  rpc CreateOperationLog (CreateOperationLogRequest) returns (google.protobuf.Empty) {}
  
  // 批量查询操作日志
  rpc BatchGetOperationLog (BatchGetOperationLogRequest) returns (BatchGetOperationLogResponse) {}
  
  // 查询用户操作日志
  rpc ListUserOperationLog (ListUserOperationLogRequest) returns (ListOperationLogResponse) {}
  
  // 查询租户操作日志
  rpc ListTenantOperationLog (ListTenantOperationLogRequest) returns (ListOperationLogResponse) {}
}

// 操作日志
message OperationLog {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "日志ID"}
  ];  // 日志ID

  optional uint32 operator_id = 2 [
    json_name = "operatorId",
    (gnostic.openapi.v3.property) = {description: "操作用户ID"}
  ];  // 操作用户ID
  
  optional string operator_name = 3 [
    json_name = "operatorName",
    (gnostic.openapi.v3.property) = {description: "操作用户名称"}
  ];  // 操作用户名称
  
  optional uint32 tenant_id = 4 [
    json_name = "tenantId",
    (gnostic.openapi.v3.property) = {description: "所属租户ID"}
  ];  // 所属租户ID
  
  optional string client_ip = 5 [
    json_name = "clientIp",
    (gnostic.openapi.v3.property) = {description: "客户端IP地址"}
  ];  // 客户端IP地址
  
  optional string user_agent = 6 [
    json_name = "userAgent",
    (gnostic.openapi.v3.property) = {description: "用户代理信息"}
  ];  // 用户代理信息
  
  optional string operation_type = 7 [
    json_name = "operationType",
    (gnostic.openapi.v3.property) = {
      description: "操作类型",
      enum: [
        {yaml: "USER_CREATE"}, 
        {yaml: "USER_UPDATE"}, 
        {yaml: "USER_DELETE"}, 
        {yaml: "USER_ROLE_ASSIGN"}, 
        {yaml: "USER_ROLE_REVOKE"},
        {yaml: "USER_GROUP_CREATE"},
        {yaml: "USER_GROUP_UPDATE"},
        {yaml: "USER_GROUP_DELETE"},
        {yaml: "USER_GROUP_MEMBER_ADD"},
        {yaml: "USER_GROUP_MEMBER_REMOVE"},
        {yaml: "TENANT_CREATE"},
        {yaml: "TENANT_UPDATE"},
        {yaml: "TENANT_DELETE"},
        {yaml: "TENANT_QUOTA_UPDATE"},
        {yaml: "ORGANIZATION_CREATE"},
        {yaml: "ORGANIZATION_UPDATE"},
        {yaml: "ORGANIZATION_DELETE"},
        {yaml: "PERMISSION_CREATE"},
        {yaml: "PERMISSION_UPDATE"},
        {yaml: "PERMISSION_DELETE"},
        {yaml: "PERMISSION_ASSIGN"},
        {yaml: "PERMISSION_REVOKE"},
        {yaml: "PERMISSION_TEMPLATE_CREATE"},
        {yaml: "PERMISSION_TEMPLATE_APPLY"},
        {yaml: "PERMISSION_CACHE_CLEAR"},
        {yaml: "PERMISSION_CONFIG_EXPORT"},
        {yaml: "PERMISSION_CONFIG_IMPORT"},
        {yaml: "ROLE_CREATE"},
        {yaml: "ROLE_UPDATE"},
        {yaml: "ROLE_DELETE"},
        {yaml: "ROLE_TEMPORARY_CREATE"},
        {yaml: "ROLE_DYNAMIC_CREATE"},
        {yaml: "ROLE_TEMPLATE_APPLY"}
      ]
    }
  ];  // 操作类型
  
  optional string resource_type = 14 [
    json_name = "resourceType",
    (gnostic.openapi.v3.property) = {
      description: "资源类型",
      enum: [
        {yaml: "USER"}, 
        {yaml: "ROLE"}, 
        {yaml: "USER_GROUP"}, 
        {yaml: "TENANT"}, 
        {yaml: "ORGANIZATION"},
        {yaml: "POSITION"},
        {yaml: "PERMISSION"},
        {yaml: "PERMISSION_TEMPLATE"}
      ]
    }
  ];  // 资源类型
  
  optional uint32 resource_id = 15 [
    json_name = "resourceId",
    (gnostic.openapi.v3.property) = {description: "资源ID"}
  ];  // 资源ID
  
  optional string ip_address = 8 [
    json_name = "ipAddress",
    (gnostic.openapi.v3.property) = {description: "IP地址"}
  ];  // IP地址
  
  optional string operation_content = 10 [
    json_name = "operationContent",
    (gnostic.openapi.v3.property) = {description: "操作内容"}
  ];  // 操作内容
  
  optional string status = 11 [
    json_name = "status",
    (gnostic.openapi.v3.property) = {
      description: "操作状态",
      enum: [{yaml: "SUCCESS"}, {yaml: "FAILED"}]
    }
  ];  // 操作状态
  
  optional string error_message = 12 [
    json_name = "errorMessage",
    (gnostic.openapi.v3.property) = {description: "错误信息"}
  ];  // 错误信息

  optional google.protobuf.Timestamp operation_time = 13 [
    json_name = "operationTime",
    (gnostic.openapi.v3.property) = {description: "操作时间"}
  ];  // 操作时间
  
  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
}

// 操作日志列表 - 响应
message ListOperationLogResponse {
  repeated OperationLog items = 1;
  uint32 total = 2;
}

// 操作日志详情 - 请求
message GetOperationLogRequest {
  uint32 id = 1;
}

// 创建操作日志 - 请求
message CreateOperationLogRequest {
  OperationLog data = 1;
}

// 批量查询操作日志 - 请求
message BatchGetOperationLogRequest {
  repeated uint32 ids = 1;
}

// 批量查询操作日志 - 响应
message BatchGetOperationLogResponse {
  repeated OperationLog items = 1;
}

// 查询用户操作日志 - 请求
message ListUserOperationLogRequest {
  uint32 user_id = 1 [json_name = "userId"];
  pkg.utils.pagination.v1.PagingRequest paging = 2;
  
  optional google.protobuf.Timestamp start_time = 3 [json_name = "startTime"];
  optional google.protobuf.Timestamp end_time = 4 [json_name = "endTime"];
  optional string operation_type = 5 [json_name = "operationType"];
}

// 查询租户操作日志 - 请求
message ListTenantOperationLogRequest {
  uint32 tenant_id = 1 [json_name = "tenantId"];
  pkg.utils.pagination.v1.PagingRequest paging = 2;
  
  optional google.protobuf.Timestamp start_time = 3 [json_name = "startTime"];
  optional google.protobuf.Timestamp end_time = 4 [json_name = "endTime"];
  optional string operation_type = 5 [json_name = "operationType"];
  optional uint32 operator_id = 6 [json_name = "operatorId"];
}