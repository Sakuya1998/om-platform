syntax = "proto3";

package api.user.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pkg/utils/pagination/v1/pagination.proto";

option go_package = "om-platform/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 用户组服务
service UserGroupService {
  // 查询用户组列表
  rpc ListUserGroup (pkg.utils.pagination.v1.PagingRequest) returns (ListUserGroupResponse) {}

  // 查询用户组详情
  rpc GetUserGroup (GetUserGroupRequest) returns (UserGroup) {}

  // 创建用户组
  rpc CreateUserGroup (CreateUserGroupRequest) returns (google.protobuf.Empty) {}

  // 更新用户组
  rpc UpdateUserGroup (UpdateUserGroupRequest) returns (google.protobuf.Empty) {}

  // 删除用户组
  rpc DeleteUserGroup (DeleteUserGroupRequest) returns (google.protobuf.Empty) {}
  
  // 获取用户组成员列表
  rpc ListUserGroupMembers (ListUserGroupMembersRequest) returns (ListUserGroupMembersResponse) {}
  
  // 添加用户组成员
  rpc AddUserGroupMembers (AddUserGroupMembersRequest) returns (google.protobuf.Empty) {}
  
  // 移除用户组成员
  rpc RemoveUserGroupMembers (RemoveUserGroupMembersRequest) returns (google.protobuf.Empty) {}
}

// 用户组
message UserGroup {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "用户组ID"}
  ];  // 用户组ID

  optional string name = 2 [
    json_name = "name",
    (gnostic.openapi.v3.property) = {description: "用户组名称"}
  ];  // 用户组名称
  
  optional string code = 3 [
    json_name = "code",
    (gnostic.openapi.v3.property) = {description: "用户组编码"}
  ];  // 用户组编码
  
  optional uint32 tenant_id = 4 [
    json_name = "tenantId",
    (gnostic.openapi.v3.property) = {description: "所属租户ID"}
  ];  // 所属租户ID
  
  optional int32 member_count = 5 [
    json_name = "memberCount",
    (gnostic.openapi.v3.property) = {description: "成员数量"}
  ];  // 成员数量

  optional string status = 6 [(gnostic.openapi.v3.property) = {
    description: "状态"
    default: { string: "ON" }
    enum: [{yaml: "ON"}, {yaml: "OFF"}]
  }];  // 状态

  optional string remark = 7 [
    json_name = "remark",
    (gnostic.openapi.v3.property) = {
      description: "备注"
    }
  ]; // 备注

  optional uint32 create_by = 8 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 9 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 用户组列表 - 响应
message ListUserGroupResponse {
  repeated UserGroup items = 1;
  uint32 total = 2;
}

// 用户组详情 - 请求
message GetUserGroupRequest {
  uint32 id = 1;
}

// 创建用户组 - 请求
message CreateUserGroupRequest {
  UserGroup data = 1;

  optional uint32 operator_id = 2 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
}

// 更新用户组 - 请求
message UpdateUserGroupRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  UserGroup data = 2;

  google.protobuf.FieldMask update_mask = 3 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,name,code"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 4 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 删除用户组 - 请求
message DeleteUserGroupRequest {
  uint32 id = 1;

  optional uint32 operator_id = 2 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
}

// 用户组成员列表 - 请求
message ListUserGroupMembersRequest {
  uint32 group_id = 1 [json_name = "groupId"];
  pkg.utils.pagination.v1.PagingRequest paging = 2;
}

// 用户组成员列表 - 响应
message ListUserGroupMembersResponse {
  repeated UserGroupMember items = 1;
  uint32 total = 2;
}

// 用户组成员
message UserGroupMember {
  optional uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  optional string user_name = 2 [json_name = "userName", (gnostic.openapi.v3.property) = {description: "用户名"}];
  optional string real_name = 3 [json_name = "realName", (gnostic.openapi.v3.property) = {description: "真实姓名"}];
  optional string email = 4 [json_name = "email", (gnostic.openapi.v3.property) = {description: "邮箱"}];
  optional string phone = 5 [json_name = "phone", (gnostic.openapi.v3.property) = {description: "手机号"}];
  optional google.protobuf.Timestamp join_time = 6 [json_name = "joinTime", (gnostic.openapi.v3.property) = {description: "加入时间"}];
}

// 添加用户组成员 - 请求
message AddUserGroupMembersRequest {
  uint32 group_id = 1 [json_name = "groupId"];
  repeated uint32 user_ids = 2 [json_name = "userIds"];
  
  optional uint32 operator_id = 3 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
}

// 移除用户组成员 - 请求
message RemoveUserGroupMembersRequest {
  uint32 group_id = 1 [json_name = "groupId"];
  repeated uint32 user_ids = 2 [json_name = "userIds"];
  
  optional uint32 operator_id = 3 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
}