// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/user/service/v1/session.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SessionService_CreateSession_FullMethodName          = "/api.user.service.v1.SessionService/CreateSession"
	SessionService_GetSession_FullMethodName             = "/api.user.service.v1.SessionService/GetSession"
	SessionService_UpdateSession_FullMethodName          = "/api.user.service.v1.SessionService/UpdateSession"
	SessionService_DeleteSession_FullMethodName          = "/api.user.service.v1.SessionService/DeleteSession"
	SessionService_ListSessions_FullMethodName           = "/api.user.service.v1.SessionService/ListSessions"
	SessionService_ValidateSession_FullMethodName        = "/api.user.service.v1.SessionService/ValidateSession"
	SessionService_ExtendSession_FullMethodName          = "/api.user.service.v1.SessionService/ExtendSession"
	SessionService_GetSessionStats_FullMethodName        = "/api.user.service.v1.SessionService/GetSessionStats"
	SessionService_ForceTerminateSession_FullMethodName  = "/api.user.service.v1.SessionService/ForceTerminateSession"
	SessionService_BatchTerminateSessions_FullMethodName = "/api.user.service.v1.SessionService/BatchTerminateSessions"
	SessionService_GetSessionActivityLogs_FullMethodName = "/api.user.service.v1.SessionService/GetSessionActivityLogs"
	SessionService_SetSessionAttribute_FullMethodName    = "/api.user.service.v1.SessionService/SetSessionAttribute"
	SessionService_GetSessionAttribute_FullMethodName    = "/api.user.service.v1.SessionService/GetSessionAttribute"
	SessionService_DeleteSessionAttribute_FullMethodName = "/api.user.service.v1.SessionService/DeleteSessionAttribute"
)

// SessionServiceClient is the client API for SessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 会话管理服务
// 提供更细粒度的会话管理功能，与AuthService配合使用
type SessionServiceClient interface {
	// 创建会话
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// 获取会话详情
	GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*SessionInfo, error)
	// 更新会话
	UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除会话
	DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 查询会话列表
	ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error)
	// 验证会话有效性
	ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error)
	// 延长会话有效期
	ExtendSession(ctx context.Context, in *ExtendSessionRequest, opts ...grpc.CallOption) (*ExtendSessionResponse, error)
	// 获取会话统计信息
	GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error)
	// 强制终止会话
	ForceTerminateSession(ctx context.Context, in *ForceTerminateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 批量终止会话
	BatchTerminateSessions(ctx context.Context, in *BatchTerminateSessionsRequest, opts ...grpc.CallOption) (*BatchTerminateSessionsResponse, error)
	// 获取会话活动日志
	GetSessionActivityLogs(ctx context.Context, in *GetSessionActivityLogsRequest, opts ...grpc.CallOption) (*GetSessionActivityLogsResponse, error)
	// 设置会话属性
	SetSessionAttribute(ctx context.Context, in *SetSessionAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 获取会话属性
	GetSessionAttribute(ctx context.Context, in *GetSessionAttributeRequest, opts ...grpc.CallOption) (*GetSessionAttributeResponse, error)
	// 删除会话属性
	DeleteSessionAttribute(ctx context.Context, in *DeleteSessionAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionServiceClient(cc grpc.ClientConnInterface) SessionServiceClient {
	return &sessionServiceClient{cc}
}

func (c *sessionServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetSession(ctx context.Context, in *GetSessionRequest, opts ...grpc.CallOption) (*SessionInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SessionInfo)
	err := c.cc.Invoke(ctx, SessionService_GetSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) UpdateSession(ctx context.Context, in *UpdateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionService_UpdateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) DeleteSession(ctx context.Context, in *DeleteSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionService_DeleteSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ListSessions(ctx context.Context, in *ListSessionsRequest, opts ...grpc.CallOption) (*ListSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListSessionsResponse)
	err := c.cc.Invoke(ctx, SessionService_ListSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ValidateSession(ctx context.Context, in *ValidateSessionRequest, opts ...grpc.CallOption) (*ValidateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_ValidateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ExtendSession(ctx context.Context, in *ExtendSessionRequest, opts ...grpc.CallOption) (*ExtendSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExtendSessionResponse)
	err := c.cc.Invoke(ctx, SessionService_ExtendSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionStatsResponse)
	err := c.cc.Invoke(ctx, SessionService_GetSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) ForceTerminateSession(ctx context.Context, in *ForceTerminateSessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionService_ForceTerminateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) BatchTerminateSessions(ctx context.Context, in *BatchTerminateSessionsRequest, opts ...grpc.CallOption) (*BatchTerminateSessionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchTerminateSessionsResponse)
	err := c.cc.Invoke(ctx, SessionService_BatchTerminateSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetSessionActivityLogs(ctx context.Context, in *GetSessionActivityLogsRequest, opts ...grpc.CallOption) (*GetSessionActivityLogsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionActivityLogsResponse)
	err := c.cc.Invoke(ctx, SessionService_GetSessionActivityLogs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) SetSessionAttribute(ctx context.Context, in *SetSessionAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionService_SetSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) GetSessionAttribute(ctx context.Context, in *GetSessionAttributeRequest, opts ...grpc.CallOption) (*GetSessionAttributeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionAttributeResponse)
	err := c.cc.Invoke(ctx, SessionService_GetSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionServiceClient) DeleteSessionAttribute(ctx context.Context, in *DeleteSessionAttributeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SessionService_DeleteSessionAttribute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServiceServer is the server API for SessionService service.
// All implementations must embed UnimplementedSessionServiceServer
// for forward compatibility.
//
// 会话管理服务
// 提供更细粒度的会话管理功能，与AuthService配合使用
type SessionServiceServer interface {
	// 创建会话
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// 获取会话详情
	GetSession(context.Context, *GetSessionRequest) (*SessionInfo, error)
	// 更新会话
	UpdateSession(context.Context, *UpdateSessionRequest) (*emptypb.Empty, error)
	// 删除会话
	DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error)
	// 查询会话列表
	ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error)
	// 验证会话有效性
	ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error)
	// 延长会话有效期
	ExtendSession(context.Context, *ExtendSessionRequest) (*ExtendSessionResponse, error)
	// 获取会话统计信息
	GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error)
	// 强制终止会话
	ForceTerminateSession(context.Context, *ForceTerminateSessionRequest) (*emptypb.Empty, error)
	// 批量终止会话
	BatchTerminateSessions(context.Context, *BatchTerminateSessionsRequest) (*BatchTerminateSessionsResponse, error)
	// 获取会话活动日志
	GetSessionActivityLogs(context.Context, *GetSessionActivityLogsRequest) (*GetSessionActivityLogsResponse, error)
	// 设置会话属性
	SetSessionAttribute(context.Context, *SetSessionAttributeRequest) (*emptypb.Empty, error)
	// 获取会话属性
	GetSessionAttribute(context.Context, *GetSessionAttributeRequest) (*GetSessionAttributeResponse, error)
	// 删除会话属性
	DeleteSessionAttribute(context.Context, *DeleteSessionAttributeRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSessionServiceServer()
}

// UnimplementedSessionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSessionServiceServer struct{}

func (UnimplementedSessionServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedSessionServiceServer) GetSession(context.Context, *GetSessionRequest) (*SessionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionServiceServer) UpdateSession(context.Context, *UpdateSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSession not implemented")
}
func (UnimplementedSessionServiceServer) DeleteSession(context.Context, *DeleteSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSession not implemented")
}
func (UnimplementedSessionServiceServer) ListSessions(context.Context, *ListSessionsRequest) (*ListSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSessions not implemented")
}
func (UnimplementedSessionServiceServer) ValidateSession(context.Context, *ValidateSessionRequest) (*ValidateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateSession not implemented")
}
func (UnimplementedSessionServiceServer) ExtendSession(context.Context, *ExtendSessionRequest) (*ExtendSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSession not implemented")
}
func (UnimplementedSessionServiceServer) GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionStats not implemented")
}
func (UnimplementedSessionServiceServer) ForceTerminateSession(context.Context, *ForceTerminateSessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceTerminateSession not implemented")
}
func (UnimplementedSessionServiceServer) BatchTerminateSessions(context.Context, *BatchTerminateSessionsRequest) (*BatchTerminateSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchTerminateSessions not implemented")
}
func (UnimplementedSessionServiceServer) GetSessionActivityLogs(context.Context, *GetSessionActivityLogsRequest) (*GetSessionActivityLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionActivityLogs not implemented")
}
func (UnimplementedSessionServiceServer) SetSessionAttribute(context.Context, *SetSessionAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSessionAttribute not implemented")
}
func (UnimplementedSessionServiceServer) GetSessionAttribute(context.Context, *GetSessionAttributeRequest) (*GetSessionAttributeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionAttribute not implemented")
}
func (UnimplementedSessionServiceServer) DeleteSessionAttribute(context.Context, *DeleteSessionAttributeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSessionAttribute not implemented")
}
func (UnimplementedSessionServiceServer) mustEmbedUnimplementedSessionServiceServer() {}
func (UnimplementedSessionServiceServer) testEmbeddedByValue()                        {}

// UnsafeSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServiceServer will
// result in compilation errors.
type UnsafeSessionServiceServer interface {
	mustEmbedUnimplementedSessionServiceServer()
}

func RegisterSessionServiceServer(s grpc.ServiceRegistrar, srv SessionServiceServer) {
	// If the following call pancis, it indicates UnimplementedSessionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SessionService_ServiceDesc, srv)
}

func _SessionService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetSession(ctx, req.(*GetSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_UpdateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).UpdateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_UpdateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).UpdateSession(ctx, req.(*UpdateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_DeleteSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).DeleteSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_DeleteSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).DeleteSession(ctx, req.(*DeleteSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ListSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ListSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ListSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ListSessions(ctx, req.(*ListSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ValidateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ValidateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ValidateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ValidateSession(ctx, req.(*ValidateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ExtendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ExtendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ExtendSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ExtendSession(ctx, req.(*ExtendSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetSessionStats(ctx, req.(*GetSessionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_ForceTerminateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceTerminateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).ForceTerminateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_ForceTerminateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).ForceTerminateSession(ctx, req.(*ForceTerminateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_BatchTerminateSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchTerminateSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).BatchTerminateSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_BatchTerminateSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).BatchTerminateSessions(ctx, req.(*BatchTerminateSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetSessionActivityLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionActivityLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetSessionActivityLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetSessionActivityLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetSessionActivityLogs(ctx, req.(*GetSessionActivityLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_SetSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).SetSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_SetSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).SetSessionAttribute(ctx, req.(*SetSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_GetSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).GetSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_GetSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).GetSessionAttribute(ctx, req.(*GetSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionService_DeleteSessionAttribute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSessionAttributeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServiceServer).DeleteSessionAttribute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionService_DeleteSessionAttribute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServiceServer).DeleteSessionAttribute(ctx, req.(*DeleteSessionAttributeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionService_ServiceDesc is the grpc.ServiceDesc for SessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.SessionService",
	HandlerType: (*SessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _SessionService_CreateSession_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _SessionService_GetSession_Handler,
		},
		{
			MethodName: "UpdateSession",
			Handler:    _SessionService_UpdateSession_Handler,
		},
		{
			MethodName: "DeleteSession",
			Handler:    _SessionService_DeleteSession_Handler,
		},
		{
			MethodName: "ListSessions",
			Handler:    _SessionService_ListSessions_Handler,
		},
		{
			MethodName: "ValidateSession",
			Handler:    _SessionService_ValidateSession_Handler,
		},
		{
			MethodName: "ExtendSession",
			Handler:    _SessionService_ExtendSession_Handler,
		},
		{
			MethodName: "GetSessionStats",
			Handler:    _SessionService_GetSessionStats_Handler,
		},
		{
			MethodName: "ForceTerminateSession",
			Handler:    _SessionService_ForceTerminateSession_Handler,
		},
		{
			MethodName: "BatchTerminateSessions",
			Handler:    _SessionService_BatchTerminateSessions_Handler,
		},
		{
			MethodName: "GetSessionActivityLogs",
			Handler:    _SessionService_GetSessionActivityLogs_Handler,
		},
		{
			MethodName: "SetSessionAttribute",
			Handler:    _SessionService_SetSessionAttribute_Handler,
		},
		{
			MethodName: "GetSessionAttribute",
			Handler:    _SessionService_GetSessionAttribute_Handler,
		},
		{
			MethodName: "DeleteSessionAttribute",
			Handler:    _SessionService_DeleteSessionAttribute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/service/v1/session.proto",
}
