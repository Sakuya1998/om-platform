// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: api/user/service/v1/user_analytics.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserAnalyticsService_GetUserActivityStats_FullMethodName     = "/api.user.service.v1.UserAnalyticsService/GetUserActivityStats"
	UserAnalyticsService_GetUserBehaviorAnalysis_FullMethodName  = "/api.user.service.v1.UserAnalyticsService/GetUserBehaviorAnalysis"
	UserAnalyticsService_GetUserGrowthTrend_FullMethodName       = "/api.user.service.v1.UserAnalyticsService/GetUserGrowthTrend"
	UserAnalyticsService_GetUserDistributionStats_FullMethodName = "/api.user.service.v1.UserAnalyticsService/GetUserDistributionStats"
	UserAnalyticsService_GetUserRetentionAnalysis_FullMethodName = "/api.user.service.v1.UserAnalyticsService/GetUserRetentionAnalysis"
	UserAnalyticsService_GetUserRoleDistribution_FullMethodName  = "/api.user.service.v1.UserAnalyticsService/GetUserRoleDistribution"
	UserAnalyticsService_GetUserPermissionUsage_FullMethodName   = "/api.user.service.v1.UserAnalyticsService/GetUserPermissionUsage"
	UserAnalyticsService_GetUserOperationLogStats_FullMethodName = "/api.user.service.v1.UserAnalyticsService/GetUserOperationLogStats"
	UserAnalyticsService_BatchGetUserStats_FullMethodName        = "/api.user.service.v1.UserAnalyticsService/BatchGetUserStats"
	UserAnalyticsService_ExportUserStatsReport_FullMethodName    = "/api.user.service.v1.UserAnalyticsService/ExportUserStatsReport"
	UserAnalyticsService_BatchProcessUsers_FullMethodName        = "/api.user.service.v1.UserAnalyticsService/BatchProcessUsers"
	UserAnalyticsService_BatchImportUsers_FullMethodName         = "/api.user.service.v1.UserAnalyticsService/BatchImportUsers"
	UserAnalyticsService_BatchExportUsers_FullMethodName         = "/api.user.service.v1.UserAnalyticsService/BatchExportUsers"
)

// UserAnalyticsServiceClient is the client API for UserAnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 用户统计分析服务
type UserAnalyticsServiceClient interface {
	// 获取用户活跃度统计
	GetUserActivityStats(ctx context.Context, in *GetUserActivityStatsRequest, opts ...grpc.CallOption) (*GetUserActivityStatsResponse, error)
	// 获取用户行为分析
	GetUserBehaviorAnalysis(ctx context.Context, in *GetUserBehaviorAnalysisRequest, opts ...grpc.CallOption) (*GetUserBehaviorAnalysisResponse, error)
	// 获取用户增长趋势
	GetUserGrowthTrend(ctx context.Context, in *GetUserGrowthTrendRequest, opts ...grpc.CallOption) (*GetUserGrowthTrendResponse, error)
	// 获取用户分布统计
	GetUserDistributionStats(ctx context.Context, in *GetUserDistributionStatsRequest, opts ...grpc.CallOption) (*GetUserDistributionStatsResponse, error)
	// 获取用户留存分析
	GetUserRetentionAnalysis(ctx context.Context, in *GetUserRetentionAnalysisRequest, opts ...grpc.CallOption) (*GetUserRetentionAnalysisResponse, error)
	// 获取用户角色分布
	GetUserRoleDistribution(ctx context.Context, in *GetUserRoleDistributionRequest, opts ...grpc.CallOption) (*GetUserRoleDistributionResponse, error)
	// 获取用户权限使用情况
	GetUserPermissionUsage(ctx context.Context, in *GetUserPermissionUsageRequest, opts ...grpc.CallOption) (*GetUserPermissionUsageResponse, error)
	// 获取用户操作日志统计
	GetUserOperationLogStats(ctx context.Context, in *GetUserOperationLogStatsRequest, opts ...grpc.CallOption) (*GetUserOperationLogStatsResponse, error)
	// 批量获取用户统计数据
	BatchGetUserStats(ctx context.Context, in *BatchGetUserStatsRequest, opts ...grpc.CallOption) (*BatchGetUserStatsResponse, error)
	// 导出用户统计报告
	ExportUserStatsReport(ctx context.Context, in *ExportUserStatsReportRequest, opts ...grpc.CallOption) (*ExportUserStatsReportResponse, error)
	// 批量操作用户
	BatchProcessUsers(ctx context.Context, in *BatchProcessUsersRequest, opts ...grpc.CallOption) (*BatchProcessUsersResponse, error)
	// 批量导入用户
	BatchImportUsers(ctx context.Context, in *BatchImportUsersRequest, opts ...grpc.CallOption) (*BatchImportUsersResponse, error)
	// 批量导出用户
	BatchExportUsers(ctx context.Context, in *BatchExportUsersRequest, opts ...grpc.CallOption) (*BatchExportUsersResponse, error)
}

type userAnalyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAnalyticsServiceClient(cc grpc.ClientConnInterface) UserAnalyticsServiceClient {
	return &userAnalyticsServiceClient{cc}
}

func (c *userAnalyticsServiceClient) GetUserActivityStats(ctx context.Context, in *GetUserActivityStatsRequest, opts ...grpc.CallOption) (*GetUserActivityStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserActivityStatsResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserActivityStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserBehaviorAnalysis(ctx context.Context, in *GetUserBehaviorAnalysisRequest, opts ...grpc.CallOption) (*GetUserBehaviorAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserBehaviorAnalysisResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserBehaviorAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserGrowthTrend(ctx context.Context, in *GetUserGrowthTrendRequest, opts ...grpc.CallOption) (*GetUserGrowthTrendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserGrowthTrendResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserGrowthTrend_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserDistributionStats(ctx context.Context, in *GetUserDistributionStatsRequest, opts ...grpc.CallOption) (*GetUserDistributionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserDistributionStatsResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserDistributionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserRetentionAnalysis(ctx context.Context, in *GetUserRetentionAnalysisRequest, opts ...grpc.CallOption) (*GetUserRetentionAnalysisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRetentionAnalysisResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserRetentionAnalysis_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserRoleDistribution(ctx context.Context, in *GetUserRoleDistributionRequest, opts ...grpc.CallOption) (*GetUserRoleDistributionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserRoleDistributionResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserRoleDistribution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserPermissionUsage(ctx context.Context, in *GetUserPermissionUsageRequest, opts ...grpc.CallOption) (*GetUserPermissionUsageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserPermissionUsageResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserPermissionUsage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) GetUserOperationLogStats(ctx context.Context, in *GetUserOperationLogStatsRequest, opts ...grpc.CallOption) (*GetUserOperationLogStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserOperationLogStatsResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_GetUserOperationLogStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) BatchGetUserStats(ctx context.Context, in *BatchGetUserStatsRequest, opts ...grpc.CallOption) (*BatchGetUserStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchGetUserStatsResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_BatchGetUserStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) ExportUserStatsReport(ctx context.Context, in *ExportUserStatsReportRequest, opts ...grpc.CallOption) (*ExportUserStatsReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ExportUserStatsReportResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_ExportUserStatsReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) BatchProcessUsers(ctx context.Context, in *BatchProcessUsersRequest, opts ...grpc.CallOption) (*BatchProcessUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchProcessUsersResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_BatchProcessUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) BatchImportUsers(ctx context.Context, in *BatchImportUsersRequest, opts ...grpc.CallOption) (*BatchImportUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchImportUsersResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_BatchImportUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAnalyticsServiceClient) BatchExportUsers(ctx context.Context, in *BatchExportUsersRequest, opts ...grpc.CallOption) (*BatchExportUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchExportUsersResponse)
	err := c.cc.Invoke(ctx, UserAnalyticsService_BatchExportUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAnalyticsServiceServer is the server API for UserAnalyticsService service.
// All implementations must embed UnimplementedUserAnalyticsServiceServer
// for forward compatibility.
//
// 用户统计分析服务
type UserAnalyticsServiceServer interface {
	// 获取用户活跃度统计
	GetUserActivityStats(context.Context, *GetUserActivityStatsRequest) (*GetUserActivityStatsResponse, error)
	// 获取用户行为分析
	GetUserBehaviorAnalysis(context.Context, *GetUserBehaviorAnalysisRequest) (*GetUserBehaviorAnalysisResponse, error)
	// 获取用户增长趋势
	GetUserGrowthTrend(context.Context, *GetUserGrowthTrendRequest) (*GetUserGrowthTrendResponse, error)
	// 获取用户分布统计
	GetUserDistributionStats(context.Context, *GetUserDistributionStatsRequest) (*GetUserDistributionStatsResponse, error)
	// 获取用户留存分析
	GetUserRetentionAnalysis(context.Context, *GetUserRetentionAnalysisRequest) (*GetUserRetentionAnalysisResponse, error)
	// 获取用户角色分布
	GetUserRoleDistribution(context.Context, *GetUserRoleDistributionRequest) (*GetUserRoleDistributionResponse, error)
	// 获取用户权限使用情况
	GetUserPermissionUsage(context.Context, *GetUserPermissionUsageRequest) (*GetUserPermissionUsageResponse, error)
	// 获取用户操作日志统计
	GetUserOperationLogStats(context.Context, *GetUserOperationLogStatsRequest) (*GetUserOperationLogStatsResponse, error)
	// 批量获取用户统计数据
	BatchGetUserStats(context.Context, *BatchGetUserStatsRequest) (*BatchGetUserStatsResponse, error)
	// 导出用户统计报告
	ExportUserStatsReport(context.Context, *ExportUserStatsReportRequest) (*ExportUserStatsReportResponse, error)
	// 批量操作用户
	BatchProcessUsers(context.Context, *BatchProcessUsersRequest) (*BatchProcessUsersResponse, error)
	// 批量导入用户
	BatchImportUsers(context.Context, *BatchImportUsersRequest) (*BatchImportUsersResponse, error)
	// 批量导出用户
	BatchExportUsers(context.Context, *BatchExportUsersRequest) (*BatchExportUsersResponse, error)
	mustEmbedUnimplementedUserAnalyticsServiceServer()
}

// UnimplementedUserAnalyticsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserAnalyticsServiceServer struct{}

func (UnimplementedUserAnalyticsServiceServer) GetUserActivityStats(context.Context, *GetUserActivityStatsRequest) (*GetUserActivityStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserActivityStats not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserBehaviorAnalysis(context.Context, *GetUserBehaviorAnalysisRequest) (*GetUserBehaviorAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBehaviorAnalysis not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserGrowthTrend(context.Context, *GetUserGrowthTrendRequest) (*GetUserGrowthTrendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserGrowthTrend not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserDistributionStats(context.Context, *GetUserDistributionStatsRequest) (*GetUserDistributionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserDistributionStats not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserRetentionAnalysis(context.Context, *GetUserRetentionAnalysisRequest) (*GetUserRetentionAnalysisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRetentionAnalysis not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserRoleDistribution(context.Context, *GetUserRoleDistributionRequest) (*GetUserRoleDistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserRoleDistribution not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserPermissionUsage(context.Context, *GetUserPermissionUsageRequest) (*GetUserPermissionUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermissionUsage not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) GetUserOperationLogStats(context.Context, *GetUserOperationLogStatsRequest) (*GetUserOperationLogStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserOperationLogStats not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) BatchGetUserStats(context.Context, *BatchGetUserStatsRequest) (*BatchGetUserStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetUserStats not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) ExportUserStatsReport(context.Context, *ExportUserStatsReportRequest) (*ExportUserStatsReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportUserStatsReport not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) BatchProcessUsers(context.Context, *BatchProcessUsersRequest) (*BatchProcessUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchProcessUsers not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) BatchImportUsers(context.Context, *BatchImportUsersRequest) (*BatchImportUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchImportUsers not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) BatchExportUsers(context.Context, *BatchExportUsersRequest) (*BatchExportUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchExportUsers not implemented")
}
func (UnimplementedUserAnalyticsServiceServer) mustEmbedUnimplementedUserAnalyticsServiceServer() {}
func (UnimplementedUserAnalyticsServiceServer) testEmbeddedByValue()                              {}

// UnsafeUserAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAnalyticsServiceServer will
// result in compilation errors.
type UnsafeUserAnalyticsServiceServer interface {
	mustEmbedUnimplementedUserAnalyticsServiceServer()
}

func RegisterUserAnalyticsServiceServer(s grpc.ServiceRegistrar, srv UserAnalyticsServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserAnalyticsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAnalyticsService_ServiceDesc, srv)
}

func _UserAnalyticsService_GetUserActivityStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserActivityStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserActivityStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserActivityStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserActivityStats(ctx, req.(*GetUserActivityStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserBehaviorAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserBehaviorAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserBehaviorAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserBehaviorAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserBehaviorAnalysis(ctx, req.(*GetUserBehaviorAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserGrowthTrend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserGrowthTrendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserGrowthTrend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserGrowthTrend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserGrowthTrend(ctx, req.(*GetUserGrowthTrendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserDistributionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserDistributionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserDistributionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserDistributionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserDistributionStats(ctx, req.(*GetUserDistributionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserRetentionAnalysis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRetentionAnalysisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserRetentionAnalysis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserRetentionAnalysis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserRetentionAnalysis(ctx, req.(*GetUserRetentionAnalysisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserRoleDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserRoleDistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserRoleDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserRoleDistribution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserRoleDistribution(ctx, req.(*GetUserRoleDistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserPermissionUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserPermissionUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserPermissionUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserPermissionUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserPermissionUsage(ctx, req.(*GetUserPermissionUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_GetUserOperationLogStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserOperationLogStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).GetUserOperationLogStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_GetUserOperationLogStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).GetUserOperationLogStats(ctx, req.(*GetUserOperationLogStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_BatchGetUserStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetUserStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).BatchGetUserStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_BatchGetUserStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).BatchGetUserStats(ctx, req.(*BatchGetUserStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_ExportUserStatsReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportUserStatsReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).ExportUserStatsReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_ExportUserStatsReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).ExportUserStatsReport(ctx, req.(*ExportUserStatsReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_BatchProcessUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchProcessUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).BatchProcessUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_BatchProcessUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).BatchProcessUsers(ctx, req.(*BatchProcessUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_BatchImportUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchImportUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).BatchImportUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_BatchImportUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).BatchImportUsers(ctx, req.(*BatchImportUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAnalyticsService_BatchExportUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchExportUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAnalyticsServiceServer).BatchExportUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAnalyticsService_BatchExportUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAnalyticsServiceServer).BatchExportUsers(ctx, req.(*BatchExportUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAnalyticsService_ServiceDesc is the grpc.ServiceDesc for UserAnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.user.service.v1.UserAnalyticsService",
	HandlerType: (*UserAnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserActivityStats",
			Handler:    _UserAnalyticsService_GetUserActivityStats_Handler,
		},
		{
			MethodName: "GetUserBehaviorAnalysis",
			Handler:    _UserAnalyticsService_GetUserBehaviorAnalysis_Handler,
		},
		{
			MethodName: "GetUserGrowthTrend",
			Handler:    _UserAnalyticsService_GetUserGrowthTrend_Handler,
		},
		{
			MethodName: "GetUserDistributionStats",
			Handler:    _UserAnalyticsService_GetUserDistributionStats_Handler,
		},
		{
			MethodName: "GetUserRetentionAnalysis",
			Handler:    _UserAnalyticsService_GetUserRetentionAnalysis_Handler,
		},
		{
			MethodName: "GetUserRoleDistribution",
			Handler:    _UserAnalyticsService_GetUserRoleDistribution_Handler,
		},
		{
			MethodName: "GetUserPermissionUsage",
			Handler:    _UserAnalyticsService_GetUserPermissionUsage_Handler,
		},
		{
			MethodName: "GetUserOperationLogStats",
			Handler:    _UserAnalyticsService_GetUserOperationLogStats_Handler,
		},
		{
			MethodName: "BatchGetUserStats",
			Handler:    _UserAnalyticsService_BatchGetUserStats_Handler,
		},
		{
			MethodName: "ExportUserStatsReport",
			Handler:    _UserAnalyticsService_ExportUserStatsReport_Handler,
		},
		{
			MethodName: "BatchProcessUsers",
			Handler:    _UserAnalyticsService_BatchProcessUsers_Handler,
		},
		{
			MethodName: "BatchImportUsers",
			Handler:    _UserAnalyticsService_BatchImportUsers_Handler,
		},
		{
			MethodName: "BatchExportUsers",
			Handler:    _UserAnalyticsService_BatchExportUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/user/service/v1/user_analytics.proto",
}
