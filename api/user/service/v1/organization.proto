syntax = "proto3";

package user.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";
import "validate/validate.proto";
import "api/user/service/v1/common.proto";
import "api/user/service/v1/error_codes.proto";

option go_package = "om-platform/api/user/service/v1;userv1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 组织服务 (OrganizationService)
// 提供组织结构管理、组织成员管理和组织配置管理等功能
// 错误处理：所有接口在发生错误时将返回ErrorResponse结构，包含统一的错误码、错误消息和详细信息
// 性能说明：支持高并发访问，关键接口已实现缓存优化
// 安全说明：所有接口需要认证和授权，详见权限矩阵文档
service OrganizationService {
  // 查询组织列表
  // 支持按名称、状态等条件筛选
  // 支持分页和排序
  // 权限要求：ORGANIZATION_READ 或 ADMIN
  // 可能的错误码：PERMISSION_DENIED, INVALID_ARGUMENT
  rpc ListOrganizations (ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations"
    };
    option (rate_limit) = {
      requests_per_second: 100
      burst: 200
    };
    option (cache) = {
      ttl_seconds: 60
      key_pattern: "orgs:list:{page}:{size}"
    };
  }

  // 查询组织详情
  // 根据组织ID获取组织详细信息
  // 权限要求：ORGANIZATION_READ 或 ADMIN 或 ORGANIZATION_MEMBER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc GetOrganization (GetOrganizationRequest) returns (Organization) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "org:{organization_id}"
    };
  }
  
  // 创建组织
  // 创建新组织并返回组织ID
  // 权限要求：ORGANIZATION_CREATE 或 ADMIN
  // 可能的错误码：ORGANIZATION_ALREADY_EXISTS, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc CreateOrganization (CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 50
      burst: 100
    };
  }

  // 更新组织
  // 更新组织信息，使用FieldMask指定需要更新的字段
  // 权限要求：ORGANIZATION_UPDATE 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc UpdateOrganization (UpdateOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 100
      burst: 200
    };
  }

  // 删除组织
  // 删除指定组织（逻辑删除）
  // 权限要求：ORGANIZATION_DELETE 或 ADMIN
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc DeleteOrganization (DeleteOrganizationRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}"
    };
    option (rate_limit) = {
      requests_per_second: 50
      burst: 100
    };
  }

  // 批量获取组织信息
  // 根据组织ID列表批量获取组织信息
  // 权限要求：ORGANIZATION_READ 或 ADMIN
  // 可能的错误码：PERMISSION_DENIED, INVALID_ARGUMENT
  rpc BatchGetOrganizations (BatchGetOrganizationsRequest) returns (BatchGetOrganizationsResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/by-ids"
      body: "*"
    };
    option (cache) = {
      cacheable: true
      ttl_seconds: 60
      cache_keys: ["ids", "field_mask"]
    };
  }

  // 批量创建组织
  // 批量创建多个组织并返回创建结果
  // 权限要求：ORGANIZATION_CREATE 或 ADMIN
  // 可能的错误码：ORGANIZATION_ALREADY_EXISTS, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc BatchCreateOrganizations (BatchCreateOrganizationsRequest) returns (BatchCreateOrganizationsResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/batch"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 批量更新组织
  // 批量更新多个组织信息
  // 权限要求：ORGANIZATION_UPDATE 或 ADMIN
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc BatchUpdateOrganizations (BatchUpdateOrganizationsRequest) returns (BatchUpdateOrganizationsResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/batch"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 批量删除组织
  // 批量删除多个组织（逻辑删除）
  // 权限要求：ORGANIZATION_DELETE 或 ADMIN
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc BatchDeleteOrganizations (BatchDeleteOrganizationsRequest) returns (BatchDeleteOrganizationsResponse) {
    option (google.api.http) = {
      delete: "/v1/organizations/batch"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 10
      burst: 20
    };
  }

  // 获取组织成员列表
  // 获取指定组织的所有成员
  // 权限要求：ORGANIZATION_READ 或 ADMIN 或 ORGANIZATION_MEMBER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc ListOrganizationMembers (ListOrganizationMembersRequest) returns (ListOrganizationMembersResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/members"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "org:{organization_id}:members:{page}:{size}"
    };
  }

  // 添加组织成员
  // 向组织添加一个或多个成员
  // 权限要求：ORGANIZATION_MEMBER_MANAGE 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, USER_NOT_FOUND, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc AddOrganizationMembers (AddOrganizationMembersRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/members"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 100
      burst: 200
    };
  }

  // 移除组织成员
  // 从组织移除一个或多个成员
  // 权限要求：ORGANIZATION_MEMBER_MANAGE 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, USER_NOT_FOUND, PERMISSION_DENIED
  rpc RemoveOrganizationMembers (RemoveOrganizationMembersRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/organizations/{organization_id}/members"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 100
      burst: 200
    };
  }

  // 更新组织成员角色
  // 更新组织成员的角色
  // 权限要求：ORGANIZATION_MEMBER_MANAGE 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, USER_NOT_FOUND, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc UpdateOrganizationMemberRole (UpdateOrganizationMemberRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/members/{user_id}/role"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 100
      burst: 200
    };
  }

  // 获取组织结构树
  // 获取组织的层级结构树
  // 权限要求：ORGANIZATION_READ 或 ADMIN 或 ORGANIZATION_MEMBER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc GetOrganizationTree (GetOrganizationTreeRequest) returns (GetOrganizationTreeResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/tree"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "org:{organization_id}:tree:{depth}"
    };
  }

  // 获取组织配置
  // 获取组织的配置信息
  // 权限要求：ORGANIZATION_READ 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc GetOrganizationConfig (GetOrganizationConfigRequest) returns (OrganizationConfig) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/config"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "org:{organization_id}:config"
    };
  }

  // 更新组织配置
  // 更新组织的配置信息
  // 权限要求：ORGANIZATION_UPDATE 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc UpdateOrganizationConfig (UpdateOrganizationConfigRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_id}/config"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 50
      burst: 100
    };
  }

  // 获取用户所属组织列表
  // 获取指定用户所属的所有组织
  // 权限要求：ORGANIZATION_READ 或 ADMIN 或 SELF
  // 可能的错误码：USER_NOT_FOUND, PERMISSION_DENIED
  rpc GetUserOrganizations (GetUserOrganizationsRequest) returns (GetUserOrganizationsResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/organizations"
    };
    option (cache) = {
      ttl_seconds: 300
      key_pattern: "user:{user_id}:orgs"
    };
  }

  // 获取组织审计日志
  // 获取组织的操作审计日志
  // 权限要求：AUDIT_READ 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc GetOrganizationAuditLogs (GetOrganizationAuditLogsRequest) returns (GetOrganizationAuditLogsResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization_id}/audit-logs"
    };
    option (cache) = {
      ttl_seconds: 60
      key_pattern: "org:{organization_id}:audit:{page}:{size}"
    };
  }

  // 导出组织成员
  // 导出组织成员列表
  // 权限要求：ORGANIZATION_READ 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED
  rpc ExportOrganizationMembers (ExportOrganizationMembersRequest) returns (stream ExportOrganizationMembersResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_id}/members/export"
      body: "*"
    };
    option (rate_limit) = {
      requests_per_second: 5
      burst: 10
    };
  }

  // 导入组织成员
  // 批量导入组织成员
  // 权限要求：ORGANIZATION_MEMBER_MANAGE 或 ADMIN 或 ORGANIZATION_OWNER
  // 可能的错误码：ORGANIZATION_NOT_FOUND, PERMISSION_DENIED, INVALID_ARGUMENT
  rpc ImportOrganizationMembers (stream ImportOrganizationMembersRequest) returns (ImportOrganizationMembersResponse) {}
}

// 组织
message Organization {
  // 组织ID
  uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 组织名称
  string name = 2 [
    json_name = "name",
    (gnostic.openapi.v3.property) = {description: "组织名称"}
  ];
  
  // 组织代码
  string code = 3 [
    json_name = "code",
    (gnostic.openapi.v3.property) = {description: "组织代码"}
  ];
  
  // 组织类型
  string type = 4 [
    json_name = "type",
    (gnostic.openapi.v3.property) = {description: "组织类型"}
  ];
  
  // 父组织ID
  optional uint32 parent_id = 5 [
    json_name = "parentId",
    (gnostic.openapi.v3.property) = {description: "父组织ID"}
  ];
  
  // 组织描述
  optional string description = 6 [
    json_name = "description",
    (gnostic.openapi.v3.property) = {description: "组织描述"}
  ];
  
  // 组织状态：ACTIVE, INACTIVE
  string status = 7 [
    json_name = "status",
    (gnostic.openapi.v3.property) = {description: "组织状态：ACTIVE, INACTIVE"}
  ];
  
  // 组织排序
  optional int32 sort_order = 8 [
    json_name = "sortOrder",
    (gnostic.openapi.v3.property) = {description: "组织排序"}
  ];
  
  // 组织负责人ID
  optional uint32 owner_id = 9 [
    json_name = "ownerId",
    (gnostic.openapi.v3.property) = {description: "组织负责人ID"}
  ];
  
  // 组织负责人名称
  optional string owner_name = 10 [
    json_name = "ownerName",
    (gnostic.openapi.v3.property) = {description: "组织负责人名称"}
  ];
  
  // 组织联系电话
  optional string contact_phone = 11 [
    json_name = "contactPhone",
    (gnostic.openapi.v3.property) = {description: "组织联系电话"}
  ];
  
  // 组织联系邮箱
  optional string contact_email = 12 [
    json_name = "contactEmail",
    (gnostic.openapi.v3.property) = {description: "组织联系邮箱"}
  ];
  
  // 组织地址
  optional string address = 13 [
    json_name = "address",
    (gnostic.openapi.v3.property) = {description: "组织地址"}
  ];
  
  // 组织区域
  optional string region = 14 [
    json_name = "region",
    (gnostic.openapi.v3.property) = {description: "组织区域"}
  ];
  
  // 组织标签
  repeated string tags = 15 [
    json_name = "tags",
    (gnostic.openapi.v3.property) = {description: "组织标签"}
  ];
  
  // 组织成员数量
  optional uint32 member_count = 16 [
    json_name = "memberCount",
    (gnostic.openapi.v3.property) = {description: "组织成员数量"}
  ];
  
  // 组织子部门数量
  optional uint32 department_count = 17 [
    json_name = "departmentCount",
    (gnostic.openapi.v3.property) = {description: "组织子部门数量"}
  ];
  
  // 组织创建时间
  google.protobuf.Timestamp created_at = 18 [
    json_name = "createdAt",
    (gnostic.openapi.v3.property) = {description: "组织创建时间"}
  ];
  
  // 组织更新时间
  google.protobuf.Timestamp updated_at = 19 [
    json_name = "updatedAt",
    (gnostic.openapi.v3.property) = {description: "组织更新时间"}
  ];
  
  // 审计信息
  optional AuditInfo audit_info = 20 [
    json_name = "auditInfo",
    (gnostic.openapi.v3.property) = {description: "审计信息"}
  ];
  
  // 租户信息
  optional TenantInfo tenant_info = 21 [
    json_name = "tenantInfo",
    (gnostic.openapi.v3.property) = {description: "租户信息"}
  ];
  
  // 扩展字段
  optional google.protobuf.Struct extensions = 22 [
    json_name = "extensions",
    (gnostic.openapi.v3.property) = {description: "扩展字段"}
  ];
}

// 组织成员
message OrganizationMember {
  // 用户ID
  uint32 user_id = 1 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ];
  
  // 组织ID
  uint32 organization_id = 2 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 用户名
  string username = 3 [
    json_name = "username",
    (gnostic.openapi.v3.property) = {description: "用户名"}
  ];
  
  // 真实姓名
  optional string real_name = 4 [
    json_name = "realName",
    (gnostic.openapi.v3.property) = {description: "真实姓名"}
  ];
  
  // 成员角色：OWNER, ADMIN, MEMBER, GUEST
  string role = 5 [
    json_name = "role",
    (gnostic.openapi.v3.property) = {description: "成员角色：OWNER, ADMIN, MEMBER, GUEST"}
  ];
  
  // 部门ID
  optional uint32 department_id = 6 [
    json_name = "departmentId",
    (gnostic.openapi.v3.property) = {description: "部门ID"}
  ];
  
  // 部门名称
  optional string department_name = 7 [
    json_name = "departmentName",
    (gnostic.openapi.v3.property) = {description: "部门名称"}
  ];
  
  // 职位ID
  optional uint32 position_id = 8 [
    json_name = "positionId",
    (gnostic.openapi.v3.property) = {description: "职位ID"}
  ];
  
  // 职位名称
  optional string position_name = 9 [
    json_name = "positionName",
    (gnostic.openapi.v3.property) = {description: "职位名称"}
  ];
  
  // 邮箱
  optional string email = 10 [
    json_name = "email",
    (gnostic.openapi.v3.property) = {description: "邮箱"}
  ];
  
  // 手机号
  optional string mobile = 11 [
    json_name = "mobile",
    (gnostic.openapi.v3.property) = {description: "手机号"}
  ];
  
  // 头像
  optional string avatar = 12 [
    json_name = "avatar",
    (gnostic.openapi.v3.property) = {description: "头像"}
  ];
  
  // 加入时间
  google.protobuf.Timestamp joined_at = 13 [
    json_name = "joinedAt",
    (gnostic.openapi.v3.property) = {description: "加入时间"}
  ];
  
  // 最后活跃时间
  optional google.protobuf.Timestamp last_active_at = 14 [
    json_name = "lastActiveAt",
    (gnostic.openapi.v3.property) = {description: "最后活跃时间"}
  ];
  
  // 扩展字段
  optional google.protobuf.Struct extensions = 15 [
    json_name = "extensions",
    (gnostic.openapi.v3.property) = {description: "扩展字段"}
  ];
}

// 组织配置
message OrganizationConfig {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 是否允许成员邀请
  bool allow_member_invite = 2 [
    json_name = "allowMemberInvite",
    (gnostic.openapi.v3.property) = {description: "是否允许成员邀请"}
  ];
  
  // 是否公开组织
  bool is_public = 3 [
    json_name = "isPublic",
    (gnostic.openapi.v3.property) = {description: "是否公开组织"}
  ];
  
  // 默认成员角色
  string default_member_role = 4 [
    json_name = "defaultMemberRole",
    (gnostic.openapi.v3.property) = {description: "默认成员角色"}
  ];
  
  // 组织Logo
  optional string logo = 5 [
    json_name = "logo",
    (gnostic.openapi.v3.property) = {description: "组织Logo"}
  ];
  
  // 组织网站
  optional string website = 6 [
    json_name = "website",
    (gnostic.openapi.v3.property) = {description: "组织网站"}
  ];
  
  // 自定义配置
  optional google.protobuf.Struct custom_config = 7 [
    json_name = "customConfig",
    (gnostic.openapi.v3.property) = {description: "自定义配置"}
  ];
}

// 查询组织列表请求
message ListOrganizationsRequest {
  // 分页参数
  uint32 page = 1 [
    json_name = "page",
    (gnostic.openapi.v3.property) = {description: "页码，从1开始"}
  ];
  
  uint32 page_size = 2 [
    json_name = "pageSize",
    (gnostic.openapi.v3.property) = {description: "每页记录数"}
  ];
  
  // 过滤条件
  optional google.protobuf.Struct filter = 3 [
    json_name = "filter",
    (gnostic.openapi.v3.property) = {description: "过滤条件"}
  ];
  
  // 排序选项
  repeated SortOption sort = 4 [
    json_name = "sort",
    (gnostic.openapi.v3.property) = {description: "排序选项"}
  ];
  
  // 是否包含子组织
  optional bool include_children = 5 [
    json_name = "includeChildren",
    (gnostic.openapi.v3.property) = {description: "是否包含子组织"}
  ];
  
  // 父组织ID
  optional uint32 parent_id = 6 [
    json_name = "parentId",
    (gnostic.openapi.v3.property) = {description: "父组织ID"}
  ];
  
  // 字段掩码
  optional google.protobuf.FieldMask field_mask = 7 [
    json_name = "fieldMask",
    (gnostic.openapi.v3.property) = {description: "字段掩码"}
  ];
}

// 查询组织列表响应
message ListOrganizationsResponse {
  // 分页信息
  PaginatedResponse pagination = 1 [
    json_name = "pagination",
    (gnostic.openapi.v3.property) = {description: "分页信息"}
  ];
  
  // 组织列表
  repeated Organization organizations = 2 [
    json_name = "organizations",
    (gnostic.openapi.v3.property) = {description: "组织列表"}
  ];
}

// 查询组织详情请求
message GetOrganizationRequest {
  // 组织ID
  uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 字段掩码
  optional google.protobuf.FieldMask field_mask = 2 [
    json_name = "fieldMask",
    (gnostic.openapi.v3.property) = {description: "字段掩码"}
  ];
}

// 创建组织请求
message CreateOrganizationRequest {
  // 组织信息
  Organization organization = 1 [
    json_name = "organization",
    (gnostic.openapi.v3.property) = {description: "组织信息"}
  ];
}

// 创建组织响应
message CreateOrganizationResponse {
  // 组织ID
  uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
}

// 更新组织请求
message UpdateOrganizationRequest {
  // 组织信息
  Organization organization = 1 [
    json_name = "organization",
    (gnostic.openapi.v3.property) = {description: "组织信息"}
  ];
  
  // 更新掩码
  google.protobuf.FieldMask update_mask = 2 [
    json_name = "updateMask",
    (gnostic.openapi.v3.property) = {description: "更新掩码"}
  ];
}

// 删除组织请求
message DeleteOrganizationRequest {
  // 组织ID
  uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
}

// 批量获取组织请求
message BatchGetOrganizationsRequest {
  // 组织ID列表
  repeated uint32 ids = 1 [
    json_name = "ids",
    (gnostic.openapi.v3.property) = {description: "组织ID列表"}
  ];
  
  // 字段掩码
  optional google.protobuf.FieldMask field_mask = 2 [
    json_name = "fieldMask",
    (gnostic.openapi.v3.property) = {description: "字段掩码"}
  ];
}

// 批量获取组织响应
message BatchGetOrganizationsResponse {
  // 组织列表
  repeated Organization organizations = 1 [
    json_name = "organizations",
    (gnostic.openapi.v3.property) = {description: "组织列表"}
  ];
  
  // 未找到的组织ID列表
  repeated uint32 not_found_ids = 2 [
    json_name = "notFoundIds",
    (gnostic.openapi.v3.property) = {description: "未找到的组织ID列表"}
  ];
}

// 批量创建组织请求
message BatchCreateOrganizationsRequest {
  // 组织列表
  repeated Organization organizations = 1 [
    json_name = "organizations",
    (gnostic.openapi.v3.property) = {description: "组织列表"}
  ];
}

// 批量创建组织响应
message BatchCreateOrganizationsResponse {
  // 批量操作结果
  BatchOperationResult result = 1 [
    json_name = "result",
    (gnostic.openapi.v3.property) = {description: "批量操作结果"}
  ];
  
  // 创建成功的组织ID列表
  repeated uint32 created_ids = 2 [
    json_name = "createdIds",
    (gnostic.openapi.v3.property) = {description: "创建成功的组织ID列表"}
  ];
}

// 批量更新组织请求
message BatchUpdateOrganizationsRequest {
  // 组织列表
  repeated Organization organizations = 1 [
    json_name = "organizations",
    (gnostic.openapi.v3.property) = {description: "组织列表"}
  ];
  
  // 更新掩码
  google.protobuf.FieldMask update_mask = 2 [
    json_name = "updateMask",
    (gnostic.openapi.v3.property) = {description: "更新掩码"}
  ];
  
  // 是否跳过不存在的组织
  optional bool skip_not_found = 3 [
    json_name = "skipNotFound",
    (gnostic.openapi.v3.property) = {description: "是否跳过不存在的组织"}
  ];
}

// 批量更新组织响应
message BatchUpdateOrganizationsResponse {
  // 批量操作结果
  BatchOperationResult result = 1 [
    json_name = "result",
    (gnostic.openapi.v3.property) = {description: "批量操作结果"}
  ];
}

// 批量删除组织请求
message BatchDeleteOrganizationsRequest {
  // 组织ID列表
  repeated uint32 ids = 1 [
    json_name = "ids",
    (gnostic.openapi.v3.property) = {description: "组织ID列表"}
  ];
  
  // 是否跳过不存在的组织
  optional bool skip_not_found = 2 [
    json_name = "skipNotFound",
    (gnostic.openapi.v3.property) = {description: "是否跳过不存在的组织"}
  ];
}

// 批量删除组织响应
message BatchDeleteOrganizationsResponse {
  // 批量操作结果
  BatchOperationResult result = 1 [
    json_name = "result",
    (gnostic.openapi.v3.property) = {description: "批量操作结果"}
  ];
}

// 获取组织成员列表请求
message ListOrganizationMembersRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 分页参数
  uint32 page = 2 [
    json_name = "page",
    (gnostic.openapi.v3.property) = {description: "页码，从1开始"}
  ];
  
  uint32 page_size = 3 [
    json_name = "pageSize",
    (gnostic.openapi.v3.property) = {description: "每页记录数"}
  ];
  
  // 过滤条件
  optional google.protobuf.Struct filter = 4 [
    json_name = "filter",
    (gnostic.openapi.v3.property) = {description: "过滤条件"}
  ];
  
  // 排序选项
  repeated SortOption sort = 5 [
    json_name = "sort",
    (gnostic.openapi.v3.property) = {description: "排序选项"}
  ];
  
  // 角色过滤
  optional string role = 6 [
    json_name = "role",
    (gnostic.openapi.v3.property) = {description: "角色过滤"}
  ];
  
  // 部门ID过滤
  optional uint32 department_id = 7 [
    json_name = "departmentId",
    (gnostic.openapi.v3.property) = {description: "部门ID过滤"}
  ];
}

// 获取组织成员列表响应
message ListOrganizationMembersResponse {
  // 分页信息
  PaginatedResponse pagination = 1 [
    json_name = "pagination",
    (gnostic.openapi.v3.property) = {description: "分页信息"}
  ];
  
  // 成员列表
  repeated OrganizationMember members = 2 [
    json_name = "members",
    (gnostic.openapi.v3.property) = {description: "成员列表"}
  ];
}

// 添加组织成员请求
message AddOrganizationMembersRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 用户ID列表
  repeated uint32 user_ids = 2 [
    json_name = "userIds",
    (gnostic.openapi.v3.property) = {description: "用户ID列表"}
  ];
  
  // 成员角色
  optional string role = 3 [
    json_name = "role",
    (gnostic.openapi.v3.property) = {description: "成员角色"}
  ];
  
  // 部门ID
  optional uint32 department_id = 4 [
    json_name = "departmentId",
    (gnostic.openapi.v3.property) = {description: "部门ID"}
  ];
  
  // 职位ID
  optional uint32 position_id = 5 [
    json_name = "positionId",
    (gnostic.openapi.v3.property) = {description: "职位ID"}
  ];
}

// 移除组织成员请求
message RemoveOrganizationMembersRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 用户ID列表
  repeated uint32 user_ids = 2 [
    json_name = "userIds",
    (gnostic.openapi.v3.property) = {description: "用户ID列表"}
  ];
}

// 更新组织成员角色请求
message UpdateOrganizationMemberRoleRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 用户ID
  uint32 user_id = 2 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ];
  
  // 新角色
  string role = 3 [
    json_name = "role",
    (gnostic.openapi.v3.property) = {description: "新角色"}
  ];
}

// 获取组织结构树请求
message GetOrganizationTreeRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 是否包含成员
  optional bool include_members = 2 [
    json_name = "includeMembers",
    (gnostic.openapi.v3.property) = {description: "是否包含成员"}
  ];
  
  // 最大深度
  optional uint32 max_depth = 3 [
    json_name = "maxDepth",
    (gnostic.openapi.v3.property) = {description: "最大深度"}
  ];
}

// 获取组织结构树响应
message GetOrganizationTreeResponse {
  // 组织节点
  message OrganizationNode {
    // 组织ID
    uint32 id = 1 [
      json_name = "id",
      (gnostic.openapi.v3.property) = {description: "组织ID"}
    ];
    
    // 组织名称
    string name = 2 [
      json_name = "name",
      (gnostic.openapi.v3.property) = {description: "组织名称"}
    ];
    
    // 组织代码
    string code = 3 [
      json_name = "code",
      (gnostic.openapi.v3.property) = {description: "组织代码"}
    ];
    
    // 组织类型
    string type = 4 [
      json_name = "type",
      (gnostic.openapi.v3.property) = {description: "组织类型"}
    ];
    
    // 子组织
    repeated OrganizationNode children = 5 [
      json_name = "children",
      (gnostic.openapi.v3.property) = {description: "子组织"}
    ];
    
    // 成员列表
    repeated OrganizationMember members = 6 [
      json_name = "members",
      (gnostic.openapi.v3.property) = {description: "成员列表"}
    ];
    
    // 成员数量
    uint32 member_count = 7 [
      json_name = "memberCount",
      (gnostic.openapi.v3.property) = {description: "成员数量"}
    ];
    
    // 子组织数量
    uint32 child_count = 8 [
      json_name = "childCount",
      (gnostic.openapi.v3.property) = {description: "子组织数量"}
    ];
  }
  
  // 组织树
  OrganizationNode tree = 1 [
    json_name = "tree",
    (gnostic.openapi.v3.property) = {description: "组织树"}
  ];
}

// 获取组织配置请求
message GetOrganizationConfigRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
}

// 更新组织配置请求
message UpdateOrganizationConfigRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 组织配置
  OrganizationConfig config = 2 [
    json_name = "config",
    (gnostic.openapi.v3.property) = {description: "组织配置"}
  ];
  
  // 更新掩码
  google.protobuf.FieldMask update_mask = 3 [
    json_name = "updateMask",
    (gnostic.openapi.v3.property) = {description: "更新掩码"}
  ];
}

// 获取用户所属组织列表请求
message GetUserOrganizationsRequest {
  // 用户ID
  uint32 user_id = 1 [
    json_name = "userId",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ];
}

// 获取用户所属组织列表响应
message GetUserOrganizationsResponse {
  // 用户所属组织
  message UserOrganization {
    // 组织ID
    uint32 organization_id = 1 [
      json_name = "organizationId",
      (gnostic.openapi.v3.property) = {description: "组织ID"}
    ];
    
    // 组织名称
    string organization_name = 2 [
      json_name = "organizationName",
      (gnostic.openapi.v3.property) = {description: "组织名称"}
    ];
    
    // 组织代码
    string organization_code = 3 [
      json_name = "organizationCode",
      (gnostic.openapi.v3.property) = {description: "组织代码"}
    ];
    
    // 成员角色
    string role = 4 [
      json_name = "role",
      (gnostic.openapi.v3.property) = {description: "成员角色"}
    ];
    
    // 部门ID
    optional uint32 department_id = 5 [
      json_name = "departmentId",
      (gnostic.openapi.v3.property) = {description: "部门ID"}
    ];
    
    // 部门名称
    optional string department_name = 6 [
      json_name = "departmentName",
      (gnostic.openapi.v3.property) = {description: "部门名称"}
    ];
    
    // 加入时间
    google.protobuf.Timestamp joined_at = 7 [
      json_name = "joinedAt",
      (gnostic.openapi.v3.property) = {description: "加入时间"}
    ];
  }
  
  // 组织列表
  repeated UserOrganization organizations = 1 [
    json_name = "organizations",
    (gnostic.openapi.v3.property) = {description: "组织列表"}
  ];
}

// 获取组织审计日志请求
message GetOrganizationAuditLogsRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 开始时间
  optional google.protobuf.Timestamp start_time = 2 [
    json_name = "startTime",
    (gnostic.openapi.v3.property) = {description: "开始时间"}
  ];
  
  // 结束时间
  optional google.protobuf.Timestamp end_time = 3 [
    json_name = "endTime",
    (gnostic.openapi.v3.property) = {description: "结束时间"}
  ];
  
  // 操作类型
  optional string operation_type = 4 [
    json_name = "operationType",
    (gnostic.openapi.v3.property) = {description: "操作类型"}
  ];
  
  // 操作者ID
  optional uint32 operator_id = 5 [
    json_name = "operatorId",
    (gnostic.openapi.v3.property) = {description: "操作者ID"}
  ];
  
  // 分页参数
  uint32 page = 6 [
    json_name = "page",
    (gnostic.openapi.v3.property) = {description: "页码，从1开始"}
  ];
  
  uint32 page_size = 7 [
    json_name = "pageSize",
    (gnostic.openapi.v3.property) = {description: "每页记录数"}
  ];
}

// 获取组织审计日志响应
message GetOrganizationAuditLogsResponse {
  // 分页信息
  PaginatedResponse pagination = 1 [
    json_name = "pagination",
    (gnostic.openapi.v3.property) = {description: "分页信息"}
  ];
  
  // 审计日志
  message AuditLogEntry {
    // 日志ID
    string id = 1 [
      json_name = "id",
      (gnostic.openapi.v3.property) = {description: "日志ID"}
    ];
    
    // 组织ID
    uint32 organization_id = 2 [
      json_name = "organizationId",
      (gnostic.openapi.v3.property) = {description: "组织ID"}
    ];
    
    // 操作类型
    string operation_type = 3 [
      json_name = "operationType",
      (gnostic.openapi.v3.property) = {description: "操作类型"}
    ];
    
    // 操作时间
    google.protobuf.Timestamp operation_time = 4 [
      json_name = "operationTime",
      (gnostic.openapi.v3.property) = {description: "操作时间"}
    ];
    
    // 操作者ID
    uint32 operator_id = 5 [
      json_name = "operatorId",
      (gnostic.openapi.v3.property) = {description: "操作者ID"}
    ];
    
    // 操作者名称
    string operator_name = 6 [
      json_name = "operatorName",
      (gnostic.openapi.v3.property) = {description: "操作者名称"}
    ];
    
    // 操作IP
    string ip_address = 7 [
      json_name = "ipAddress",
      (gnostic.openapi.v3.property) = {description: "操作IP"}
    ];
    
    // 操作详情
    google.protobuf.Struct details = 8 [
      json_name = "details",
      (gnostic.openapi.v3.property) = {description: "操作详情"}
    ];
  }
  
  // 审计日志列表
  repeated AuditLogEntry logs = 2 [
    json_name = "logs",
    (gnostic.openapi.v3.property) = {description: "审计日志列表"}
  ];
}

// 导出组织成员请求
message ExportOrganizationMembersRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 导出格式：CSV, EXCEL, JSON
  string format = 2 [
    json_name = "format",
    (gnostic.openapi.v3.property) = {description: "导出格式：CSV, EXCEL, JSON"}
  ];
  
  // 过滤条件
  optional google.protobuf.Struct filter = 3 [
    json_name = "filter",
    (gnostic.openapi.v3.property) = {description: "过滤条件"}
  ];
}

// 导出组织成员响应
message ExportOrganizationMembersResponse {
  // 数据块
  bytes data_chunk = 1 [
    json_name = "dataChunk",
    (gnostic.openapi.v3.property) = {description: "数据块"}
  ];
  
  // 是否最后一块
  bool is_last_chunk = 2 [
    json_name = "isLastChunk",
    (gnostic.openapi.v3.property) = {description: "是否最后一块"}
  ];
}

// 导入组织成员请求
message ImportOrganizationMembersRequest {
  // 组织ID
  uint32 organization_id = 1 [
    json_name = "organizationId",
    (gnostic.openapi.v3.property) = {description: "组织ID"}
  ];
  
  // 导入格式：CSV, EXCEL, JSON
  string format = 2 [
    json_name = "format",
    (gnostic.openapi.v3.property) = {description: "导入格式：CSV, EXCEL, JSON"}
  ];
  
  // 数据块
  bytes data_chunk = 3 [
    json_name = "dataChunk",
    (gnostic.openapi.v3.property) = {description: "数据块"}
  ];
  
  // 是否最后一块
  bool is_last_chunk = 4 [
    json_name = "isLastChunk",
    (gnostic.openapi.v3.property) = {description: "是否最后一块"}
  ];
}

// 导入组织成员响应
message ImportOrganizationMembersResponse {
  // 导入结果
  message ImportResult {
    // 总记录数
    uint32 total_count = 1 [
      json_name = "totalCount",
      (gnostic.openapi.v3.property) = {description: "总记录数"}
    ];
    
    // 成功记录数
    uint32 success_count = 2 [
      json_name = "successCount",
      (gnostic.openapi.v3.property) = {description: "成功记录数"}
    ];
    
    // 失败记录数
    uint32 failure_count = 3 [
      json_name = "failureCount",
      (gnostic.openapi.v3.property) = {description: "失败记录数"}
    ];
    
    // 错误记录
    message ErrorRecord {
      // 行号
      uint32 row_number = 1 [
        json_name = "rowNumber",
        (gnostic.openapi.v3.property) = {description: "行号"}
      ];
      
      // 错误消息
      string error_message = 2 [
        json_name = "errorMessage",
        (gnostic.openapi.v3.property) = {description: "错误消息"}
      ];
      
      // 原始数据
      string raw_data = 3 [
        json_name = "rawData",
        (gnostic.openapi.v3.property) = {description: "原始数据"}
      ];
    }
    
    // 错误记录列表
    repeated ErrorRecord error_records = 4 [
      json_name = "errorRecords",
      (gnostic.openapi.v3.property) = {description: "错误记录列表"}
    ];
  }
  
  // 导入结果
  ImportResult result = 1 [
    json_name = "result",
    (gnostic.openapi.v3.property) = {description: "导入结果"}
  ];
}