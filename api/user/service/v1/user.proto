syntax = "proto3";

package api.user.service.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/field_mask.proto";

import "om-platform/pkg/utils/pagination/v1";

option go_package = "om-platform/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 用户服务
// 整合了用户基本信息管理和账户状态管理功能
service UserService {
  // 查询用户列表
  rpc ListUser (pagination.PagingRequest) returns (ListUserResponse) {}

  // 查询用户详情
  rpc GetUser (GetUserRequest) returns (User) {}
  
  // 根据用户ID列表批量获取用户信息
  rpc BatchGetUsersByIds (BatchGetUsersByIdsRequest) returns (BatchGetUsersByIdsResponse) {}

  // 创建用户
  // 返回CreateUserResponse而不是Empty，以便提供新创建的用户ID
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}

  // 更新用户
  rpc UpdateUser (UpdateUserRequest) returns (google.protobuf.Empty) {}

  // 删除用户
  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {}

  // 查询用户详情
  rpc GetUserByUserName (GetUserByUserNameRequest) returns (User) {}

  // 验证密码
  rpc VerifyPassword (VerifyPasswordRequest) returns (VerifyPasswordResponse) {}

  // 用户是否存在
  rpc UserExists (UserExistsRequest) returns (UserExistsResponse) {}
  
  // 获取用户角色列表
  rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse) {}
  
  // 分配用户角色
  rpc AssignUserRoles (AssignUserRolesRequest) returns (google.protobuf.Empty) {}
  
  // 撤销用户角色
  rpc RevokeUserRoles (RevokeUserRolesRequest) returns (google.protobuf.Empty) {}
  
  // 修改用户密码
  rpc ChangePassword (ChangePasswordRequest) returns (google.protobuf.Empty) {}
  
  // 重置用户密码
  rpc ResetPassword (ResetPasswordRequest) returns (ResetPasswordResponse) {}
  
  // 获取用户有效权限
  rpc GetUserEffectivePermissions (GetUserEffectivePermissionsRequest) returns (GetUserEffectivePermissionsResponse) {}
  
  // 检查用户权限
  rpc CheckUserPermission (CheckUserPermissionRequest) returns (CheckUserPermissionResponse) {}
  
  // 清除用户权限缓存
  rpc ClearUserPermissionCache (ClearUserPermissionCacheRequest) returns (google.protobuf.Empty) {}
  
  // 获取用户动态角色
  rpc GetUserDynamicRoles (GetUserDynamicRolesRequest) returns (GetUserDynamicRolesResponse) {}
  
  // 获取用户权限审计日志
  rpc GetUserPermissionAuditLogs (GetUserPermissionAuditLogsRequest) returns (GetUserPermissionAuditLogsResponse) {}
  
  // ========== 账户状态管理功能（从AccountService迁移） ==========
  
  // 激活用户账户
  rpc ActivateUser (ActivateUserRequest) returns (google.protobuf.Empty) {}
  
  // 锁定用户账户
  rpc LockUser (LockUserRequest) returns (google.protobuf.Empty) {}
  
  // 解锁用户账户
  rpc UnlockUser (UnlockUserRequest) returns (google.protobuf.Empty) {}
  
  // 禁用用户账户
  rpc DisableUser (DisableUserRequest) returns (google.protobuf.Empty) {}
  
  // 启用用户账户
  rpc EnableUser (EnableUserRequest) returns (google.protobuf.Empty) {}
  
  // 验证用户账户状态
  rpc VerifyUserStatus (VerifyUserStatusRequest) returns (VerifyUserStatusResponse) {}
  
  // 获取用户安全策略
  rpc GetUserSecurityPolicy (GetUserSecurityPolicyRequest) returns (UserSecurityPolicy) {}
  
  // 更新用户安全策略
  rpc UpdateUserSecurityPolicy (UpdateUserSecurityPolicyRequest) returns (google.protobuf.Empty) {}
  
  // 获取用户活动日志
  rpc GetUserActivityLogs (GetUserActivityLogsRequest) returns (GetUserActivityLogsResponse) {}
}

// 验证密码结果码
enum VerifyPasswordResult {
  SUCCESS = 0;  // 验证成功
  ACCOUNT_NOT_EXISTS = 1; // 账号不存在
  WRONG_PASSWORD = 2;// 密码错误
  FREEZE = 3;// 已冻结
  DELETED = 4;// 已删除
}

// 用户权限
enum UserAuthority {
  SYS_ADMIN = 0;  // 系统超级用户
  SYS_MANAGER = 1;  // 系统管理员
  CUSTOMER_USER = 2;  // 普通用户
  GUEST_USER = 3;  // 游客

  REFRESH_TOKEN = 4; // 刷新令牌
}

// 用户性别
enum UserGender {
  SECRET = 0;  // 未知
  MALE = 1;     // 男性
  FEMALE = 2;   // 女性
}

// 用户状态（基本状态）
enum UserStatus {
  OFF = 0;
  ON = 1;
}

// 用户
message User {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ];  // 用户ID

  repeated uint32 role_ids = 2 [json_name = "roleIds", (gnostic.openapi.v3.property) = {description: "角色ID列表"}];  // 角色ID列表
  optional uint32 work_id = 3 [json_name = "workId", (gnostic.openapi.v3.property) = {description: "工号"}];  // 工号
  optional uint32 org_id = 4 [json_name = "orgId", (gnostic.openapi.v3.property) = {description: "部门ID"}];  // 部门ID
  optional uint32 position_id = 5 [json_name = "positionId", (gnostic.openapi.v3.property) = {description: "岗位ID"}];  // 岗位ID
  optional uint32 permission_cache_ttl = 6 [json_name = "permissionCacheTtl", (gnostic.openapi.v3.property) = {description: "权限缓存生存时间(秒)"}]; // 权限缓存生存时间
  optional uint32 tenant_id = 9 [json_name = "tenantId", (gnostic.openapi.v3.property) = {description: "租户ID"}];  // 租户ID

  optional uint32 create_by = 7 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 8 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional string user_name = 10 [
    json_name = "userName",
    (gnostic.openapi.v3.property) = {description: "登录名"}
  ]; // 登录名

  optional string nick_name = 11 [
    json_name = "nickName",
    (gnostic.openapi.v3.property) = {description: "昵称"}
  ]; // 昵称

  optional string real_name = 12 [
    json_name = "realName",
    (gnostic.openapi.v3.property) = {description: "真实姓名"}
  ]; // 真实姓名

  optional string avatar = 13 [
    json_name = "avatar",
    (gnostic.openapi.v3.property) = {description: "头像"}
  ]; // 头像

  optional string email = 14 [
    json_name = "email",
    (gnostic.openapi.v3.property) = {description: "邮箱"}
  ]; // 邮箱

  optional string mobile = 15 [
    json_name = "mobile",
    (gnostic.openapi.v3.property) = {description: "手机号"}
  ]; // 手机号

  optional string telephone = 16 [
    json_name = "telephone",
    (gnostic.openapi.v3.property) = {description: "座机号"}
  ]; // 手机号

  optional UserGender gender = 17 [
    json_name = "gender",
    (gnostic.openapi.v3.property) = {description: "性别"}
  ]; // 性别

  optional string address = 18 [
    json_name = "address",
    (gnostic.openapi.v3.property) = {description: "住址"}
  ]; // 住址

  optional string region = 19 [
    json_name = "region",
    (gnostic.openapi.v3.property) = {description: "国家地区"}
  ]; // 国家地区

  optional string description = 20 [
    json_name = "description",
    (gnostic.openapi.v3.property) = {description: "个人描述"}
  ]; // 个人描述

  optional string remark = 21 [
    json_name = "remark",
    (gnostic.openapi.v3.property) = {description: "备注名"}
  ]; // 备注名

  optional int64 last_login_time = 30 [
    json_name = "lastLoginTime",
    (gnostic.openapi.v3.property) = {description: "最后登录时间"}
  ]; // 最后登录时间

  optional string last_login_ip = 31 [
    json_name = "lastLoginIp",
    (gnostic.openapi.v3.property) = {description: "最后登录IP"}
  ]; // 最后登录IP

  optional UserStatus status = 32 [(gnostic.openapi.v3.property) = {
    description: "用户状态"
    default: {string: "ON"}
    enum: [{yaml: "ON"}, {yaml: "OFF"}]
  }]; // 用户状态

  optional UserAuthority authority = 33 [(gnostic.openapi.v3.property) = {
    description: "权限"
    default: {string: "CUSTOMER_USER"}
  }]; // 权限

  repeated string roles = 34 [(gnostic.openapi.v3.property) = {
    description: "角色码"
  }]; // 角色码
  
  // ========== 账户状态相关字段（从AccountService迁移） ==========
  optional UserAccountStatus account_status = 35 [(gnostic.openapi.v3.property) = {
    description: "账户状态"
    default: {string: "ACTIVE"}
  }]; // 账户状态
  
  optional google.protobuf.Timestamp last_password_change_time = 36 [
    json_name = "lastPasswordChangeTime",
    (gnostic.openapi.v3.property) = {description: "最后密码修改时间"}
  ]; // 最后密码修改时间
  
  optional uint32 login_attempts = 37 [
    json_name = "loginAttempts",
    (gnostic.openapi.v3.property) = {description: "登录尝试次数"}
  ]; // 登录尝试次数
  
  optional bool two_factor_enabled = 38 [
    json_name = "twoFactorEnabled",
    (gnostic.openapi.v3.property) = {description: "是否启用双因素认证"}
  ]; // 是否启用双因素认证
  
  optional google.protobuf.Timestamp lock_expires_at = 39 [
    json_name = "lockExpiresAt",
    (gnostic.openapi.v3.property) = {description: "锁定过期时间"}
  ]; // 锁定过期时间
  
  map<string, string> metadata = 40 [
    json_name = "metadata",
    (gnostic.openapi.v3.property) = {description: "用户相关元数据"}
  ]; // 用户相关元数据

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 获取用户列表 - 答复
message ListUserResponse {
  repeated User items = 1;
  uint32 total = 2;
}

// 获取用户数据 - 请求
message GetUserRequest {
  uint32 id = 1;
}

// 批量获取用户信息 - 请求
message BatchGetUsersByIdsRequest {
  repeated uint32 user_ids = 1 [
    (gnostic.openapi.v3.property) = {description: "用户ID列表"},
    json_name = "userIds"
  ]; // 用户ID列表
}

// 批量获取用户信息 - 响应
message BatchGetUsersByIdsResponse {
  repeated User users = 1 [
    (gnostic.openapi.v3.property) = {description: "用户信息列表"},
    json_name = "users"
  ]; // 用户信息列表
  
  // 未找到的用户ID列表
  repeated uint32 not_found_user_ids = 2 [
    (gnostic.openapi.v3.property) = {description: "未找到的用户ID列表"},
    json_name = "notFoundUserIds"
  ];
}

message GetUserByUserNameRequest {
  string user_name = 1 [
    (gnostic.openapi.v3.property) = {description: "用户登录名", read_only: true},
    json_name = "userName"
  ]; // 用户登录名
}

// 创建用户 - 请求
message CreateUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  User data = 2; // 用户基本信息

  optional string password = 3 [
    (gnostic.openapi.v3.property) = {description: "用户登录密码", read_only: true},
    json_name = "password"
  ]; // 用户登录密码
  
  // 用户账户初始状态设置
  optional UserAccountStatus initial_status = 4 [
    (gnostic.openapi.v3.property) = {description: "初始账户状态", default: {string: "ACTIVE"}},
    json_name = "initialStatus"
  ]; // 初始账户状态
  
  // 是否需要激活
  optional bool require_activation = 5 [
    (gnostic.openapi.v3.property) = {description: "是否需要激活", default: {bool: false}},
    json_name = "requireActivation"
  ]; // 是否需要激活
  
  // 是否发送欢迎邮件
  optional bool send_welcome_email = 6 [
    (gnostic.openapi.v3.property) = {description: "是否发送欢迎邮件", default: {bool: false}},
    json_name = "sendWelcomeEmail"
  ]; // 是否发送欢迎邮件
  
  // 初始安全策略
  optional UserSecurityPolicy security_policy = 7 [
    (gnostic.openapi.v3.property) = {description: "初始安全策略"},
    json_name = "securityPolicy"
  ]; // 初始安全策略
}

// 更新用户 - 请求
message UpdateUserRequest {
  optional uint32 operator_id = 1 [
    json_name = "operatorId",
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true}
  ]; // 操作用户ID

  User data = 2 [
    json_name = "data",
    (google.api.field_behavior) = REQUIRED,
    (gnostic.openapi.v3.property) = {description: "用户的数据"}
  ]; // 用户的数据

  optional string password = 3 [
    (gnostic.openapi.v3.property) = {description: "用户登录密码", read_only: true},
    json_name = "password"
  ]; // 用户登录密码

  google.protobuf.FieldMask update_mask = 4 [
    json_name = "updateMask",
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realName,userName"}
    }
  ]; // 要更新的字段列表

  optional bool allow_missing = 5 [
    json_name = "allowMissing",
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"}
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 创建用户 - 响应
message CreateUserResponse {
  uint32 user_id = 1 [
    (gnostic.openapi.v3.property) = {description: "新创建的用户ID"},
    json_name = "userId"
  ]; // 新创建的用户ID
  
  google.protobuf.Timestamp created_at = 2 [
    json_name = "createdAt",
    (gnostic.openapi.v3.property) = {description: "创建时间"}
  ]; // 创建时间
  
  // 激活码(如果需要激活)
  optional string activation_code = 3 [
    json_name = "activationCode",
    (gnostic.openapi.v3.property) = {description: "激活码(如果需要激活)"}
  ];
}

// 删除用户 - 请求
message DeleteUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  uint32 id = 2;
}

// 验证密码 - 请求
message VerifyPasswordRequest {
  string user_name = 1 [
    (gnostic.openapi.v3.property) = {description: "用户登录名", read_only: true},
    json_name = "userName"
  ]; // 用户登录名

  string password = 2 [
    (gnostic.openapi.v3.property) = {description: "用户登录密码", read_only: true},
    json_name = "password"
  ]; // 用户登录密码
}
// 验证密码 - 答复
message VerifyPasswordResponse {
  VerifyPasswordResult result = 1;
}

// 用户是否存在 - 请求
message UserExistsRequest {
  string user_name = 1 [
    (gnostic.openapi.v3.property) = {description: "用户登录名", read_only: true},
    json_name = "userName"
  ]; // 用户登录名
}
// 用户是否存在 - 答复
message UserExistsResponse {
  bool exist = 1;
}

// 获取用户角色列表 - 请求
message GetUserRolesRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
}

// 用户角色信息（简化版，避免循环依赖）
message UserRole {
  uint32 id = 1;
  string name = 2;
  string code = 3;
  string status = 4;
  string remark = 5;
}

// 获取用户角色列表 - 响应
message GetUserRolesResponse {
  repeated UserRole roles = 1;
}

// 分配用户角色 - 请求
message AssignUserRolesRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  repeated uint32 role_ids = 3 [json_name = "roleIds", (gnostic.openapi.v3.property) = {description: "角色ID列表"}];
}

// 撤销用户角色 - 请求
message RevokeUserRolesRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  repeated uint32 role_ids = 3 [json_name = "roleIds", (gnostic.openapi.v3.property) = {description: "角色ID列表"}];
}

// 修改用户密码 - 请求
message ChangePasswordRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string old_password = 3 [json_name = "oldPassword", (gnostic.openapi.v3.property) = {description: "旧密码"}];
  string new_password = 4 [json_name = "newPassword", (gnostic.openapi.v3.property) = {description: "新密码"}];
}

// 重置用户密码 - 请求
message ResetPasswordRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
}

// 重置用户密码 - 响应
message ResetPasswordResponse {
  string password = 1 [json_name = "password", (gnostic.openapi.v3.property) = {description: "重置后的密码"}];
}

// 获取用户有效权限 - 请求
message GetUserEffectivePermissionsRequest {
  uint32 user_id = 1 [json_name = "userId"];
  optional string resource_type = 2 [json_name = "resourceType"]; // 可选，按资源类型过滤
  bool skip_cache = 3 [json_name = "skipCache"]; // 是否跳过缓存，强制重新计算权限
}

// 获取用户有效权限 - 响应
message GetUserEffectivePermissionsResponse {
  repeated api.user.service.v1.Permission permissions = 1;
  map<string, bool> permission_map = 2 [json_name = "permissionMap"]; // 权限编码到布尔值的映射，方便客户端快速查询
}

// 检查用户权限 - 请求
message CheckUserPermissionRequest {
  uint32 user_id = 1 [json_name = "userId"];
  string resource_identifier = 2 [json_name = "resourceIdentifier"];
  string action = 3;
  map<string, string> context = 4; // 上下文信息，用于条件表达式求值
  bool skip_cache = 5 [json_name = "skipCache"]; // 是否跳过缓存，强制重新检查权限
}

// 检查用户权限 - 响应
message CheckUserPermissionResponse {
  bool has_permission = 1 [json_name = "hasPermission"];
  string deny_reason = 2 [json_name = "denyReason"];
  uint32 matched_permission_id = 3 [json_name = "matchedPermissionId"];
  bool from_cache = 4 [json_name = "fromCache"]; // 结果是否来自缓存
}

// 清除用户权限缓存 - 请求
message ClearUserPermissionCacheRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  optional uint32 user_id = 2 [json_name = "userId"]; // 指定用户ID，为空则清除所有用户的权限缓存
  optional string resource_type = 3 [json_name = "resourceType"]; // 指定资源类型，为空则不按资源类型过滤
}

// 获取用户动态角色 - 请求
message GetUserDynamicRolesRequest {
  uint32 user_id = 1 [json_name = "userId"];
  bool evaluate_conditions = 2 [json_name = "evaluateConditions"]; // 是否评估动态条件
  map<string, string> context = 3; // 上下文信息，用于条件表达式求值
}

// 获取用户动态角色 - 响应
message GetUserDynamicRolesResponse {
  repeated api.user.service.v1.Role roles = 1;
  map<uint32, bool> condition_results = 2 [json_name = "conditionResults"]; // 角色ID到条件评估结果的映射
}

// 获取用户权限审计日志 - 请求
message GetUserPermissionAuditLogsRequest {
  uint32 user_id = 1 [json_name = "userId"];
  optional google.protobuf.Timestamp start_time = 2 [json_name = "startTime"]; // 开始时间
  optional google.protobuf.Timestamp end_time = 3 [json_name = "endTime"]; // 结束时间
  optional string operation_type = 4 [json_name = "operationType"]; // 操作类型
  int32 page_size = 5 [json_name = "pageSize"]; // 分页大小
  int32 page_num = 6 [json_name = "pageNum"]; // 页码
}

// 获取用户权限审计日志 - 响应
message GetUserPermissionAuditLogsResponse {
  repeated api.user.service.v1.OperationLog logs = 1;
  int32 total = 2; // 总记录数
}

// ========== 账户状态管理相关消息定义（从AccountService迁移） ==========

// 用户账户状态
enum UserAccountStatus {
  ACTIVE = 0;    // 活跃状态
  INACTIVE = 1;  // 未激活
  LOCKED = 2;    // 已锁定
  DISABLED = 3;  // 已禁用
  DELETED = 4;   // 已删除
}

// 激活用户账户 - 请求
message ActivateUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string activation_code = 3 [json_name = "activationCode", (gnostic.openapi.v3.property) = {description: "激活码"}];
}

// 锁定用户账户 - 请求
message LockUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string reason = 3 [json_name = "reason", (gnostic.openapi.v3.property) = {description: "锁定原因"}];
  uint32 lock_duration = 4 [json_name = "lockDuration", (gnostic.openapi.v3.property) = {description: "锁定时长(秒，0表示永久)"}];
}

// 解锁用户账户 - 请求
message UnlockUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string reason = 3 [json_name = "reason", (gnostic.openapi.v3.property) = {description: "解锁原因"}];
}

// 禁用用户账户 - 请求
message DisableUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string reason = 3 [json_name = "reason", (gnostic.openapi.v3.property) = {description: "禁用原因"}];
}

// 启用用户账户 - 请求
message EnableUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string reason = 3 [json_name = "reason", (gnostic.openapi.v3.property) = {description: "启用原因"}];
}

// 验证用户账户状态 - 请求
message VerifyUserStatusRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
}

// 验证用户账户状态 - 响应
message VerifyUserStatusResponse {
  UserAccountStatus status = 1 [json_name = "status", (gnostic.openapi.v3.property) = {description: "账户状态"}];
  bool can_login = 2 [json_name = "canLogin", (gnostic.openapi.v3.property) = {description: "是否可以登录"}];
  string reason = 3 [json_name = "reason", (gnostic.openapi.v3.property) = {description: "原因"}];
  google.protobuf.Timestamp lock_expires_at = 4 [json_name = "lockExpiresAt", (gnostic.openapi.v3.property) = {description: "锁定过期时间"}];
}

// 用户安全策略
message UserSecurityPolicy {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  bool password_expiry_enabled = 2 [json_name = "passwordExpiryEnabled", (gnostic.openapi.v3.property) = {description: "是否启用密码过期"}];
  uint32 password_expiry_days = 3 [json_name = "passwordExpiryDays", (gnostic.openapi.v3.property) = {description: "密码过期天数"}];
  bool password_history_enabled = 4 [json_name = "passwordHistoryEnabled", (gnostic.openapi.v3.property) = {description: "是否启用密码历史"}];
  uint32 password_history_count = 5 [json_name = "passwordHistoryCount", (gnostic.openapi.v3.property) = {description: "密码历史数量"}];
  bool account_lockout_enabled = 6 [json_name = "accountLockoutEnabled", (gnostic.openapi.v3.property) = {description: "是否启用账户锁定"}];
  uint32 account_lockout_threshold = 7 [json_name = "accountLockoutThreshold", (gnostic.openapi.v3.property) = {description: "账户锁定阈值"}];
  uint32 account_lockout_duration = 8 [json_name = "accountLockoutDuration", (gnostic.openapi.v3.property) = {description: "账户锁定时长(秒)"}];
  bool two_factor_required = 9 [json_name = "twoFactorRequired", (gnostic.openapi.v3.property) = {description: "是否要求双因素认证"}];
  repeated string allowed_ip_ranges = 10 [json_name = "allowedIpRanges", (gnostic.openapi.v3.property) = {description: "允许的IP范围"}];
  repeated string allowed_devices = 11 [json_name = "allowedDevices", (gnostic.openapi.v3.property) = {description: "允许的设备"}];
  bool concurrent_sessions_limited = 12 [json_name = "concurrentSessionsLimited", (gnostic.openapi.v3.property) = {description: "是否限制并发会话"}];
  uint32 max_concurrent_sessions = 13 [json_name = "maxConcurrentSessions", (gnostic.openapi.v3.property) = {description: "最大并发会话数"}];
}

// 获取用户安全策略 - 请求
message GetUserSecurityPolicyRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
}

// 更新用户安全策略 - 请求
message UpdateUserSecurityPolicyRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  UserSecurityPolicy policy = 3 [json_name = "policy", (gnostic.openapi.v3.property) = {description: "安全策略"}];
}

// 用户活动日志
message UserActivityLog {
  string log_id = 1 [json_name = "logId", (gnostic.openapi.v3.property) = {description: "日志ID"}];
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string activity_type = 3 [json_name = "activityType", (gnostic.openapi.v3.property) = {description: "活动类型"}];
  string client_ip = 4 [json_name = "clientIp", (gnostic.openapi.v3.property) = {description: "客户端IP"}];
  string user_agent = 5 [json_name = "userAgent", (gnostic.openapi.v3.property) = {description: "用户代理"}];
  google.protobuf.Timestamp timestamp = 6 [json_name = "timestamp", (gnostic.openapi.v3.property) = {description: "时间戳"}];
  map<string, string> details = 7 [json_name = "details", (gnostic.openapi.v3.property) = {description: "详情"}];
}

// 获取用户活动日志 - 请求
message GetUserActivityLogsRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  pagination.PagingRequest paging = 2 [json_name = "paging", (gnostic.openapi.v3.property) = {description: "分页请求"}];
  string activity_type = 3 [json_name = "activityType", (gnostic.openapi.v3.property) = {description: "活动类型"}];
  google.protobuf.Timestamp start_time = 4 [json_name = "startTime", (gnostic.openapi.v3.property) = {description: "开始时间"}];
  google.protobuf.Timestamp end_time = 5 [json_name = "endTime", (gnostic.openapi.v3.property) = {description: "结束时间"}];
}

// 获取用户活动日志 - 响应
message GetUserActivityLogsResponse {
  pagination.PagingResponse paging = 1 [json_name = "paging", (gnostic.openapi.v3.property) = {description: "分页响应"}];
  repeated UserActivityLog logs = 2 [json_name = "logs", (gnostic.openapi.v3.property) = {description: "日志列表"}];
}