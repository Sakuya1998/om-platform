syntax = "proto3";

package api.user.service.v1;

//import "google/api/annotations.proto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/field_mask.proto";
import "gnostic/openapi/v3/annotations.proto";

import "pkg/utils/pagination/v1/pagination.proto";
import "api/user/service/v1/permission.proto"; 
import "api/user/service/v1/role.proto";       
import "api/user/service/v1/operation_log.proto";
import "api/user/service/v1/common.proto";
import "api/user/service/v1/account.proto"; 
option go_package = "om-platform/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 用户服务 (UserService)
// 专注于用户基本信息管理功能，包括用户CRUD操作、用户角色分配和权限管理
// 注意：账户状态管理功能已迁移至AccountService，密码管理功能已迁移至AuthService
// 错误处理：所有接口在发生错误时将返回ErrorResponse结构，包含统一的错误码、错误消息和详细信息
service UserService {
  // 查询用户列表
  rpc ListUser (pkg.utils.pagination.v1.PagingRequest) returns (ListUserResponse) {}

  // 查询用户详情
  rpc GetUser (GetUserRequest) returns (User) {}
  
  // 根据用户ID列表批量获取用户信息
  rpc BatchGetUsersByIds (BatchGetUsersByIdsRequest) returns (BatchGetUsersByIdsResponse) {}

  // 创建用户
  // 返回CreateUserResponse而不是Empty，以便提供新创建的用户ID
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {}

  // 更新用户
// 使用FieldMask明确指定需要更新的字段，提高API灵活性和安全性
rpc UpdateUser (UpdateUserRequest) returns (google.protobuf.Empty) {}

  // 删除用户
  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {}

  // 查询用户详情
  rpc GetUserByUserName (GetUserByUserNameRequest) returns (User) {}

  // 验证密码
  // 注意：此方法仅验证密码正确性，不处理账户状态变更
  // 账户锁定、密码过期等高级账户状态管理请使用AccountService
  rpc VerifyPassword (VerifyPasswordRequest) returns (VerifyPasswordResponse) {}

  // 用户是否存在
  rpc UserExists (UserExistsRequest) returns (UserExistsResponse) {}
  
  // 获取用户角色列表
  rpc GetUserRoles (GetUserRolesRequest) returns (GetUserRolesResponse) {}
  
  // 分配用户角色
  rpc AssignUserRoles (AssignUserRolesRequest) returns (google.protobuf.Empty) {}
  
  // 撤销用户角色
  rpc RevokeUserRoles (RevokeUserRolesRequest) returns (google.protobuf.Empty) {}
  
  // 密码管理功能已迁移至AuthService
  // 请使用AuthService中的ChangePassword和ResetPassword方法
  
  // 获取用户有效权限
  rpc GetUserEffectivePermissions (GetUserEffectivePermissionsRequest) returns (GetUserEffectivePermissionsResponse) {}
  
  // 检查用户权限
  rpc CheckUserPermission (CheckUserPermissionRequest) returns (CheckUserPermissionResponse) {}
  
  // 清除用户权限缓存
  rpc ClearUserPermissionCache (ClearUserPermissionCacheRequest) returns (google.protobuf.Empty) {}
  
  // 获取用户动态角色
  rpc GetUserDynamicRoles (GetUserDynamicRolesRequest) returns (GetUserDynamicRolesResponse) {}
  
  // 获取用户权限审计日志
  rpc GetUserPermissionAuditLogs (GetUserPermissionAuditLogsRequest) returns (GetUserPermissionAuditLogsResponse) {}
  
  // 注意：账户状态管理功能已迁移至AccountService
  // 请使用AccountService中的相关方法
}

// 验证密码结果码
enum VerifyPasswordResult {
  VERIFY_PASSWORD_RESULT_UNSPECIFIED = 0; // 未指定
  VERIFY_PASSWORD_RESULT_SUCCESS = 1;     // 验证成功
  VERIFY_PASSWORD_RESULT_NOT_EXISTS = 2;  // 账号不存在
  VERIFY_PASSWORD_RESULT_WRONG = 3;       // 密码错误
  VERIFY_PASSWORD_RESULT_LOCKED = 4;      // 账户已锁定
  VERIFY_PASSWORD_RESULT_DELETED = 5;     // 账户已删除
  VERIFY_PASSWORD_RESULT_DISABLED = 6;    // 账户已禁用
  VERIFY_PASSWORD_RESULT_EXPIRED = 7;     // 密码已过期
}

// 注意：用户权限(UserAuthority)和用户性别(UserGender)枚举已迁移至common.proto
// 请使用common.proto中的定义

// 用户状态管理说明：
// 1. 基础用户状态(UserAccountStatus)定义在common.proto中
// 2. 详细账户状态(AccountStatus)定义在account.proto中
// 3. 状态管理职责划分：
//    - UserService: 仅引用账户状态，不存储也不负责状态变更
//    - AccountService: 负责所有账户状态的存储和变更操作

// 用户
message User {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "用户ID"}
  ];  // 用户ID

  repeated uint32 role_ids = 2 [json_name = "roleIds", (gnostic.openapi.v3.property) = {description: "角色ID列表"}];  // 角色ID列表
  optional uint32 work_id = 3 [json_name = "workId", (gnostic.openapi.v3.property) = {description: "工号"}];  // 工号
  optional uint32 org_id = 4 [json_name = "orgId", (gnostic.openapi.v3.property) = {description: "部门ID"}];  // 部门ID
  optional uint32 position_id = 5 [json_name = "positionId", (gnostic.openapi.v3.property) = {description: "岗位ID"}];  // 岗位ID
  optional uint32 permission_cache_ttl = 6 [json_name = "permissionCacheTtl", (gnostic.openapi.v3.property) = {description: "权限缓存生存时间(秒)"}]; // 权限缓存生存时间
  optional uint32 tenant_id = 9 [json_name = "tenantId", (gnostic.openapi.v3.property) = {description: "租户ID"}];  // 租户ID

  optional uint32 create_by = 7 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 8 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional string user_name = 10 [
    json_name = "userName",
    (gnostic.openapi.v3.property) = {description: "登录名"}
  ]; // 登录名

  optional string nick_name = 11 [
    json_name = "nickName",
    (gnostic.openapi.v3.property) = {description: "昵称"}
  ]; // 昵称

  optional string real_name = 12 [
    json_name = "realName",
    (gnostic.openapi.v3.property) = {description: "真实姓名"}
  ]; // 真实姓名

  optional string avatar = 13 [
    json_name = "avatar",
    (gnostic.openapi.v3.property) = {description: "头像"}
  ]; // 头像

  optional string email = 14 [
    json_name = "email",
    (gnostic.openapi.v3.property) = {description: "邮箱"}
  ]; // 邮箱

  optional string mobile = 15 [
    json_name = "mobile",
    (gnostic.openapi.v3.property) = {description: "手机号"}
  ]; // 手机号

  optional string telephone = 16 [
    json_name = "telephone",
    (gnostic.openapi.v3.property) = {description: "座机号"}
  ]; // 手机号

  optional api.user.service.v1.UserGender gender = 17 [
    json_name = "gender",
    (gnostic.openapi.v3.property) = {description: "性别"}
  ]; // 性别

  optional string address = 18 [
    json_name = "address",
    (gnostic.openapi.v3.property) = {description: "住址"}
  ]; // 住址

  optional string region = 19 [
    json_name = "region",
    (gnostic.openapi.v3.property) = {description: "国家地区"}
  ]; // 国家地区

  optional string description = 20 [
    json_name = "description",
    (gnostic.openapi.v3.property) = {description: "个人描述"}
  ]; // 个人描述

  optional string remark = 21 [
    json_name = "remark",
    (gnostic.openapi.v3.property) = {description: "备注名"}
  ]; // 备注名

  optional int64 last_login_time = 30 [
    json_name = "lastLoginTime",
    (gnostic.openapi.v3.property) = {description: "最后登录时间"}
  ]; // 最后登录时间

  optional string last_login_ip = 31 [
    json_name = "lastLoginIp",
    (gnostic.openapi.v3.property) = {description: "最后登录IP"}
  ]; // 最后登录IP

  // 用户状态引用 - 不直接存储状态，仅引用AccountService中的状态
  // 状态的实际存储和管理由AccountService负责
  optional api.user.service.v1.UserAccountStatus account_status_ref = 32 [
    json_name = "accountStatusRef",
    (gnostic.openapi.v3.property) = {
      description: "账户状态引用（只读）"
      read_only: true
    }
  ]; // 账户状态引用（只读）

  optional api.user.service.v1.UserAuthority authority = 33 [(gnostic.openapi.v3.property) = {
    description: "权限"
    default: {string: "USER_AUTHORITY_USER"}
  }]; // 权限

  repeated string roles = 34 [(gnostic.openapi.v3.property) = {
    description: "角色码"
  }]; // 角色码
  
  map<string, string> metadata = 40 [
    json_name = "metadata",
    (gnostic.openapi.v3.property) = {description: "用户相关元数据"}
  ]; // 用户相关元数据

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 获取用户列表 - 响应
message ListUserResponse {
  repeated User items = 1 [json_name = "items", (gnostic.openapi.v3.property) = {description: "用户列表"}];
  uint32 total = 2 [json_name = "total", (gnostic.openapi.v3.property) = {description: "总记录数"}];
}

// 获取用户数据 - 请求
message GetUserRequest {
  uint32 id = 1 [json_name = "id", (gnostic.openapi.v3.property) = {description: "用户ID"}];
}

// 批量获取用户信息 - 请求
message BatchGetUsersByIdsRequest {
  repeated uint32 user_ids = 1 [
    (gnostic.openapi.v3.property) = {description: "用户ID列表"},
    json_name = "userIds"
  ]; // 用户ID列表
}

// 批量获取用户信息 - 响应
message BatchGetUsersByIdsResponse {
  repeated User users = 1 [
    (gnostic.openapi.v3.property) = {description: "用户信息列表"},
    json_name = "users"
  ]; // 用户信息列表
  
  // 未找到的用户ID列表
  repeated uint32 not_found_user_ids = 2 [
    (gnostic.openapi.v3.property) = {description: "未找到的用户ID列表"},
    json_name = "notFoundUserIds"
  ];
}

// 根据用户名获取用户 - 请求
message GetUserByUserNameRequest {
  string user_name = 1 [
    (gnostic.openapi.v3.property) = {description: "用户登录名", read_only: true},
    json_name = "userName"
  ]; // 用户登录名
}

// 创建用户 - 请求
message CreateUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  User data = 2; // 用户基本信息

  optional string password = 3 [
    (gnostic.openapi.v3.property) = {description: "用户登录密码", read_only: true},
    json_name = "password"
  ]; // 用户登录密码
  
  // 用户账户初始状态设置
  optional UserAccountStatus initial_status = 4 [
    (gnostic.openapi.v3.property) = {description: "初始账户状态", default: {string: "ACTIVE"}},
    json_name = "initialStatus"
  ]; // 初始账户状态
  
  // 是否发送欢迎邮件
  optional bool send_welcome_email = 6 [
    (gnostic.openapi.v3.property) = {description: "是否发送欢迎邮件", default: {boolean: false}},
    json_name = "sendWelcomeEmail"
  ]; // 是否发送欢迎邮件
  
  // 注意：账户安全策略相关功能已迁移至AccountService
}

// 更新用户 - 请求
message UpdateUserRequest {
  optional uint32 operator_id = 1 [
    json_name = "operatorId",
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true}
  ]; // 操作用户ID

  User data = 2 [
    json_name = "data",
    (google.api.field_behavior) = REQUIRED,
    (gnostic.openapi.v3.property) = {description: "用户的数据"}
  ]; // 用户的数据

  optional string password = 3 [
    (gnostic.openapi.v3.property) = {description: "用户登录密码", read_only: true},
    json_name = "password"
  ]; // 用户登录密码

  google.protobuf.FieldMask update_mask = 4 [
    json_name = "updateMask",
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realName,userName"}
    }
  ]; // 要更新的字段列表

  optional bool allow_missing = 5 [
    json_name = "allowMissing",
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"}
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 创建用户 - 响应
message CreateUserResponse {
  uint32 user_id = 1 [
    (gnostic.openapi.v3.property) = {description: "新创建的用户ID"},
    json_name = "userId"
  ]; // 新创建的用户ID
  
  google.protobuf.Timestamp created_at = 2 [
    json_name = "createdAt",
    (gnostic.openapi.v3.property) = {description: "创建时间"}
  ]; // 创建时间
  
  // 激活码(如果需要激活)
  optional string activation_code = 3 [
    json_name = "activationCode",
    (gnostic.openapi.v3.property) = {description: "激活码(如果需要激活)"}
  ];
}

// 删除用户 - 请求
message DeleteUserRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  uint32 id = 2 [json_name = "id", (gnostic.openapi.v3.property) = {description: "要删除的用户ID"}];
}

// 验证密码 - 请求
message VerifyPasswordRequest {
  string user_name = 1 [
    (gnostic.openapi.v3.property) = {description: "用户登录名", read_only: true},
    json_name = "userName"
  ]; // 用户登录名

  string password = 2 [
    (gnostic.openapi.v3.property) = {description: "用户登录密码", read_only: true},
    json_name = "password"
  ]; // 用户登录密码
}
// 验证密码 - 响应
message VerifyPasswordResponse {
  VerifyPasswordResult result = 1 [json_name = "result", (gnostic.openapi.v3.property) = {description: "验证结果"}];
}

// 用户是否存在 - 请求
message UserExistsRequest {
  string user_name = 1 [
    (gnostic.openapi.v3.property) = {description: "用户登录名", read_only: true},
    json_name = "userName"
  ]; // 用户登录名
}
// 用户是否存在 - 响应
message UserExistsResponse {
  bool exist = 1 [json_name = "exist", (gnostic.openapi.v3.property) = {description: "用户是否存在"}];
}

// 获取用户角色列表 - 请求
message GetUserRolesRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
}

// 用户角色信息（简化版，避免循环依赖）
message UserRole {
  uint32 id = 1 [json_name = "id", (gnostic.openapi.v3.property) = {description: "角色ID"}];
  string name = 2 [json_name = "name", (gnostic.openapi.v3.property) = {description: "角色名称"}];
  string code = 3 [json_name = "code", (gnostic.openapi.v3.property) = {description: "角色编码"}];
  string status = 4 [json_name = "status", (gnostic.openapi.v3.property) = {description: "角色状态"}];
  string remark = 5 [json_name = "remark", (gnostic.openapi.v3.property) = {description: "备注"}];
}

// 获取用户角色列表 - 响应
message GetUserRolesResponse {
  repeated UserRole roles = 1 [json_name = "roles", (gnostic.openapi.v3.property) = {description: "用户角色列表"}];
}

// 分配用户角色 - 请求
message AssignUserRolesRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  repeated uint32 role_ids = 3 [json_name = "roleIds", (gnostic.openapi.v3.property) = {description: "角色ID列表"}];
}

// 撤销用户角色 - 请求
message RevokeUserRolesRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  repeated uint32 role_ids = 3 [json_name = "roleIds", (gnostic.openapi.v3.property) = {description: "角色ID列表"}];
}

// 密码管理相关消息定义已迁移至auth.proto
// 请使用auth.proto中的ChangePasswordRequest、ResetPasswordRequest和ResetPasswordResponse

// 获取用户有效权限 - 请求
message GetUserEffectivePermissionsRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  optional string resource_type = 2 [json_name = "resourceType", (gnostic.openapi.v3.property) = {description: "资源类型，可选，按资源类型过滤"}]; 
  bool skip_cache = 3 [json_name = "skipCache", (gnostic.openapi.v3.property) = {description: "是否跳过缓存，强制重新计算权限"}]; 
}

// 获取用户有效权限 - 响应
message GetUserEffectivePermissionsResponse {
  repeated api.user.service.v1.Permission permissions = 1 [json_name = "permissions", (gnostic.openapi.v3.property) = {description: "用户有效权限列表"}];
  map<string, bool> permission_map = 2 [json_name = "permissionMap", (gnostic.openapi.v3.property) = {description: "权限编码到布尔值的映射，方便客户端快速查询"}]; 
}

// 检查用户权限 - 请求
message CheckUserPermissionRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  string resource_identifier = 2 [json_name = "resourceIdentifier", (gnostic.openapi.v3.property) = {description: "资源标识符"}];
  string action = 3 [json_name = "action", (gnostic.openapi.v3.property) = {description: "操作类型"}];
  map<string, string> context = 4 [json_name = "context", (gnostic.openapi.v3.property) = {description: "上下文信息，用于条件表达式求值"}]; 
  bool skip_cache = 5 [json_name = "skipCache", (gnostic.openapi.v3.property) = {description: "是否跳过缓存，强制重新检查权限"}]; 
}

// 检查用户权限 - 响应
message CheckUserPermissionResponse {
  bool has_permission = 1 [json_name = "hasPermission", (gnostic.openapi.v3.property) = {description: "是否拥有权限"}];
  string deny_reason = 2 [json_name = "denyReason", (gnostic.openapi.v3.property) = {description: "拒绝原因"}];
  uint32 matched_permission_id = 3 [json_name = "matchedPermissionId", (gnostic.openapi.v3.property) = {description: "匹配的权限ID"}];
  bool from_cache = 4 [json_name = "fromCache", (gnostic.openapi.v3.property) = {description: "结果是否来自缓存"}]; 
}

// 清除用户权限缓存 - 请求
message ClearUserPermissionCacheRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  optional uint32 user_id = 2 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "指定用户ID，为空则清除所有用户的权限缓存"}];
  optional string resource_type = 3 [json_name = "resourceType", (gnostic.openapi.v3.property) = {description: "指定资源类型，为空则不按资源类型过滤"}];
}

// 获取用户动态角色 - 请求
message GetUserDynamicRolesRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  bool evaluate_conditions = 2 [json_name = "evaluateConditions", (gnostic.openapi.v3.property) = {description: "是否评估动态条件"}];
  map<string, string> context = 3 [json_name = "context", (gnostic.openapi.v3.property) = {description: "上下文信息，用于条件表达式求值"}];
}

// 获取用户动态角色 - 响应
message GetUserDynamicRolesResponse {
  repeated api.user.service.v1.Role roles = 1 [json_name = "roles", (gnostic.openapi.v3.property) = {description: "动态角色列表"}];
  map<uint32, bool> condition_results = 2 [json_name = "conditionResults", (gnostic.openapi.v3.property) = {description: "角色ID到条件评估结果的映射"}];
}

// 获取用户权限审计日志 - 请求
message GetUserPermissionAuditLogsRequest {
  uint32 user_id = 1 [json_name = "userId", (gnostic.openapi.v3.property) = {description: "用户ID"}];
  optional google.protobuf.Timestamp start_time = 2 [json_name = "startTime", (gnostic.openapi.v3.property) = {description: "开始时间"}];
  optional google.protobuf.Timestamp end_time = 3 [json_name = "endTime", (gnostic.openapi.v3.property) = {description: "结束时间"}];
  optional string operation_type = 4 [json_name = "operationType", (gnostic.openapi.v3.property) = {description: "操作类型"}];
  int32 page_size = 5 [json_name = "pageSize", (gnostic.openapi.v3.property) = {description: "分页大小"}];
  int32 page_num = 6 [json_name = "pageNum", (gnostic.openapi.v3.property) = {description: "页码"}];
}

// 获取用户权限审计日志 - 响应
message GetUserPermissionAuditLogsResponse {
  repeated api.user.service.v1.OperationLog logs = 1 [json_name = "logs", (gnostic.openapi.v3.property) = {description: "审计日志列表"}];
  int32 total = 2 [json_name = "total", (gnostic.openapi.v3.property) = {description: "总记录数"}];
}

// ========== 账户状态管理相关消息定义 ==========

// 用户账户状态
// 注意：此枚举与account.proto中的AccountStatus保持语义一致性
// 但使用不同的命名以避免混淆
enum UserAccountStatus {
  ACTIVE = 0;          // 活跃状态
  INACTIVE = 1;        // 未激活
  LOCKED = 2;          // 已锁定
  DISABLED = 3;        // 已禁用
  ACCOUNT_DELETED = 4; // 已删除
}

// 注意：以下账户状态管理相关消息已迁移至account.proto
// 请使用AccountService中的相关消息定义

// 以下是账户状态管理相关消息的引用说明：
// - 激活账户：使用 ActivateAccountRequest
// - 锁定账户：使用 LockAccountRequest
// - 解锁账户：使用 UnlockAccountRequest
// - 禁用账户：使用 DisableAccountRequest
// - 启用账户：使用 EnableAccountRequest
// - 验证账户状态：使用 VerifyAccountStatusRequest/Response
// - 账户安全策略：使用 AccountSecurityPolicy
// - 获取账户安全策略：使用 GetAccountSecurityPolicyRequest
// - 更新账户安全策略：使用 UpdateAccountSecurityPolicyRequest
// - 获取账户活动日志：使用 GetAccountActivityLogsRequest/Response