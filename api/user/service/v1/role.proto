syntax = "proto3";

package api.user.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pkg/utils/pagination/v1/pagination.proto";
import "api/user/service/v1/permission.proto";

option go_package = "om-platform/api/user/service/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.service.v1";

// 角色服务
// 错误处理：所有接口在发生错误时将返回ErrorResponse结构，包含统一的错误码、错误消息和详细信息
service RoleService {
  // 查询角色列表
  rpc ListRole (pkg.utils.pagination.v1.PagingRequest) returns (ListRoleResponse) {}

  // 查询角色详情
  rpc GetRole (GetRoleRequest) returns (Role) {}

  // 创建角色
  rpc CreateRole (CreateRoleRequest) returns (google.protobuf.Empty) {}

  // 更新角色
  rpc UpdateRole (UpdateRoleRequest) returns (google.protobuf.Empty) {}

  // 删除角色
  rpc DeleteRole (DeleteRoleRequest) returns (google.protobuf.Empty) {}
  
  // 获取角色权限列表
  rpc GetRolePermissions (GetRolePermissionsRequest) returns (GetRolePermissionsResponse) {}
  
  // 获取角色用户列表
  rpc GetRoleUsers (GetRoleUsersRequest) returns (GetRoleUsersResponse) {}
  
  // 创建临时角色
  rpc CreateTemporaryRole (CreateTemporaryRoleRequest) returns (Role) {}
  
  // 创建动态角色
  rpc CreateDynamicRole (CreateDynamicRoleRequest) returns (Role) {}
  
  // 应用权限模板到角色
  rpc ApplyTemplateToRole (ApplyTemplateToRoleRequest) returns (google.protobuf.Empty) {}
  
  // 检查用户是否满足动态角色条件
  rpc CheckDynamicRoleCondition (CheckDynamicRoleConditionRequest) returns (CheckDynamicRoleConditionResponse) {}
  
  // 获取角色继承树
  rpc GetRoleInheritanceTree (GetRoleInheritanceTreeRequest) returns (GetRoleInheritanceTreeResponse) {}
}

// 角色类型
enum RoleType {
  ROLE_TYPE_UNSPECIFIED = 0 [
    (gnostic.openapi.v3.property) = {description: "未指定"}
  ]; // 未指定
  ROLE_TYPE_SYSTEM = 1 [
    (gnostic.openapi.v3.property) = {description: "系统角色"}
  ]; // 系统角色
  ROLE_TYPE_CUSTOM = 2 [
    (gnostic.openapi.v3.property) = {description: "自定义角色"}
  ]; // 自定义角色
  ROLE_TYPE_DYNAMIC = 3 [
    (gnostic.openapi.v3.property) = {description: "动态角色"}
  ]; // 动态角色
  ROLE_TYPE_TEMPORARY = 4 [
    (gnostic.openapi.v3.property) = {description: "临时角色"}
  ]; // 临时角色
}

// 角色
message Role {
  optional uint32 id = 1 [
    json_name = "id",
    (gnostic.openapi.v3.property) = {description: "角色ID"}
  ];  // 角色ID

  optional string name = 2 [json_name = "name", (gnostic.openapi.v3.property) = {description: "角色名称"}];  // 角色名称

  optional int32 sort_id = 3 [json_name = "sortId", (gnostic.openapi.v3.property) = {description: "排序编号"}];  // 排序编号

  optional string code = 4 [json_name = "code", (gnostic.openapi.v3.property) = {description: "角色值"}];  // 角色值
  
  optional RoleType role_type = 5 [json_name = "roleType", (gnostic.openapi.v3.property) = {description: "角色类型"}]; // 角色类型

  optional string status = 6 [(gnostic.openapi.v3.property) = {
    description: "状态"
    default: { string: "ON" }
    enum: [{yaml: "ON"}, {yaml: "OFF"}]
  }];

  optional string remark = 7 [json_name = "remark", (gnostic.openapi.v3.property) = {description: "备注"}];  // 备注

  repeated uint32 menus = 8 [json_name = "menus", (gnostic.openapi.v3.property) = {description: "分配的菜单列表"}];  // 分配的菜单列表
  
  repeated uint32 permission_ids = 9 [json_name = "permissionIds", (gnostic.openapi.v3.property) = {description: "分配的权限ID列表"}]; // 分配的权限ID列表
  
  optional uint32 template_id = 10 [json_name = "templateId", (gnostic.openapi.v3.property) = {description: "应用的权限模板ID"}]; // 应用的权限模板ID
  
  optional uint32 priority = 11 [json_name = "priority", (gnostic.openapi.v3.property) = {description: "优先级(数值越大优先级越高)"}]; // 优先级
  
  optional api.user.service.v1.InheritanceRule inheritance_rule = 12 [json_name = "inheritanceRule", (gnostic.openapi.v3.property) = {description: "继承规则"}]; // 继承规则
  
  optional google.protobuf.Timestamp expire_time = 13 [json_name = "expireTime", (gnostic.openapi.v3.property) = {description: "过期时间(仅对临时角色有效)"}]; // 过期时间
  
  map<string, string> dynamic_conditions = 14 [json_name = "dynamicConditions", (gnostic.openapi.v3.property) = {description: "动态条件(仅对动态角色有效)"}]; // 动态条件

  optional uint32 create_by = 15 [json_name = "createBy", (gnostic.openapi.v3.property) = {description: "创建者ID"}]; // 创建者ID
  optional uint32 update_by = 16 [json_name = "updateBy", (gnostic.openapi.v3.property) = {description: "更新者ID"}]; // 更新者ID

  optional uint32 parent_id = 100 [json_name = "parentId", (gnostic.openapi.v3.property) = {description: "父节点ID"}];  // 父节点ID
  repeated Role children = 101 [json_name = "children", (gnostic.openapi.v3.property) = {description: "子节点树"}];  // 子节点树

  optional google.protobuf.Timestamp create_time = 200 [json_name = "createTime", (gnostic.openapi.v3.property) = {description: "创建时间"}];// 创建时间
  optional google.protobuf.Timestamp update_time = 201 [json_name = "updateTime", (gnostic.openapi.v3.property) = {description: "更新时间"}];// 更新时间
  optional google.protobuf.Timestamp delete_time = 202 [json_name = "deleteTime", (gnostic.openapi.v3.property) = {description: "删除时间"}];// 删除时间
}

// 角色列表 - 答复
message ListRoleResponse {
  repeated Role items = 1;
  uint32 total = 2;
}

// 角色数据 - 请求
message GetRoleRequest {
  uint32 id = 1;
}

// 创建角色 - 请求
message CreateRoleRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  Role data = 2;
}

// 更新角色 - 请求
message UpdateRoleRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  Role data = 2;

  google.protobuf.FieldMask update_mask = 3 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realName,userName"}
    },
    json_name = "updateMask"
  ]; // 要更新的字段列表

  optional bool allow_missing = 4 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ]; // 如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。
}

// 删除角色 - 请求
message DeleteRoleRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID

  uint32 id = 2;
}

// 获取角色权限列表 - 请求
message GetRolePermissionsRequest {
  uint32 role_id = 1 [json_name = "roleId", (gnostic.openapi.v3.property) = {description: "角色ID"}];
}

// 获取角色权限列表 - 响应
message GetRolePermissionsResponse {
  repeated Permission permissions = 1;
}

// 获取角色用户列表 - 请求
message GetRoleUsersRequest {
  uint32 role_id = 1 [json_name = "roleId", (gnostic.openapi.v3.property) = {description: "角色ID"}];
  pkg.utils.pagination.v1.PagingRequest paging = 2;
}

// 用户状态（复制自user.proto，避免循环依赖）
enum UserStatus {
  OFF = 0;
  ON = 1;
}

// 角色用户信息（简化版，避免循环依赖）
message RoleUser {
  uint32 id = 1;
  string user_name = 2 [json_name = "userName"];
  string real_name = 3 [json_name = "realName"];
  string nick_name = 4 [json_name = "nickName"];
  string avatar = 5;
  string email = 6;
  string mobile = 7;
  UserStatus status = 8;
}

// 获取角色用户列表 - 响应
message GetRoleUsersResponse {
  repeated RoleUser users = 1;
  uint32 total = 2;
}

// 创建临时角色 - 请求
message CreateTemporaryRoleRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  string name = 2;
  string code = 3;
  repeated uint32 permission_ids = 4 [json_name = "permissionIds"];
  optional uint32 template_id = 5 [json_name = "templateId"]; // 可选，应用权限模板
  google.protobuf.Timestamp expire_time = 6 [json_name = "expireTime"]; // 过期时间
  optional string remark = 7;
}

// 创建动态角色 - 请求
message CreateDynamicRoleRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  string name = 2;
  string code = 3;
  repeated uint32 permission_ids = 4 [json_name = "permissionIds"];
  optional uint32 template_id = 5 [json_name = "templateId"]; // 可选，应用权限模板
  map<string, string> dynamic_conditions = 6 [json_name = "dynamicConditions"]; // 动态条件
  optional string remark = 7;
}

// 应用权限模板到角色 - 请求
message ApplyTemplateToRoleRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ]; // 操作用户ID
  
  uint32 role_id = 2 [json_name = "roleId"];
  uint32 template_id = 3 [json_name = "templateId"];
  bool override_existing = 4 [json_name = "overrideExisting"]; // 是否覆盖现有权限
}

// 检查用户是否满足动态角色条件 - 请求
message CheckDynamicRoleConditionRequest {
  uint32 user_id = 1 [json_name = "userId"];
  uint32 role_id = 2 [json_name = "roleId"];
  map<string, string> context = 3; // 上下文信息，用于条件表达式求值
}

// 检查用户是否满足动态角色条件 - 响应
message CheckDynamicRoleConditionResponse {
  bool matches = 1;
  string reason = 2; // 不匹配原因
}

// 获取角色继承树 - 请求
message GetRoleInheritanceTreeRequest {
  uint32 role_id = 1 [json_name = "roleId"];
  optional uint32 max_depth = 2 [json_name = "maxDepth"]; // 最大深度，默认不限制
}

// 角色继承节点
message RoleInheritanceNode {
  uint32 id = 1;
  string name = 2;
  string code = 3;
  RoleType role_type = 4 [json_name = "roleType"];
  api.user.service.v1.InheritanceRule inheritance_rule = 5 [json_name = "inheritanceRule"];
  repeated RoleInheritanceNode children = 6;
}

// 获取角色继承树 - 响应
message GetRoleInheritanceTreeResponse {
  RoleInheritanceNode root = 1;
}